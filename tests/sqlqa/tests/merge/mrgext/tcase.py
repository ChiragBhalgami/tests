# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2014-2015 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

import time
from ...lib import hpdci
from ...lib import gvars
import defs

_testmgr = None
_testlist = []
_dci = None

def _init(hptestmgr, testlist=[]):
    global _testmgr
    global _testlist
    global _dci
    global sqldopt_schema 

    _testmgr = hptestmgr
    _testlist = testlist
    # default hpdci was created using 'SQL' as the proc name.
    # this default instance shows 'SQL>' as the prompt in the log file.
    _dci = _testmgr.get_default_dci_proc()
# restrictions for the first release of Merge inlcude
#   1. a subquery cannot be used in the on, update, or insert clauses
#   2. merge is not allowed with set on rollback,pub-sub, embedded update/delete, or stream
#   3. merge is not allowed if table has triggers or RI constraints
#   4. dp2 savepoints are not enabled with merge statement
#   5. merged table cannot be a view.

# **************************************************************************
#testcase A01 A01
#  Use of a non-key identity column in the table being merged into.
#  This testcase tests the merge/update statement with the identity column. 
# **************************************************************************

def test001(desc="""A01"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """+ defs.my_schema +""";"""
    output = _dci.cmdexec(stmt)
    
    # col1 identity, col6 primary
    # $SQL_complete_msg

    stmt = """create table ctasch (col1 largeint -- generated by default as IDENTITY 
    not null not droppable unique,
                      col2  char(8) not null not droppable,
                      col3  varchar(50) ,
                      col4 char varying(50),
                      col5 pic x(10),
                      col6 int not null not droppable primary key);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """insert into ctasch (col1,col2,col3,col4,col5,col6) values 
(1,'AAAAAAAA','BBBBBBBBBBBBBBBCCCCCCCcccccccc','DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD','this is a',111);"""
    output = _dci.cmdexec(stmt)

    stmt = """insert into ctasch (col1,col2,col3,col4,col5,col6) values 
(2,'XXXXXXXX','this field is 50 char','this field is varying to 50','field pic',112);"""
    output = _dci.cmdexec(stmt)

    
    stmt = """insert into ctasch (col1,col2,col3,col4,col5,col6) values 
(3,'XXXXXXXX','this field is 50 char','this field is varying to 50','field pic',114);"""
    output = _dci.cmdexec(stmt)
    
    stmt = """select * from ctasch order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 3)
    
    stmt = """update statistics for table ctasch on every column;"""
    output = _dci.cmdexec(stmt)
    
    # showddl ctasch;
    
    #  $err_msg 3241 " IDENTITY column not allowed"
    stmt = """merge into ctasch on col6=111 when matched then update set col2='AAAaaa';"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    #  $err_msg 3241 " IDENTITY column not allowed"
    stmt = """merge into ctasch on col6=111 when matched then update set col2='AAAbbb' when not matched then insert (col1,col2,col3,col4,col5,col6) values (11,'BBBbbb','AAAAAAAABBBBBCCCCTTTT','EEEEEEEEEEE','PIC X FIELD',114);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    # identity is not  replicated in create table as ...so col1,col6 are treated as primary keys, not identity.
    stmt = """CREATE TABLE CTASCH2 store by (col1,col6) as select * from ctasch;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 3)
    
    stmt = """update statistics for table ctasch2 on every column;"""
    output = _dci.cmdexec(stmt)
    # showddl ctasch2;
    
    stmt = """select * from ctasch2 order by 1 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a01exp""", 'a01s2')
    
    stmt = """update ctasch2 set (col2,col3,col5,col6)=('AAAABBBB','testing......','time',113) where col6=111;"""
    output = _dci.cmdexec(stmt)
    stmt = """update ctasch2 set (col2,col3,col5,col6)=('AAAABBBB','testing......','time',117) where col1=1;"""
    output = _dci.cmdexec(stmt)

    stmt = """merge into ctasch2 on col6=111 when matched then update set col2='AAAbbb' when not matched then insert (col2,col3,col4,col5,col6) values ('BBBbbb','AAAAAAAABBBBBCCCCTTTT','EEEEEEEEEEE','PIC X FIELD',114);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, '4024')

    stmt = """merge into ctasch2 on col6=111 when matched then update set (col1,col2)=(2,'AAAbbb') when not matched then insert (col1,col2,col3,col4,col5,col6) values (3,'1212121212','BBBbbb','AAAAAAAABBBBBCCCCTTTT','PIC X FIELD',114);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, '3241')

    stmt = """prepare s1 from
merge into ctasch2 on (col1,col6)=(1,113) when matched then update set (col2)=('AAAbbb') when not matched then insert (col1,col2,col3,col4,col5,col6) values (33,'1212121212','BBBbbb','AAAAAAAABBBBBCCCCTTTT','PIC X FIELD',114);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, '3241')
    _dci.expect_error_msg(output, '8822')
    
    #  test output is nondeterministic
    #  if plan does not have scan_unique, query will get error 3241

    #  won't be able to execute next couple of statements
    # #expect any *scan_unique*
    # explain options 'f' s1;
    # execute s1;

    #  $SQL_complete_msg
    stmt = """merge into ctasch2 on col6=113 when matched then update set col2='AAAbbb';"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, '3241')

    stmt = """insert into ctasch2 values(121212,'xyzxyz','end of abc','time of greatness','timeless',200);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output)
    
    stmt = """prepare s2 from
merge into ctasch2 on (col1,col6) = (121212,200) when matched then update set(col4)=('time of sorrow') when not matched then insert values (131313,'ABCDEF','begin abc','time of change','good changes for all',201);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, '3241')
    _dci.expect_error_msg(output, '8822')
    #  test output is nondeterministic
    #  if plan does not have scan_unique, query will get error 3241
    
    #  won't be able to execute next statement
    # #expect any *scan_unique*
    # explain options 'f' s2;
    stmt = """merge into ctasch2 on (col1,col6) = (select col1,col6 from ctasch2 where (col1 ,col6)=(121212,200)) when matched then update set(col4)=('time of pity');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, '3241')
    
    stmt = """merge into ctasch2 on (col1,col6)=(121212,200)  when matched then update set(col4)=('time of sorrow');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, '3241')
    
    stmt = """Create table ctasch4 like ctasch;"""
    output = _dci.cmdexec(stmt)
    # Identity not part of primary key
 
    stmt = """insert into ctasch4(select * from ctasch);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 3)

    stmt = """update statistics for table ctasch4 on every column;"""
    output = _dci.cmdexec(stmt)

    #  $err_msg 3241 " IDENTITY column not allowed"
    stmt = """merge into ctasch4 on (col2 = 'AAAAAAAA') when matched then update set (col2,col3) = ('ABABABAB','kkkkkkk') ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)

#  $err_msg 3241 " IDENTITY column not allowed"
    stmt = """merge into ctasch4 on (col2 = 'AAAbbb') when matched then update set (col2,col3) = ('ABABABAB','kkkkkkk') ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)

    stmt = """select * from ctasch4 order by col1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a01exp""", 'a01s10')

    stmt = """create table TTF1 (
             sky largeint -- generated by default as identity 
                  not null not droppable
            , vch7 varchar(7)
            , nint smallint
            , ch3 char(3)
            , nnum9 numeric(9,2)
            , ch4 char(4)
            , nnum5 numeric(5,1)
            , vch5 varchar(5)
            , nsint smallint signed not null not droppable
            , primary key(nsint)
   );"""
    output = _dci.cmdexec(stmt)

    stmt = """insert into TTF1 (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',3)
 ;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """update statistics for table TTF1 on every column;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create table M like TTF1;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into M (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1);"""
    output = _dci.cmdexec(stmt)
    
    stmt = """update statistics for table M on every column;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """update M set(vch7,nint) =(select vch7,nint from ttf1 where nsint=0) where nint=1;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """update M set(vch7,nint) =(select vch7,nint from ttf1 where nint=5) where (nsint=1);"""
    output = _dci.cmdexec(stmt)
    
    # on 10/14/2008 fails as others with a coredump.on 12/05/2008 passes
    # identity is part of primary key. errror IDENTITY column not allowed as part of clustering key.

    stmt = """create table ctasch5 (col1 largeint -- generated by default as IDENTITY 
                          not null not droppable,
                      col2  char(8) not null not droppable,
                      col3  varchar(50) ,
                      col4 char varying(50),
                      col5 pic x(10),
                      col6 int not null not droppable, 
                      primary key(col1));"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into ctasch5 (col1,col2,col3,col4,col5,col6) values (1,'AAAAAAAA','BBBBBBBBBBBBBBBCCCCCCCcccccccc','DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD','this is a',111);"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into ctasch5 (col1,col2,col3,col4,col5,col6) values (2,'XXXXXXXX','this field is 50 char','this field is varying to 50','field pic',112);"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into ctasch5 (col1,col2,col3,col4,col5,col6) values (3,'AAAAAAAA','BBBBBBBBBBBBBBBCCCCCCCcccccccc','DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD','this is a',111);"""
    output = _dci.cmdexec(stmt)

    #  $err_msg 3241 " IDENTITY column not allowed as part of clustering key"
    stmt = """merge into ctasch5 on (col6 = 112) when matched then update set (col2,col3) = ('ABABABAB','kkkkkkk');"""
    output = _dci.cmdexec(stmt)
    
    stmt = """drop table M;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """drop table ctasch;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """drop table ctasch2;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """drop table ctasch4;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """drop table ctasch5;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)
# **************************************************************************
#testcase A02 A02
#  error messages for merge ext. non-key identity column in table
# **************************************************************************

def test002(desc="""A02"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    stmt = """create table ctasch (col1 largeint -- generated by default as IDENTITY 
                         not null not droppable unique,
                      col2  char(8) not null not droppable,
                      col3  varchar(50) ,
                      col4 char varying(50),
                      col5 pic x(10),
                      col6 int not null not droppable primary key);"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into ctasch (col2,col3,col4,col5,col6) values ('AAAAAAAA','BBBBBBBBBBBBBBBCCCCCCCcccccccc','DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD','this is a',111);"""
    output = _dci.cmdexec(stmt)

    stmt = """insert into ctasch (col2,col3,col4,col5,col6) values ('XXXXXXXX','this field is 50 char','this field is varying to 50','field pic',112);"""
    output = _dci.cmdexec(stmt)

    stmt = """insert into ctasch (col2,col3,col4,col5,col6) values ('XXXXXXXX','this field is 50 char','this field is varying to 50','field pic',114);"""
    output = _dci.cmdexec(stmt)
    
    stmt = """update statistics for table ctasch on every column;"""
    output = _dci.cmdexec(stmt)

    stmt = """select * from ctasch order by 1;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create table ctasch3  store by (col1) as select * from ctasch;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """update statistics for table ctasch3 on every column;"""
    output = _dci.cmdexec(stmt)
    # showddl ctasch3;
    
    #  $err_msg 3241 " IDENTITY column not allowed"
    stmt = """merge into ctasch3 on (col6 = 112) when matched then update set (col2,col3) = ('ABABABAB','kkkkkkk');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, '3241')
    
    stmt = """merge into ctasch3 on (col2 = 'AAAAAAAA') when matched then update set (col2,col3) = ('ABABABAB','kkkkkkk')when not matched then insert (col1,col2,col3,col4,col5,col6) values (123,'BBBbbb','AAAAAAAABBBBBCCCCTTTT','EEEEEEEEEEE','PIC X FIELD',113);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, '3241')
    
    stmt = """merge into ctasch3 on (col2 = 'AAAAAAAA') when matched then update set (col2,col3) = ('ABABABAB','kkkkkkk')when not matched then insert (col2,col3,col4,col5,col6) values ('BBBbbb','AAAAAAAABBBBBCCCCTTTT','EEEEEEEEEEE','PIC X FIELD',113);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a02exp""", 'a02s2')
    
    stmt = """drop table TTF1;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create table TTF1 (
             sky largeint -- generated by default as identity 
              not null not droppable
            , vch7 varchar(7)
            , nint smallint
            , ch3 char(3)
            , nnum9 numeric(9,2)
            , ch4 char(4)
            , nnum5 numeric(5,1)
            , vch5 varchar(5)
            , nsint smallint signed not null not droppable
            , primary key(nsint)
   );"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into TTF1 (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',3)
 ;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """update statistics for table TTF1 on every column;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create table M like TTF1;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into M (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1);"""
    output = _dci.cmdexec(stmt)
    
    stmt = """update M set(vch7,nint) =(select vch7,nint from ttf1) where (nsint=1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a02exp""", 'a02s3')

    stmt = """drop table ctasch;"""
    output = _dci.cmdexec(stmt)

    stmt = """drop table ctasch3;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """drop table TTF1;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """drop table M;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)
# **************************************************************************
#testcase A03 A03
#  Use of a non-unique ON clause for a Merge update
# **************************************************************************
# comment out this case because of missing global tables  Ching 2014-11-13
# def test003(desc="""A03"""):
    # global _testmgr
    # global _testlist
    # global _dci
    # sqldopt_schema = """g_sqldopt"""
    # if not _testmgr.testcase_begin(_testlist): return
    # # verify that adding variable column is not the cause for missing data

    # stmt = """set schema """+ defs.my_schema + """;"""
    # output = _dci.cmdexec(stmt)

    # # create tables and data for merge
    # stmt = """create table mychar (col1 largeint not null,
  # col2  char(10),
  # col3  char(5),
  # col4  char(20),
  # primary key(col1));"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """insert into mychar values (1,'AAAAAAAAAA','BBBBB','my longish string');"""
    # output = _dci.cmdexec(stmt)

    # stmt = """insert into mychar values (2,'bbbbbbbbbb','ccccc','my second string');"""
    # output = _dci.cmdexec(stmt)

    # stmt = """update statistics for table mychar on every column;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """select * from mychar order by col1;"""
    # output = _dci.cmdexec(stmt)
    # _dci.expect_selected_msg(output, 2)
    
    # stmt = """create table TTF1 (
             # sky largeint not null not droppable
            # , vch7 varchar(7)
            # , nint smallint
            # , ch3 char(3)
            # , nnum9 numeric(9,2)
            # , ch4 char(4)
            # , nnum5 numeric(5,1)
            # , vch5 varchar(5)
            # , nsint smallint signed
            # , primary key(sky)
   # );"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """insert into TTF1 (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        # (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 # , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 # , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 # , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 # , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 # ;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """update statistics for table TTF1 on every column;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """select * from TTF1 order by sky;"""
    # output = _dci.cmdexec(stmt)
    # _dci.expect_selected_msg(output, 5)
    
    
    # stmt = """create table TTF (
             # sky largeint not null not droppable
            # , vch7 varchar(7)
            # , nint smallint
            # , ch3 char(3)
            # , nnum9 numeric(9,2)
            # , ch4 char(4)
            # , nnum5 numeric(5,1)
            # , vch5 varchar(5)
            # , nsint smallint signed
            # , primary key(sky)
   # );"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """insert into TTF (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        # (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 # , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 # , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 # , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 # , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 # ;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """update statistics for table TTF on every column;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """select * from TTF order by sky;"""
    # output = _dci.cmdexec(stmt)
    # _dci.expect_selected_msg(output, 5)
    
    # stmt = """create table TTF2(
                # sk largeint not null not droppable
                # , v1   varchar(7)
                # , n2   smallint
                # , c3   char(3)
                # , n4   numeric(9,2)
                # , c5   char(4)
                # , n6   numeric(5,1)
                # , v7   varchar(5)
                # , n8   smallint
                # , primary key (sk)) ;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """insert into TTF2 values(5,'abcdefg',5,'cc',0.00,      'cc',2     ,'cc',2),
    # (6,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 # , (7,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 # , (8,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 # , (9,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345);"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """update statistics for table TTF2 on every column;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """merge into mychar on col2='AAAAAAAAAA' when matched then update set (col2,col3)=('BBBBBBBBBB','eeeee');"""
    # output = _dci.cmdexec(stmt)
    # _dci.expect_complete_msg(output)
    
    # stmt = """merge into TTF2 using (select vch7,nint from ttf) x on ttf2.n2=x.nint when matched then update set (v1)=(x.vch7);"""
    # output = _dci.cmdexec(stmt)
    # _dci.expect_complete_msg(output)
    
    # # will it update two rows?
    # stmt = """create table t(a int not null, b largeint not null not droppable, c int,primary key (a));"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """insert into t values (1,12345,2),(2,23456,3),(3,23456,4);"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """update statistics for table t on every column;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """select * from t order by 1;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """merge into t on b=23456 when matched then update set (b,c)=(34567,5);"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """drop table myb2ul04 cascade;"""
    # output = _dci.cmdexec(stmt)
    
    # # create this table before 
    # #  BUG# 1323864
    # stmt = """create table  myb2ul04  store by (SDEC9_UNIQ) as  (select * from  """ + sqldopt_schema+""".b2uwl04); """
    # output = _dci.cmdexec(stmt)
    # _dci.expect_complete_msg(output)
    
    # stmt = """merge into myb2ul04 
  # using (select sdec9_uniq,ubin3_n2000 from """ + sqldopt_schema+""".b2uwl04 where ubin3_n2000 = 588) as z
  # on myb2ul04.sdec9_uniq=z.sdec9_uniq
    # when matched then update set ubin3_n2000 = 788;"""
    # output = _dci.cmdexec(stmt)

    # stmt = """update statistics for table myb2ul04 on every column;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """select ubin3_n2000,sdec9_uniq from myb2ul04 where sdec9_uniq in (2372,1553,194) ;"""
    # output = _dci.cmdexec(stmt)
    # _dci.expect_selected_msg(output, 3)
    
    # stmt = """create table tb2_4 (sbin int not null not droppable ,
# time0_uniq  time(0) not null not droppable,
# varchar0_uniq  char varying(8) not null not droppable,
# sdec decimal(9,0) signed not null not droppable,
# sdec9_uniq decimal(18,0) not null not droppable primary key);"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """update statistics for table tb2_4 on every column;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """merge into tb2_4 using (select * from myb2ul04) as t3 on tb2_4.sdec9_uniq=t3.sdec9_uniq

# when matched then update set (sbin,time0_uniq)=(t3.sbin0_4,t3.time0_uniq)

# when not matched then insert values (t3.sbin0_4,t3.time0_uniq,t3.varchar0_uniq,t3.sdec0_100,t3.sdec9_uniq);"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """select count(*) from tb2_4;"""
    # output = _dci.cmdexec(stmt)

    # stmt = """drop table mychar;"""
    # output = _dci.cmdexec(stmt)

    # stmt = """drop table ttf;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """drop table ttf1;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """drop table ttf2;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """drop table myb2ul04;"""
    # output = _dci.cmdexec(stmt)

    # stmt = """drop table tb2_4;"""
    # output = _dci.cmdexec(stmt)
    
    # _testmgr.testcase_end(desc)
# # *****************************************************************
# # **************************************************************************
# #testcase A04 A04
# #  Use of a non-unique ON clause for a Merge update -error messages expected due to restrictions
# # **************************************************************************

# # comment out this case because of missing global tables  Ching 2014-11-13
# def test004(desc="""A04"""):
    # global _testmgr
    # global _testlist
    # global _dci
    # sqldopt_schema = """g_sqldopt"""
    # if not _testmgr.testcase_begin(_testlist): return
    
    # stmt = """create table  myb2ul04  store by (SDEC9_UNIQ) as  (select * from  """ + sqldopt_schema+""".b2uwl04);"""
    # output = _dci.cmdexec(stmt)
    # _dci.expect_complete_msg(output)
    
    # stmt = """update statistics for table myb2ul04 on every column;"""
    # output = _dci.cmdexec(stmt)
    # _dci.expect_inserted_msg(output)
    
    # stmt = """create table tb2_5 (sbin int not null not droppable ,
# time0_uniq  time(0) not null not droppable,
# varchar0_uniq  char varying(8) not null not droppable,
# sdec decimal(9,0) signed not null not droppable,
# sdec9_uniq decimal(18,0) not null not droppable, primary key (sbin,sdec9_uniq)) ;"""
    # output = _dci.cmdexec(stmt)

    # stmt = """insert into tb2_5(select sbin0_4,time0_uniq,varchar0_uniq,sdec0_100,sdec9_uniq from myb2ul04);"""
    # output = _dci.cmdexec(stmt)

    # stmt = """update statistics for table tb2_5 on every column;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """merge into tb2_5 using (select time0_uniq,varchar0_uniq,sdec0_100 from myb2ul04) as x on tb2_5.time0_uniq = x.time0_uniq when matched then update set (time0_uniq,varchar0_uniq,sdec) = (current_time,'aaaaaa',3.4);"""
    # output = _dci.cmdexec(stmt)
    # _dci.expect_complete_msg(output)
    
    # stmt = """merge into tb2_5 using (select sdec0_100,time0_uniq,sdec9_uniq from myb2ul04) as t3 on tb2_5.sdec9_uniq=t3.sdec9_uniq when matched then update set (sdec,time0_uniq)=(t3.sdec0_100,t3.time0_uniq);"""
    # output = _dci.cmdexec(stmt)
    # _dci.expect_complete_msg(output)
    
    # stmt = """merge into tb2_5 using (select sdec0_100, sdec9_uniq from myb2ul04 where sdec9_uniq between 50 and 60) as t3 on tb2_5.sdec9_uniq=t3.sdec9_uniq when matched then update set (sdec)=(t3.sdec0_100) ;"""
    # output = _dci.cmdexec(stmt)
    # _dci.expect_complete_msg(output)
    
    # #  missing data from g_sqldopt.b2uwl04
    # #  $SQL_selected_msg 11
    # stmt = """select sdec,sdec9_uniq from tb2_5 where sdec9_uniq between 50 and 60 order by sdec9_uniq;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """create table mychar (col1 largeint not null,
  # col2  char(10),
  # col3  char(5),
  # col4  char(20),
  # primary key(col1));"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """insert into mychar values(1,'AAAAAAAAAA','BBBBB','my longish string'),
# (2,'bbbbbbbbbb','ccccc','my second string');"""
    # output = _dci.cmdexec(stmt)

    # stmt = """merge into mychar on col2='ACACACACAC' when matched then update set (col2,col3
# )=('BBBBBBBBBB','eeeee') when not matched then insert (col1,col2,col3,col4) values (2,'BBBBBBBBBB','fefio','testing');"""
    # output = _dci.cmdexec(stmt)
    # _dci.expect_file(output, defs.test_dir + """/a04exp""", 'a04s1')
    
    # stmt = """create table TTF (
             # sky largeint not null not droppable
            # , vch7 varchar(7)
            # , nint smallint
            # , ch3 char(3)
            # , nnum9 numeric(9,2)
            # , ch4 char(4)
            # , nnum5 numeric(5,1)
            # , vch5 varchar(5)
            # , nsint smallint signed
            # , primary key(sky)
   # );"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """insert into TTF (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        # (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 # , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 # , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 # , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 # , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 # ;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """create table TTF2(
                # sk largeint not null not droppable
                # , v1   varchar(7)
                # , n2   smallint
                # , c3   char(3)
                # , n4   numeric(9,2)
                # , c5   char(4)
                # , n6   numeric(5,1)
                # , v7   varchar(5)
                # , n8   smallint
                # , primary key (sk)) ;"""
    # output = _dci.cmdexec(stmt)

    # stmt = """insert into TTF2 values(5,'abcdefg',5,'cc',0.00,      'cc',2     ,'cc',2),
    # (6,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 # , (7,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 # , (8,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 # , (9,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345);"""
    # output = _dci.cmdexec(stmt)
    
    # # should give error using when matched and when not matched syntax .
    # stmt = """merge into TTF2 using (select vch7,nint from ttf) x on ttf2.n2=x.nint when matched then update set (v1)=(x.vch7) 
# when not matched then insert (sk, v1,n2,c3,n4,c5,n6,v7,n8) values (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2);"""
    # output = _dci.cmdexec(stmt)
    # _dci.expect_file(output, defs.test_dir + """/a04exp""", 'a04s2')
    
    # stmt = """drop table TTF2;"""
    # output = _dci.cmdexec(stmt)

    # stmt = """drop table tb2_5;"""
    # output = _dci.cmdexec(stmt)
    
    # stmt = """drop table mychar;"""
    # output = _dci.cmdexec(stmt)

    # stmt = """drop table myb2ul04;"""
    # output = _dci.cmdexec(stmt)
    
    # _testmgr.testcase_end(desc)

# **************************************************************************
#testcase A05 A05
#  delete using merge
# **************************************************************************

def test005(desc="""A05"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """+ defs.my_schema + """;"""
    output = _dci.cmdexec(stmt)

    stmt = """create table mychar (col1 largeint not null,
  col2  char(10),
  col3  char(5),
  col4  char(20),
  primary key(col1));"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into mychar values(1,'AAAAAAAAAA','BBBBB','my longish string'),
(2,'bbbbbbbbbb','ccccc','my second string');"""
    output = _dci.cmdexec(stmt)
    
    stmt = """select * from mychar order by col1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a05exp""", 'a05s0')
    
    stmt = """create table TTF1 (
             sky largeint not null not droppable
            , vch7 varchar(7)
            , nint smallint
            , ch3 char(3)
            , nnum9 numeric(9,2)
            , ch4 char(4)
            , nnum5 numeric(5,1)
            , vch5 varchar(5)
            , nsint smallint signed
            , primary key(sky)
   );"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into TTF1 (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 ;"""
    output = _dci.cmdexec(stmt)
    
    # selected 5
    stmt = """select * from TTF1 order by sky;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a05exp""", 'a05s1')
    
    stmt = """drop table TTF;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create table TTF (
             sky largeint not null not droppable
            , vch7 varchar(7)
            , nint smallint
            , ch3 char(3)
            , nnum9 numeric(9,2)
            , ch4 char(4)
            , nnum5 numeric(5,1)
            , vch5 varchar(5)
            , nsint smallint signed
            , primary key(sky)
   );"""
    output = _dci.cmdexec(stmt)

    stmt = """insert into TTF (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 ;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """select * from TTF order by sky;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a05exp""", 'a05s2')
    
    stmt = """create table TTF2(
                sk largeint not null not droppable
                , v1   varchar(7)
                , n2   smallint
                , c3   char(3)
                , n4   numeric(9,2)
                , c5   char(4)
                , n6   numeric(5,1)
                , v7   varchar(5)
                , n8   smallint
                , primary key (sk)) ;"""
    output = _dci.cmdexec(stmt)

    stmt = """insert into TTF2 values
        (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 ;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """select * from mychar;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """merge into mychar on col2='AAAAAAAAAA' when matched then delete;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a05exp""", 'a05s3')
    
    stmt = """select * from mychar order by 1;"""
    output = _dci.cmdexec(stmt)
    
    # should give an error due to insert
    stmt = """merge into mychar on col2='ACACACACAC' when matched then update set (col3,col4)=('fefio','testing')
 when not matched then insert (col1,col2,col3,col4) values (2,'BBBBBBBBBB','fefio','testing');"""
    output = _dci.cmdexec(stmt)
    
    # On clause has primary key
    stmt = """merge into mychar on col1=2 when matched then update set (col3,col4)=('fefio','testing')
 when not matched then insert (col1,col2,col3,col4) values (2,'BBBBBBBBBB','fefio','testing');"""
    output = _dci.cmdexec(stmt)
    
    stmt = """merge into mychar on col1=3 when matched then update set (col3,col4)=('fefio','testing')
 when not matched then insert (col1,col2,col3,col4) values (3,'ACACACACAC','fefio','testing');"""
    output = _dci.cmdexec(stmt)
    
    stmt = """merge into TTF2 using (select * from TTF) as t on ttf2.sk=t.sky when not matched then insert (sk, v1,n2,c3,n4,c5,n6,v7,n8) values (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2);"""
    output = _dci.cmdexec(stmt)
    
    stmt = """select * from ttf2 order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a05exp""", 'a05s4')
    
    # no rows will be left, all deleted
    stmt = """merge into TTF2 using (select vch7,nint from ttf) x on n2=x.nint when matched then delete;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """select * from ttf2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a05exp""", 'a05s5')
    
    # repopulate table
    stmt = """insert into TTF2 values
        (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 ;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """select * from ttf2 order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a05exp""", 'a05s6')
    
    stmt = """merge into TTF2 using (select * from TTF) as t on ttf2.sk=t.sky when not matched then insert (sk, v1,n2,c3,n4,c5,n6,v7,n8) values (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2);"""
    output = _dci.cmdexec(stmt)
    # goes through and claims an update even though nothing is changed.ie there is a match.
    
    stmt = """select * from ttf2 order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a05exp""", 'a05s7')
    
    stmt = """drop table mychar;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """drop table ttf2;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """drop table ttf;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """drop table ttf1;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)
# *********************************************
#testcase A06 A06
#  delete using merge -error messages validated
# **************************************************************************
def test006(desc=""" A06"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    stmt = """create table TTF (
             sky largeint not null not droppable
            , vch7 varchar(7)
            , nint smallint
            , ch3 char(3)
            , nnum9 numeric(9,2)
            , ch4 char(4)
            , nnum5 numeric(5,1)
            , vch5 varchar(5)
            , nsint smallint signed
            , primary key(sky)
   );"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into TTF (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 ;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create table TTF2(
                sk largeint not null not droppable
                , v1   varchar(7)
                , n2   smallint
                , c3   char(3)
                , n4   numeric(9,2)
                , c5   char(4)
                , n6   numeric(5,1)
                , v7   varchar(5)
                , n8   smallint
                , primary key (sk)) ;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into TTF2 values
        (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 ; """
    output = _dci.cmdexec(stmt)
    
    # should give error
    stmt = """merge into TTF2 using (select vch7,nint from ttf) x on ttf2.n2=x.nint when matched then delete 
when not matched then insert (sk, v1,n2,c3,n4,c5,n6,v7,n8) values (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a06exp""", 'a06s1')
    
    # should give error ???
    stmt = """merge into TTF2 using (select vch7,nint from ttf) x on ttf2.n2=x.nint 
when not matched then insert (sk, v1,n2,c3,n4,c5,n6,v7,n8) values (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a06exp""", 'a06s2')
    
    stmt = """merge into TTF2 using (select vch7,nint from ttf) x on ttf2.n2=x.nint 
when not matched delete ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, '15001')
    
    stmt = """drop table t;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create table t(a int not null, b largeint not null not droppable, c int,primary key (a));"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into t values (1,12345,2),(2,23456,3),(3,23456,4);"""
    output = _dci.cmdexec(stmt)
    
    stmt = """select * from t order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a06exp""", 'a06s4')
    
    stmt = """merge into t on b=23456 when matched then delete;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """select * from t order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a06exp""", 'a06s5')
    
    stmt = """merge into t on b=23456 when not matched then delete;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, '15001')

    stmt = """drop table t;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """drop table TTF;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """drop table TTF2;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)
# *********************************************
#testcase A07 A07
#  explain using update and merge on table with identity key
# **************************************************************************
def test007(desc="""A07"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """create table ctasch (col1 largeint -- generated by default as IDENTITY 
                      not null not droppable unique,
                      col2  char(8) not null not droppable,
                      col3  varchar(50) ,
                      col4 char varying(50),
                      col5 pic x(10),
                      col6 int not null not droppable primary key);"""
    output = _dci.cmdexec(stmt)

    stmt = """insert into ctasch (col1,col2,col3,col4,col5,col6) values (1,'AAAAAAAA','BBBBBBBBBBBBBBBCCCCCCCcccccccc','DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD','this is a',111);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 1)
    
    stmt = """insert into ctasch (col1,col2,col3,col4,col5,col6) values (2,'XXXXXXXX','this field is 50 char','this field is varying to 50','field pic',112);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 1)
    
    stmt = """insert into ctasch (col1,col2,col3,col4,col5,col6) values (3,'XXXXXXXX','this field is 50 char','this field is varying to 50','field pic',114);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 1)
    
    stmt = """select * from ctasch;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 3)
    
    stmt = """showddl ctasch;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_any_substr(output, 'CREATE TABLE')
    _dci.expect_any_substr(output, 'CTASCH')
    _dci.expect_any_substr(output, 'INDEX')
    _dci.expect_any_substr(output, 'CONSTRAINT')
    
    # $err_msg 3241 " IDENTITY column not allowed"
    stmt = """explain options 'f' merge into ctasch on col6=111 when matched then update set col2='AAAaaa';"""
    output = _dci.cmdexec(stmt)
    
    # $err_msg 3241 " IDENTITY column not allowed"
    stmt = """explain options 'f' merge into ctasch on col2='AAAAAAAA' when matched then update set col5='testing';"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Create table ctasch4 like ctasch;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)

    stmt = """insert into ctasch4(select * from ctasch);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 3)
    
    # $err_msg 3241 " IDENTITY column not allowed"
    stmt = """explain options 'f' merge into ctasch4 on (col2 = 'AAAAAAAA') when matched then update set (col2,col3) = ('ABABABAB','kkkkkkk') ;"""
    output = _dci.cmdexec(stmt)
    
    # $err_msg 3241 " IDENTITY column not allowed"
    stmt = """explain options 'f' merge into ctasch4 on (col6 = 114) when matched then update set (col2,col3) = ('ABABABAB','kkkkkkk') ;"""
    output = _dci.cmdexec(stmt)

    stmt = """drop table ctasch;"""
    output = _dci.cmdexec(stmt)

    stmt = """drop table ctasch4;"""
    output = _dci.cmdexec(stmt)
     
    _testmgr.testcase_end(desc)
# *********************************************
#testcase A08 A08
#  explain using update and merge on table non unique on clause
# **************************************************************************
def test008(desc="""A08"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """create table TTF1 (
             sky largeint not null not droppable
            , vch7 varchar(7)
            , nint smallint
            , ch3 char(3)
            , nnum9 numeric(9,2)
            , ch4 char(4)
            , nnum5 numeric(5,1)
            , vch5 varchar(5)
            , nsint smallint signed
            , primary key(sky)
   );"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into TTF1 (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 ;"""
    output = _dci.cmdexec(stmt)
    # selected 5
    
    stmt = """select * from TTF1 order by sky;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a08exp""", 'a08s0')
    
    stmt = """create table TTF (
             sky largeint not null not droppable
            , vch7 varchar(7)
            , nint smallint
            , ch3 char(3)
            , nnum9 numeric(9,2)
            , ch4 char(4)
            , nnum5 numeric(5,1)
            , vch5 varchar(5)
            , nsint smallint signed
            , primary key(sky)
   );"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into TTF (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 ;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """select * from TTF order by sky;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a08exp""", 'a08s1')
    
    stmt = """drop table ttf2;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create table TTF2(
                sk largeint not null not droppable
                , v1   varchar(7)
                , n2   smallint
                , c3   char(3)
                , n4   numeric(9,2)
                , c5   char(4)
                , n6   numeric(5,1)
                , v7   varchar(5)
                , n8   smallint
                , primary key (sk)) ;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into TTF2 values(5,'abcdefg',5,'cc',0.00,      'cc',2     ,'cc',2),
    (6,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (7,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (8,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (9,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345);"""
    output = _dci.cmdexec(stmt)
    
    # #expect any *unique_merge *TTF2*
    stmt = """explain options 'f' merge into TTF2 using (select sky,vch7,nint from ttf) x on ttf2.sk=x.sky when matched then update set (v1)=(x.vch7);"""
    output = _dci.cmdexec(stmt)
   
    # #expect any *subset_update *TTF2*
    stmt = """explain options 'f' merge into TTF2 using (select vch7,nint from ttf) x on ttf2.n2=x.nint when matched then update set (v1)=(x.vch7);"""
    output = _dci.cmdexec(stmt)
   
    # #expect any *cursor_update *TTF2*
    stmt = """explain options 'f' update TTF2 set (v1,n2,c3 ) = (select vch7,nint,ch3 from ttf where sky=4) where sk=6;"""
    output = _dci.cmdexec(stmt)

    stmt = """drop table ttf;"""
    output = _dci.cmdexec(stmt)
    stmt = """drop table ttf1;"""
    output = _dci.cmdexec(stmt)
    stmt = """drop table ttf2;"""
    output = _dci.cmdexec(stmt)
 
    _testmgr.testcase_end(desc)
# *********************************************
#testcase A09 A09
#  explain using update and merge on table non unique on clause with delete
# **************************************************************************

def test009(desc="""a09 verify missing data after add variable column"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """drop table ttf1;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create table TTF1 (
             sky largeint not null not droppable
            , vch7 varchar(7)
            , nint smallint 
            , ch3 char(3)
            , nnum9 numeric(9,2)
            , ch4 char(4)
            , nnum5 numeric(5,1)
            , vch5 varchar(5)
            , nsint smallint signed
            , primary key(sky)
   );"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """insert into TTF1 (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 5)
    # selected 5
    
    stmt = """select * from TTF1 order by sky;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 5)
    
    stmt = """drop table ttf;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create table TTF (
             sky largeint not null not droppable
            , vch7 varchar(7)
            , nint smallint
            , ch3 char(3)
            , nnum9 numeric(9,2)
            , ch4 char(4)
            , nnum5 numeric(5,1)
            , vch5 varchar(5)
            , nsint smallint signed
            , primary key(sky)
   );"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """insert into TTF (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        (1,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 5)
    
    stmt = """select * from TTF order by sky;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 5)
    
    stmt = """drop table ttf2;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create table TTF2(
                sk largeint not null not droppable
                , v1   varchar(7)
                , n2   smallint
                , c3   char(3)
                , n4   numeric(9,2)
                , c5   char(4)
                , n6   numeric(5,1)
                , v7   varchar(5)
                , n8   smallint
                , primary key (sk)) ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """insert into TTF2 values(5,'abcdefg',5,'cc',0.00,      'cc',2     ,'cc',2),
    (6,'a',      1,'a'  ,0.9,       NULL,NULL  ,NULL,0)
 , (7,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (8,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (9,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 5)
    
    #  #expect any *unique_merge *TTF2*
    stmt = """explain options 'f' merge into TTF2 using (select sky,vch7,nint from ttf) x on ttf2.sk=x.sky when matched then delete;"""
    output = _dci.cmdexec(stmt)

    #  #expect any *subset_delete *TTF2*
    stmt = """explain options 'f' merge into TTF2 using (select vch7,nint from ttf) x on ttf2.n2=x.nint when matched then delete;"""
    output = _dci.cmdexec(stmt)

    stmt = """drop table ttf;"""
    output = _dci.cmdexec(stmt)

    stmt = """drop table ttf1;"""
    output = _dci.cmdexec(stmt)

    stmt = """drop table ttf2;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)
# *************************************
# *********************************************
#testcase A10 A10
#  using unique index as but not primary key for on clause
#  explain using update and merge on table non unique on clause with delete
# **************************************************************************

def test010(desc="""A10"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    stmt = """create table TTF1 (
             sky largeint not null not droppable
            , vch7 varchar(7)
            , nint smallint not null
            , ch3 char(3)
            , nnum9 numeric(9,2)
            , ch4 char(4) not null
            , nnum5 numeric(5,1)
            , vch5 varchar(5)
            , nsint smallint signed
            , primary key(sky)
   );"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """create unique index ttfind1 on ttf1(nint);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """create index ttfind2 on ttf1(ch4);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)    

    stmt = """insert into TTF1 (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        (1,'a',      1,'a'  ,0.9,       'aa',NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 5)
    # selected 5

    stmt = """select * from TTF1 order by sky;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a10exp""", 'a10s0a')
    
    stmt = """create table TTF (
             sky largeint not null not droppable
            , vch7 varchar(7)
            , nint smallint not null
            , ch3 char(3)
            , nnum9 numeric(9,2)
            , ch4 char(4) not null
            , nnum5 numeric(5,1)
            , vch5 varchar(5)
            , nsint smallint signed
            , primary key(sky)
   );"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """create unique index ttf_ind1 on ttf(nint);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """create index ttf_ind2 on ttf(ch4);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)    

    stmt = """insert into TTF (sky,vch7,nint,ch3,nnum9,ch4,nnum5,vch5,nsint) values
        (1,'a',      1,'a'  ,0.9,       'dd',NULL  ,NULL,0)
 , (2,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (3,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (4,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345)
 , (5,'abcdefg',5,'cc' ,0.09,      'cc',2     ,'cc',2)
 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 5)

    stmt = """select * from TTF order by sky;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a10exp""", 'a10s0b')

    stmt = """create table TTF2(
                sk largeint not null not droppable
                , v1   varchar(7)
                , n2   smallint not null
                , c3   char(3)
                , n4   numeric(9,2)
                , c5   char(4) not null
                , n6   numeric(5,1)
                , v7   varchar(5)
                , n8   smallint
                , primary key (sk)) ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)

    stmt = """insert into TTF2 values(5,'abcdefg',5,'cc',0.00,      'cc',2     ,'cc',2),
    (6,'a',      1,'a'  ,0.9,       'ee',NULL  ,NULL,0)
 , (7,'cc'     ,2,'cc' ,2.00,      'cc',2.0   ,'cc',2)
 , (8,'abcdefg',3,'cc' ,0.09,    'alph',2     ,'cc',1)
 , (9,'b',      4,'c'  ,1234567.89,'e' ,1234.5,'c' ,12345);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 5)

    stmt = """merge into ttf using (select n2,c3,n4,c5 from ttf2) x on ttf.nint=x.n2
when matched then update set (ch3,nnum9,ch4)=(x.c3,x.n4,x.c5);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from ttf order by nint;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/a10exp""", 'a10s0')

    stmt = """explain options 'f' merge into TTF using (select n2,c3 from ttf2) x on (ttf.nint)=(x.n2)  when matched then update set ch3=x.c3;"""
    output = _dci.cmdexec(stmt)

    #$err_msg 4002 "\"NEW@\".NINT" "\"NEW@\"" "\"OLD@\", TRAFODION.SCH_MRGEXT.TTF_IND1, X" "TRAFODION.SCH_MRGEXT"
    stmt = """explain options 'f' merge into TTF using (select n2,c3 from ttf2) x on (ttf.nint)=(x.n2)  when matched then delete;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, '4002')
    
    stmt = """drop table ttf;"""
    output = _dci.cmdexec(stmt)
    stmt = """drop table ttf1;"""
    output = _dci.cmdexec(stmt)
    stmt = """drop table ttf2;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)


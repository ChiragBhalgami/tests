# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2015 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

from ...lib import hpdci
from ...lib import gvars
import defs
import loaddata

_testmgr = None
_testlist = []
_dci = None

def _init(hptestmgr, testlist=[]):
    global _testmgr
    global _testlist
    global _dci
    
    _testmgr = hptestmgr
    _testlist = testlist
    # default hpdci was created using 'SQL' as the proc name.
    # this default instance shows 'SQL>' as the prompt in the log file.
    _dci = _testmgr.get_default_dci_proc()
    
def test001(desc="""N100"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    #testN100
    #rows between unbounded preceding and current row with max() and 
    #dense_rank() over(partition by order by) having avg in the subquery
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num,sum(copayment) asc, copayment, insname
rows between unbounded preceding and current row) as MaxCoPayment,
dense_rank() over (order by insurance.num,sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a1exp""")
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
sum(copayment) over (partition by ee1.deptnum order by insurance.num, sum(copayment) asc, copayment, insname
rows between unbounded preceding and current row) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4340")
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname,insurance.num
rows between unbounded preceding and 4 preceding) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname,insurance.num)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a3Exp""")
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between current row and current row) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a4Exp""")
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between 5 preceding and current row) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a5Exp""")
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between 5 preceding and 5 preceding) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num,ee1.deptnum,copayment;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a6Exp""")
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between 5 preceding and current row) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a7Exp""")
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between current row and unbounded following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4349")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between unbounded preceding and current row) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc) as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,insname, copayment, ee1.deptnum
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a9Exp""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between unbounded preceding and 5 following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc) as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,insname, copayment, ee1.deptnum
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a10Exp""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between unbounded preceding and unbounded following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc) as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,insname, copayment, ee1.deptnum
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a11Exp""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
avg(copayment) over (order by insurance.num, sum(copayment) asc rows between 5 preceding and unbounded following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc) as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,insname, copayment, ee1.deptnum
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a12Exp""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between 5 preceding and 5 following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc) as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,insname, copayment, ee1.deptnum
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a12aExp""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
avg(copayment) over (order by insurance.num, sum(copayment) asc rows between current row and unbounded following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc) as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,insname, copayment, ee1.deptnum
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a13Exp""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between current row and 4 following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc) as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,insname, copayment, ee1.deptnum
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a14Exp""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between 2 following and 4 following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc) as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,insname, copayment, ee1.deptnum
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a15Exp""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
avg(copayment) over (order by insurance.num, sum(copayment) asc rows between 2 following and unbounded following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc) as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,insname, copayment, ee1.deptnum
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a16Exp""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between 2 preceding and current row) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc) as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,insname, copayment, ee1.deptnum
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a17Exp""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between 0 following and current row) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc) as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,insname, copayment, ee1.deptnum
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n100exp""", """a18Exp""")
    
    _testmgr.testcase_end(desc)

def test002(desc="""N101"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN101
    #tests for row_number are here:
 
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between unbounded preceding and current row) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a1""")
    
    #NS: works with ora.
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (partition by ee1.deptnum order by insurance.num,max(copayment) asc, copayment, insname
rows between unbounded preceding and current row) as MaxCoPayment,
row_number() over (partition by ee1.deptnum order by insurance.num,max(copayment) asc, copayment, insname)
as ROWNUM
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a2""")
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max( copayment) over (partition by copayment order by insurance.num, sum(copayment) asc, copayment, insname
rows between unbounded preceding and current row) as MaxCoPayment,
row_number() over (partition by copayment order by insurance.num, sum(copayment) asc, copayment, insname)
as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a3""")
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num,sum(copayment) asc, copayment, insname
rows between unbounded preceding and 4 preceding) as MaxCoPayment,
row_number() over (order by insurance.num,sum(copayment) asc, copayment, insname)
as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num,ee1.deptnum, copayment;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a4""")
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between current row and current row) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num,ee1.deptnum, copayment;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a5""")
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between current row and 3 following) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a6""")
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between 5 preceding and 5 preceding) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a7""")
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between 5 preceding and current row) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num,ee1.deptnum, copayment;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a8""")
    
    stmt = """select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between unbounded preceding and current row) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a9""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between unbounded preceding and current row) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc) as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insname, copayment, ee1.deptnum,insurance.num
order by insurance.num,ee1.deptnum, copayment;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """ajExp""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between unbounded preceding and 5 following) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc) as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,insname, copayment, ee1.deptnum
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a10""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between unbounded preceding and unbounded following) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc) as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insname, copayment, ee1.deptnum,insurance.num
order by insurance.num;;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a11""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between 5 preceding and unbounded following) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc) as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insname, copayment, ee1.deptnum,insurance.num
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a12""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between 5 preceding and 5 following) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc) as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insname, copayment, ee1.deptnum,insurance.num
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a13""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between current row and unbounded following) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc) as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insname, copayment, ee1.deptnum,insurance.num
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a14""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between current row and 4 following) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc) as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insname, copayment, ee1.deptnum,insurance.num
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a15""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between 2 following and 4 following) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc) as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insname, copayment, ee1.deptnum,insurance.num
order by insurance.num,ee1.deptnum, copayment;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a16""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between 2 following and unbounded following) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc) as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insname, copayment, ee1.deptnum,insurance.num
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a17""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between 2 following and unbounded following) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc) as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insname, copayment, ee1.deptnum,insurance.num
order by insurance.num,ee1.deptnum, copayment;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a18""")
    
    stmt = """select ee1.deptnum, copayment, insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc rows between 0 following and current row) as MaxCoPayment,
row_number() over (order by insurance.num, sum(copayment) asc) as RowNum
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insname, copayment, ee1.deptnum,insurance.num
order by insurance.num,ee1.deptnum, copayment;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n101exp""", """a19""")
    
    _testmgr.testcase_end(desc)

def test003(desc="""N102"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestNl02
    #rows between <n> preceding and <m> preceding  (n > m) with max() over (partition by)
    #having avg in the subquery
 
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between 4 preceding and 2 preceding) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a1""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between unbounded preceding and 2 preceding) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a2""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between unbounded preceding and current row) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a3""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between 5 preceding and current row) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a4""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between current row and current row) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a5""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between 4 preceding and 2 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a6""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between 4 preceding and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a7""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between unbounded preceding and 2 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a8""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between unbounded preceding and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a9""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between current row and 2 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a10""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between current row and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a11""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between 0 following and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a12""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between 4 following and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a13""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between 3 following and 4 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a14""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (order by paygrade+salary, insurance.num, firstname asc
rows between 4 following and 5 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n102exp""", """a15""")
    
    _testmgr.testcase_end(desc)

def test004(desc="""N103"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN103
    #tests for partition with 'max':
 
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 4 preceding and 2 preceding) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a1""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between unbounded preceding and 2 preceding) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a2""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between unbounded preceding and current row) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a3""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 5 preceding and current row) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a4""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between current row and current row) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a5""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 4 preceding and 2 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a6""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 4 preceding and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a7""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between unbounded preceding and 2 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a8""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between unbounded preceding and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a9""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between current row and 2 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a10""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between current row and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a11""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 0 following and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a12""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 4 following and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a13""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 4 following and 14 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a14""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
max (salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 4 following and 5 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n103exp""", """a15""")
    
    _testmgr.testcase_end(desc)

def test005(desc="""N104"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN104
    #tests for partition with 'min':
 
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 4 preceding and 2 preceding) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a1""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between unbounded preceding and 2 preceding) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a2""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between unbounded preceding and current row) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a3""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 5 preceding and current row) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a4""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between current row and current row) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a5""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 4 preceding and 2 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a6""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 4 preceding and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a7""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between unbounded preceding and 2 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a8""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between unbounded preceding and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a9""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between current row and 2 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a10""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between current row and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a11""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 0 following and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a12""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 4 following and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a13""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 4 following and 4 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a14""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 3 following and 4 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a15""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
min(salary) over (partition by paygrade order by paygrade+salary, insurance.num, firstname asc
rows between 4 following and 5 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n104exp""", """a16""")
    
    _testmgr.testcase_end(desc)

def test006(desc="""N105"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN105
    #tests for partition with 'variance':
 
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between 4 preceding and 2 preceding) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """a1""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between unbounded preceding and 2 preceding) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """a2""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between unbounded preceding and current row) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """a3""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between 5 preceding and current row) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """a4""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between current row and current row) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """a5""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between 4 preceding and 2 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """a6""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between 4 preceding and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """a7""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between unbounded preceding and 2 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """ahExp""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between unbounded preceding and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """a8""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between current row and 2 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """a9""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between current row and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """akExp""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between 0 following and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """a10""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between 4 following and unbounded following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """a11""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between 3 following and 4 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """a12""")
    
    stmt = """select firstName, paygrade, salary, ee1.deptnum,insurance.num,
variance(salary) over (partition by paygrade order by paygrade+salary, firstname asc
rows between 4 following and 5 following) as MaxSalary
from ee1, insurance
where insurance.num = ee1.num
and coverage > 10000 and Deductible > 1000
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n105exp""", """a13""")
    
    _testmgr.testcase_end(desc)

def test007(desc="""N106"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    # TestNl06
    #rows between <n> preceding and <m> preceding  (n = m) with sum() over (partition by)
 
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between 4 preceding and 2 preceding)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a1""")
    
    #unbounded proceding and bounded proceding.
    
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between unbounded preceding and 2 preceding)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a2""")
    
    #Bounded proceding and current row.
    
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between unbounded preceding and current row)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a3""")
    
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between unbounded preceding and unbounded following)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a4""")
    
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between unbounded preceding and 4 following)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a5""")
    
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between current row and current row)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a6""")
    
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between current row and unbounded following)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a7""")
    
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between current row and 5 following)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a8""")
    
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between 4 preceding and current row)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a9""")
    
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between 4 preceding and unbounded following)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a10""")
    
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between 4 preceding and 4 following)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a11""")
    
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between 4 following and unbounded following)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a12""")
    
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between 2 following and 4 following)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a13""")
    
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between 0 following and 0 following)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a14""")
    
    stmt = """select policynum, paygrade, deptnum, round(deductible)as Deduct,
round(sum(deductible) over (order by policynum, paygrade,
deductible rows between 200 following and 200 following)) as SumSalary
from ee1, insurance
where insurance.num = ee1.num
and Deductible > 10 and status IN ('A');"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n106exp""", """a15""")
    
    _testmgr.testcase_end(desc)

def test008(desc="""N107"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN107
    #rows between <n> preceding and current row with avg() and rank()
 
    stmt = """select policynum, deductible, substr(insname,1,12) as insname,
max(ee1.bonus) as bonus,
avg(deductible) over(order by insname, max(ee1.bonus), deductible
rows between 3 preceding and current row) as AvgDeduct,
rank() over(order by insname, max(ee1.bonus), deductible) as Rank
from ee1, insurance
where ee1.num = insurance.num
and bonus >2000
group by policynum, deductible, insname, bonus
order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n107exp""", """a1""")
    
    stmt = """select policynum, deductible, substr(insname,1,12) as insname,
max(ee1.bonus) as bonus,
avg(deductible) over(order by insname, max(ee1.bonus), deductible
rows between unbounded preceding and current row) as AvgDeduct,
rank() over(order by insname, max(ee1.bonus), deductible) as Rank
from ee1, insurance
where ee1.num = insurance.num
and bonus >2000
group by policynum, deductible, insname, bonus
order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n107exp""", """a2""")
    
    stmt = """select policynum, deductible, substr(insname,1,12) as insname,
max(ee1.bonus) as bonus,
avg(deductible) over(order by insname, max(ee1.bonus), deductible
rows between unbounded preceding and unbounded following) as AvgDeduct,
rank() over(order by insname, max(ee1.bonus), deductible) as Rank
from ee1, insurance
where ee1.num = insurance.num
and bonus >2000
group by policynum, deductible, insname, bonus
order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n107exp""", """a3""")
    
    stmt = """select policynum, deductible, substr(insname,1,12) as insname,
max(ee1.bonus) as bonus,
avg(deductible) over(order by insname, max(ee1.bonus), deductible
rows between unbounded preceding and 3 following) as AvgDeduct,
rank() over(order by insname, max(ee1.bonus), deductible) as Rank
from ee1, insurance
where ee1.num = insurance.num
and bonus >2000
group by policynum, deductible, insname, bonus
order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n107exp""", """a4""")
    
    stmt = """select policynum, deductible, substr(insname,1,12) as insname,
max(ee1.bonus) as bonus,
avg(deductible) over(order by insname, max(ee1.bonus), deductible
rows between current row and current row) as AvgDeduct,
rank() over(order by insname, max(ee1.bonus), deductible) as Rank
from ee1, insurance
where ee1.num = insurance.num
and bonus >2000
group by policynum, deductible, insname, bonus
order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n107exp""", """a5""")
    
    stmt = """select policynum, deductible, substr(insname,1,12) as insname,
max(ee1.bonus) as bonus,
avg(deductible) over(order by insname, max(ee1.bonus), deductible
rows between current row and unbounded following) as AvgDeduct,
rank() over(order by insname, max(ee1.bonus), deductible) as Rank
from ee1, insurance
where ee1.num = insurance.num
and bonus >2000
group by policynum, deductible, insname, bonus
order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n107exp""", """a6""")
    
    stmt = """select policynum, deductible, substr(insname,1,12) as insname,
max(ee1.bonus) as bonus,
avg(deductible) over(order by insname, max(ee1.bonus), deductible
rows between current row and 4 following) as AvgDeduct,
rank() over(order by insname, max(ee1.bonus), deductible) as Rank
from ee1, insurance
where ee1.num = insurance.num
and bonus >2000
group by policynum, deductible, insname, bonus
order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n107exp""", """a7""")
    
    stmt = """select policynum, deductible, substr(insname,1,12) as insname,
max(ee1.bonus) as bonus,
avg(deductible) over(order by insname, max(ee1.bonus), deductible
rows between 5 preceding and 4 preceding) as AvgDeduct,
rank() over(order by insname, max(ee1.bonus), deductible) as Rank
from ee1, insurance
where ee1.num = insurance.num
and bonus >2000
group by policynum, deductible, insname, bonus
order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n107exp""", """a8""")
    
    stmt = """select policynum, deductible, substr(insname,1,12) as insname,
max(ee1.bonus) as bonus,
avg(deductible) over(order by insname, max(ee1.bonus), deductible
rows between 0 preceding and 0 preceding) as AvgDeduct,
rank() over(order by insname, max(ee1.bonus), deductible) as Rank
from ee1, insurance
where ee1.num = insurance.num
and bonus >2000
group by policynum, deductible, insname, bonus
order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n107exp""", """a9""")
    
    stmt = """select policynum, deductible, substr(insname,1,12) as insname,
max(ee1.bonus) as bonus,
avg(deductible) over(order by insname, max(ee1.bonus), deductible
rows between 4 preceding and current row) as AvgDeduct,
rank() over(order by insname, max(ee1.bonus), deductible) as Rank
from ee1, insurance
where ee1.num = insurance.num
and bonus >2000
group by policynum, deductible, insname, bonus
order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n107exp""", """a10""")
    
    stmt = """select policynum, deductible, substr(insname,1,12) as insname,
max(ee1.bonus) as bonus,
avg(deductible) over(order by insname, max(ee1.bonus), deductible
rows between 4 preceding and unbounded following) as AvgDeduct,
rank() over(order by insname, max(ee1.bonus), deductible) as Rank
from ee1, insurance
where ee1.num = insurance.num
and bonus >2000
group by policynum, deductible, insname, bonus
order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n107exp""", """a11""")
    
    stmt = """select policynum, deductible, substr(insname,1,12) as insname,
max(ee1.bonus) as bonus,
avg(deductible) over(order by insname, max(ee1.bonus), deductible
rows between 4 preceding and 6 following) as AvgDeduct,
rank() over(order by insname, max(ee1.bonus), deductible) as Rank
from ee1, insurance
where ee1.num = insurance.num
and bonus >2000
group by policynum, deductible, insname, bonus
order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n107exp""", """a12""")
    
    stmt = """select policynum, deductible, substr(insname,1,12) as insname,
max(ee1.bonus) as bonus,
avg(deductible) over(order by insname, max(ee1.bonus), deductible
rows between 5 following and unbounded following) as AvgDeduct,
rank() over(order by insname, max(ee1.bonus), deductible) as Rank
from ee1, insurance
where ee1.num = insurance.num
and bonus >2000
group by policynum, deductible, insname, bonus
order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n107exp""", """a13""")
    
    stmt = """select policynum, deductible, substr(insname,1,12) as insname,
max(ee1.bonus) as bonus,
avg(deductible) over(order by insname, max(ee1.bonus), deductible
rows between 4 following and 6 following) as AvgDeduct,
rank() over(order by insname, max(ee1.bonus), deductible) as Rank
from ee1, insurance
where ee1.num = insurance.num
and bonus >2000
group by policynum, deductible, insname, bonus
order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n107exp""", """a14""")
    
    _testmgr.testcase_end(desc)

def test009(desc="""N108"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    # TestN108
    #rows between <n> preceding and current row with avg(), sum(), and rank()
    #having avg() in the subquery 
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 3 preceding and current row) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0)
group by ee1.num,policynum, deductible, insname,
bonus,ee1.deptnum, copayment,workgrpname
order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n108exp""", """a1""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and 5 preceding) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n108exp""", """a2""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n108exp""", """a2a""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n108exp""", """a3""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and 5 following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;                         ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n108exp""", """a4""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and current row) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n108exp""", """a5""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and unbounded following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n108exp""", """a6""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and 5 following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n108exp""", """a7""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 8 preceding and unbounded following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n108exp""", """a8""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 8 preceding and 5 following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n108exp""", """a9""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 8 following and unbounded following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n108exp""", """a10""")
    
    _testmgr.testcase_end(desc)

def test010(desc="""N109"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN109
 
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 3 preceding and current row) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and 4 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and 3 following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a1""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and 5 preceding) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and current row) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a2""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and unbounded  following) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a3""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and 2 following) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a4""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and 5 following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and current row) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a5""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and current row) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and unbounded following) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a6""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and unbounded following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and 2 following) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a7""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and 5 following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 following and unbounded following) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a8""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 8 preceding and unbounded following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and current row) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a9""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 8 preceding and 5 following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and unbounded following) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a10""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 8 following and unbounded following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 following) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a11""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 4 following and 8 following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 following and unbounded following) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 0 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a12""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 3 preceding and current row) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 following and unbounded following) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 4 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a13""")
    
    #third set
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 3 preceding and current row) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between unbounded preceding and 3 preceding)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a14""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and 5 preceding) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between unbounded preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a15""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between unbounded preceding and unbounded following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a16""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between unbounded preceding and 4 following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a17""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and 5 following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between current row and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a18""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and current row) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between current row and unbounded following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a19""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and unbounded following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between current row and 4 following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a20""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and 5 following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 4 preceding and 3 following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a21""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 8 preceding and unbounded following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 5 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a22""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 8 preceding and 5 following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 5 preceding and 4 following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a23""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 8 following and unbounded following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 5 preceding and unbounded following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a24""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 4 following and 8 following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 5 following  and unbounded following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a25""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 4 following and 8 following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between current row  and 4 following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109exp""", """a26""")
    
    _testmgr.testcase_end(desc)

def test011(desc="""109a"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #test109a
    #with vairance:
 
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
max (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 3 preceding and current row) as AvgDeduct,
min (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
dense_rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between unbounded preceding and 3 preceding)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109expa""", """a1""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
count(deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and 5 preceding) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between unbounded preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109expa""", """a2""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
variance (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between unbounded preceding and unbounded following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109expa""", """a3""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
variance(deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between unbounded preceding and 4 following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109expa""", """a4""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
variance(deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between unbounded preceding and 5 following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between current row and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109expa""", """a5""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and current row) as AvgDeduct,
variance (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between current row and unbounded following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109expa""", """a6""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
variance(deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and unbounded following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between current row and 4 following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109expa""", """a7""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
avg (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between current row and 5 following) as AvgDeduct,
variance(deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 4 preceding and 3 following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109expa""", """a8""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,insurance.num,
variance(deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 8 preceding and unbounded following) as AvgDeduct,
sum (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN (select avg(salary) over (order by lastname
rows between 5 preceding and current row)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname,insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109expa""", """a9""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
variance (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 8 preceding and 5 following) as AvgDeduct,
max(deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 5 preceding and 4 following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109expa""", """a10""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
count (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 8 following and unbounded following) as AvgDeduct,
stddev(deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 5 preceding and unbounded following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109expa""", """a11""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
stddev (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 4 following and 8 following) as AvgDeduct,
variance(deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between 5 following  and unbounded following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109expa""", """a12""")
    
    stmt = """select ee1.num, ee1.deptnum, deductible, insname, copayment, workgrpname,
variance (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 4 following and 8 following) as AvgDeduct,
variance (deductible) over (order by ee1.num, copayment+deductible, workgrpname
rows between 5 preceding and 2 preceding) as SumDeduct,
rank() over(order by ee1.num, copayment+deductible, workgrpname) as RankDeduct
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and coverage NOT IN     (select avg(salary) over (order by lastname
rows between current row  and 4 following)
from ee1 where salary > 0) order by ee1.num,ee1.deptnum,workgrpname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n109expa""", """a13""")
    
    _testmgr.testcase_end(desc)

def test012(desc="""N110"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN110
    #rows between current row and current row with max
 
    stmt = """select ee1.num,workgrpname, salary, paygrade,
max(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between current row and current row) as MaxSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n110exp""", """a1""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
max(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between unbounded preceding and 2 preceding) as MaxSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n110exp""", """a2""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
max(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between unbounded preceding and current row) as MaxSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n110exp""", """a3""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
max(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between unbounded preceding and unbounded following) as MaxSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n110exp""", """a4""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
max(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between unbounded preceding and 2 following) as MaxSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n110exp""", """a5""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
max(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between current row and unbounded following) as MaxSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n110exp""", """a6""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
max(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between current row and 4 following) as MaxSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n110exp""", """a7""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade, dateofbirth,
max(salary) over (order by ee1.num,avg(ee1.paygrade), dateofbirth
rows between 5 preceding and 5 preceding) as MaxSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n110exp""", """a8""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
max(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between 5 preceding and current row) as MaxSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n110exp""", """a9""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
max(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between 5 preceding and unbounded following) as MaxSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n110exp""", """a10""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
max(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between 5 preceding and 4 following) as MaxSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n110exp""", """a11""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
max(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between 4 following and 5 following) as MaxSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n110exp""", """a12""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
max(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between 5 following and unbounded following) as MaxSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n110exp""", """a13""")
    
    _testmgr.testcase_end(desc)

def test013(desc="""N111"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN111
    #tests with min:
 
    stmt = """select ee1.num,workgrpname, salary, paygrade,
min(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between current row and current row) as MinSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by salary,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
min(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between unbounded preceding and 2 preceding) as MinSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
min(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between unbounded preceding and current row) as MinSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
min(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between unbounded preceding and unbounded following) as MinSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
min(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between unbounded preceding and 2 following) as MinSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
min(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between current row and unbounded following) as MinSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
min(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between current row and 4 following) as MinSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,dateofbirth,
min(salary) over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between 5 preceding and 5 preceding) as MinSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num,workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
min(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between 5 preceding and current row) as MinSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
min(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between 5 preceding and unbounded following) as MinSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
min(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between 5 preceding and 4 following) as MinSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
min(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between 4 following and 5 following) as MinSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
min(salary) over (order by ee1.num,avg(ee1.paygrade)
rows between 5 following and unbounded following) as MinSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    _testmgr.testcase_end(desc)

def test014(desc="""N112"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN112
    #tests with Avg:
 
    stmt = """select ee1.num,workgrpname, salary, paygrade,
Avg(salary)over (order by ee1.num,avg(ee1.paygrade)
rows between current row and current row) as AvgSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n112exp""", """a1""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
Avg(salary)over (order by ee1.num,avg(ee1.paygrade)
rows between unbounded preceding and 2 preceding) as AvgSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,dateofbirth,
Avg(salary)over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between unbounded preceding and current row) as AvgSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num,workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n112exp""", """a3""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
Avg(salary)over (order by ee1.num,avg(ee1.paygrade)
rows between unbounded preceding and unbounded following) as AvgSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n112exp""", """a4""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
Avg(salary)over (order by ee1.num,avg(ee1.paygrade)
rows between unbounded preceding and 2 following) as AvgSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
Avg(salary)over (order by ee1.num,avg(ee1.paygrade)
rows between current row and unbounded following) as AvgSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
Avg(salary)over (order by ee1.num,avg(ee1.paygrade)
rows between current row and 4 following) as AvgSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,dateofbirth,
Avg(salary)over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between 5 preceding and 5 preceding) as AvgSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num,workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n112exp""", """a8""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,dateofbirth,
Avg(salary)over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between 5 preceding and current row) as AvgSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num,workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n112exp""", """a9""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
Avg(salary)over (order by ee1.num,avg(ee1.paygrade)
rows between 5 preceding and unbounded following) as AvgSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n112exp""", """a10""")
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
Avg(salary)over (order by ee1.num,avg(ee1.paygrade)
rows between 5 preceding and 4 following) as AvgSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
Avg(salary)over (order by ee1.num,avg(ee1.paygrade)
rows between 4 following and 5 following) as AvgSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
Avg(salary)over (order by ee1.num,avg(ee1.paygrade)
rows between 5 following and unbounded following) as AvgSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    _testmgr.testcase_end(desc)

def test015(desc="""N113"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN113
    #tests with variance:
 
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
variance(salary) over (order by ee1.num, avg(ee1.paygrade),dateofbirth
rows between current row and current row) as varSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num,workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
variance(salary) over (order by ee1.num, avg(ee1.paygrade) ,dateofbirth
rows between unbounded preceding and 2 preceding) as varSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num,workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
variance(salary) over (order by ee1.num, avg(ee1.paygrade) ,dateofbirth
rows between unbounded preceding and current row) as varSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num,workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,
variance(salary) over (order by ee1.num, avg(ee1.paygrade)
rows between unbounded preceding and unbounded following) as varSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
variance(salary) over (order by ee1.num, avg(ee1.paygrade),dateofbirth
rows between unbounded preceding and 2 following) as varSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num,workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,
variance(salary) over (order by ee1.num, avg(ee1.paygrade)
rows between current row and unbounded following) as varSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,
variance(salary) over (order by ee1.num, avg(ee1.paygrade)
rows between current row and 4 following) as varSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,
variance(salary) over (order by ee1.num, avg(ee1.paygrade)
rows between 5 preceding and 5 preceding) as varSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
variance(salary) over (order by ee1.num, avg(ee1.paygrade),dateofbirth
rows between 5 preceding and current row) as varSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num,workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,
variance(salary) over (order by ee1.num, avg(ee1.paygrade)
rows between 5 preceding and unbounded following) as varSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,
variance(salary) over (order by ee1.num, avg(ee1.paygrade)
rows between 5 preceding and 4 following) as varSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,
variance(salary) over (order by ee1.num, avg(ee1.paygrade)
rows between 4 following and 5 following) as varSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num,workgrpname, salary, paygrade,
variance(salary) over (order by ee1.num, avg(ee1.paygrade)
rows between 5 following and unbounded following) as varSalary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num,workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    _testmgr.testcase_end(desc)

def test016(desc="""N114"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN114
    #tests with Count:
 
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
count(salary) over (order by ee1.num, avg(ee1.paygrade),dateofbirth
rows between current row and current row) as Count_Sal
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,
count(salary) over (order by ee1.num, avg(ee1.paygrade)
rows between unbounded preceding and 2 preceding) as Count_Sal
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num, workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,
count(salary) over (order by ee1.num, avg(ee1.paygrade)
rows between unbounded preceding and current row) as Count_Sal
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num, workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,
count(salary) over (order by ee1.num, avg(ee1.paygrade)
rows between unbounded preceding and unbounded following) as Count_Sal
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade
order by ee1.num, workgrpname desc, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
count(salary) over (order by ee1.num, avg(ee1.paygrade),dateofbirth
rows between unbounded preceding and 2 following) as Count_Sal
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
count(salary) over (order by ee1.num, avg(ee1.paygrade),dateofbirth
rows between current row and unbounded following) as Count_Sal
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
count(salary) over (order by ee1.num, avg(ee1.paygrade),dateofbirth
rows between current row and 4 following) as Count_Sal
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
count(salary) over (order by ee1.num, avg(ee1.paygrade),dateofbirth
rows between 5 preceding and 5 preceding) as Count_Sal
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
count(salary) over (order by ee1.num, avg(ee1.paygrade),dateofbirth
rows between 5 preceding and current row) as Count_Sal
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
count(salary) over (order by ee1.num, avg(ee1.paygrade),dateofbirth
rows between 5 preceding and unbounded following) as Count_Sal
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
count(salary) over (order by ee1.num, avg(ee1.paygrade),dateofbirth
rows between 5 preceding and 4 following) as Count_Sal
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
count(salary) over (order by ee1.num, avg(ee1.paygrade),dateofbirth
rows between 4 following and 5 following) as Count_Sal
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
count(salary) over (order by ee1.num, avg(ee1.paygrade),dateofbirth
rows between 5 following and unbounded following) as Count_Sal
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num,workgrpname, salary, paygrade,dateofbirth
order by workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    _testmgr.testcase_end(desc)

def test017(desc="""N115"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN115
    #tests with Stddev:
 
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
stddev(salary) over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between current row and current row) as stddev_salary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num, workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n115exp""", """a66""")
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
stddev(salary) over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between unbounded preceding and 2 preceding) as stddev_salary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num, workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n115exp""", """a67""")
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
stddev(salary) over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between unbounded preceding and current row) as stddev_salary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num, workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n115exp""", """a68""")
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
stddev(salary) over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between unbounded preceding and unbounded following) as stddev_salary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num, workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n115exp""", """a69""")
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
stddev(salary) over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between unbounded preceding and 2 following) as stddev_salary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num, workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n115exp""", """a70""")
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
stddev(salary) over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between current row and unbounded following) as stddev_salary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num, workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n115exp""", """a71""")
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
stddev(salary) over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between current row and 4 following) as stddev_salary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num, workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n115exp""", """a72""")
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
stddev(salary) over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between 5 preceding and 5 preceding) as stddev_salary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num, workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n115exp""", """a73""")
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
stddev(salary) over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between 5 preceding and current row) as stddev_salary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num, workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n115exp""", """a74""")
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
stddev(salary) over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between 5 preceding and unbounded following) as stddev_salary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num, workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n115exp""", """a75""")
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
stddev(salary) over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between 5 preceding and 4 following) as stddev_salary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num, workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n115exp""", """a76""")
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
stddev(salary) over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between 4 following and 5 following) as stddev_salary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num, workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n115exp""", """a77""")
    
    stmt = """select ee1.num, workgrpname, salary, paygrade,dateofbirth,
stddev(salary) over (order by ee1.num,avg(ee1.paygrade),dateofbirth
rows between 5 following and unbounded following) as stddev_salary
from ee1, workgroup
where ee1.num = workgroup.num
and salary > 25000 and ee1.deptnum NOT in (1,7)
group by ee1.num, workgrpname, salary, paygrade,dateofbirth
order by ee1.num, workgrpname desc, paygrade,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n115exp""", """a78""")
    
    _testmgr.testcase_end(desc)

def test018(desc="""N116"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    # TestN116
    #rows between current row and current row with dense_rank, avg having min in the subquery
 
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 10 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 12 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 6 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 10 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 2 following and 14 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 9 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    #second set:
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 5 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 0 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 0 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 10 following and 20 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS between current row and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 3 preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 3 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 3 following and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 25 following and 54 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 0 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    _testmgr.testcase_end(desc)

def test019(desc="""N117"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN117
    #tests for count:
 
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 10 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 12 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 6 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 10 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 3 following and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and 10 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 9 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 5 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 0 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 0 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and 8 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS between current row and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 3 preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 3 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 2 following and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 0 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    _testmgr.testcase_end(desc)

def test020(desc="""N118"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN118
    #tests for max:
 
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 10 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")

    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 12 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev(deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 6 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance(deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 10 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 14 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 3 following and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 9 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 5 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 0 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 100 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 0 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and 10 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS between current row and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 3 preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 3 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and 10 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 3 following and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
max (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 0 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    _testmgr.testcase_end(desc)

def test021(desc="""N119"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN119
    #tests for min:
 
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 10 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 12 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 6 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 10 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 0 following and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 15 following and 24 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 9 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 5 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 0 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 100 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
count (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS between current row and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 3 preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 3 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
avg (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 2 following and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 0 following and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
min (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select min(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 0 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    _testmgr.testcase_end(desc)

def test022(desc="""N120"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN120
    #tests for stddev:
 
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 10 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 12 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 6 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 10 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and 10 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 8 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 9 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 5 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 0 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 0 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and 10 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS between current row and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 3 preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 3 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 2 following and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 1 following and 2 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
stddev (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 2 following and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select max(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 0 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    _testmgr.testcase_end(desc)

def test023(desc="""N121"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN121
    #tests for variance:
 
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 10 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 12 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 6 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 10 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and 14 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 8 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 9 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 5 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 0 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 6 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS 0 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between unbounded preceding and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and 10 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between current row and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
ROWS between current row and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and current row) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 3 preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 preceding and 3 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and 4 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 5 following and 4 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4342")
    
    stmt = """select lastname, workgrpname, ee1.deptnum, deductible, insname,
variance (deductible) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 4 following and 5 following) as AvgDeduct,
dense_rank () over (
order by lastname || substr(insname,1,2) asc, workgrpname)
as DenseRank
from ee1, workgroup, insurance
where ee1.num = workgroup.num and ee1.num = insurance.num
and  deductible > 222
and salary IN  (select avg(salary) over (
order by lastname || substr(insname,1,2) asc, workgrpname
rows between 0 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0)
order by lastname, insname, workgrpname, ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    _testmgr.testcase_end(desc)

def test024(desc="""N122"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN122
    #STDDEV() w/ rows between unbounded preceding and current row
 
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between unbounded preceding and current row)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a1""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between unbounded preceding and 4 preceding)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a2""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between unbounded preceding and 4 preceding)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a3""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between unbounded preceding and unbounded following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a4""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between unbounded preceding and unbounded following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a5""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between unbounded preceding and 4 following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a6""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between current row and current row)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a7""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between current row and unbounded following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a8""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between current row and 3 following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a9""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between 4 preceding and 2 preceding)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a10""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between 4 preceding and current row)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a11""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between 5 preceding and unbounded following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a12""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between 4 preceding and 5 following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a13""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between 5 preceding and 4 following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a14""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between 4 preceding and 4 following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a15""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between 0 preceding and 0 following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a16""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (order by sum(bonus),deptnum,salary
rows between 3 following and 3 following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122exp""", """a17""")
    
    _testmgr.testcase_end(desc)

def test025(desc="""122a"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #test122a
    # with Partition by clause:
 
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between unbounded preceding and current row)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a1""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between unbounded preceding and 4 preceding)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a2""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between unbounded preceding and unbounded following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a3""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between unbounded preceding and unbounded following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a4""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between unbounded preceding and 4 following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a5""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between current row and current row)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a6""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between current row and unbounded following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a7""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between current row and 3 following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a8""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 14 preceding and 5 preceding)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a9""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 4 preceding and current row)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a10""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 5 preceding and unbounded following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a11""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 4 preceding and 5 following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a12""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 5 preceding and 4 following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a13""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 4 preceding and 4 following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a14""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 0 preceding and 0 following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a15""")
    
    stmt = """select deptnum, salary, sum(bonus),
stddev(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 3 following and 3 following)
as STDDEV
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n122aexp""", """a16""")
    
    _testmgr.testcase_end(desc)

def test026(desc="""N123"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN123
    #Variance()
 
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between unbounded preceding and current row)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a17""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between unbounded preceding and 4 preceding)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a1""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between unbounded preceding and 4 preceding)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a2""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between unbounded preceding and unbounded following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a3""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between unbounded preceding and unbounded following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a4""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between unbounded preceding and 4 following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a5""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between current row and current row)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a6""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between current row and unbounded following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a7""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between current row and 3 following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a8""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between 10 preceding and 5 preceding)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a9""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between 4 preceding and current row)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a10""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between 5 preceding and unbounded following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a11""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between 4 preceding and 5 following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a12""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between 5 preceding and 4 following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a13""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between 4 preceding and 4 following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a14""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between 0 preceding and 0 following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a15""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (order by sum(bonus),deptnum,salary
rows between 3 following and 3 following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n123exp""", """a16""")
    
    _testmgr.testcase_end(desc)

def test027(desc="""N124"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN124
    #Variance with Partition by clause:
 
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between unbounded preceding and current row)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a1""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between unbounded preceding and 4 preceding)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a2""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between unbounded preceding and unbounded following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a3""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between unbounded preceding and unbounded following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a4""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between unbounded preceding and 4 following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a5""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between current row and current row)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a6""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between current row and unbounded following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a7""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between current row and 3 following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a8""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 10 preceding and 5 preceding)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a9""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 4 preceding and current row)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a10""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 5 preceding and unbounded following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a11""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 4 preceding and 5 following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a12""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 5 preceding and 4 following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a13""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 4 preceding and 4 following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a14""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 0 preceding and 0 following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a15""")
    
    stmt = """select deptnum, salary, sum(bonus),
variance(salary) over (partition by deptnum order by sum(bonus),deptnum,salary
rows between 3 following and 3 following)
as variance
from ee1
where salary > 2500
group by deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n124exp""", """a16""")
    
    _testmgr.testcase_end(desc)

def test028(desc="""N125"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN125
    #STDDEV with avg, sum having a subquery in the where clause
 
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a1""")
    
    #1st Set:
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and 5 preceding) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a2""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a3""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and 5 following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a4""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between current row and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a5""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between current row and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a6""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between current row and 4 following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a7""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between 4 preceding and 4 preceding) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a8""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between 5 preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a9""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between 4 preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a10""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between 4 preceding and 4 following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a11""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between 4 following and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a12""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between 4 following and 6 following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a13""")
    
    #2ND SET
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 preceding) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a14""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between unbounded preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a15""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between unbounded preceding and unbounded following) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a16""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 following) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a17""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between current row and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a18""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a19""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between current row and 4 following) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a20""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 5 preceding and 4 preceding) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a21""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 5 preceding and unbounded following) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a22""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 5 preceding and 4 following) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a23""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 5 following and unbounded following) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a24""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 2 following and 4 following) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a25""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between unbounded preceding and 4 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a26""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a27""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a28""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between unbounded preceding and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a29""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between current row and current row) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a30""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between current row and unbounded following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a31""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between current row and 5 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a32""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between unbounded preceding and 2 preceding) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a33""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and current row) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a34""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and unbounded following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a35""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a36""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 following and unbounded following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a37""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 4 following and 8 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a38""")
    
    #SET4:
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between unbounded preceding and 3 preceding) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a39""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between unbounded preceding and current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a40""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between unbounded preceding and unbounded following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a41""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between unbounded preceding and 4 following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a42""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between current row and current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a43""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between current row and unbounded following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a44""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between current row and 4 following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a45""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between 5 preceding and 4 preceding ) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a46""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between 5 preceding and current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a47""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between 5 preceding and unbounded following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a48""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between 5 preceding and 4 following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a49""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between 5 following and unbounded following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a50""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between 4 following and 4 following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a51""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and 5 preceding) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a52""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a53""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and 5 following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a54""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between current row and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a55""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between current row and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a56""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between current row and 4 following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a57""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between 4 preceding and 4 preceding) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a58""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between 5 preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a59""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between 4 preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a60""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between 4 preceding and 4 following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a61""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between 4 following and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a62""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between 4 following and 8 following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a63""")
    
    #2ND SET
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 preceding) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a64""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between unbounded preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a65""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between unbounded preceding and unbounded following) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a66""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 following) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a67""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between current row and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a68""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a69""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between current row and 4 following) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a70""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 5 preceding and 4 preceding) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a71""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 5 preceding and unbounded following) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a72""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 5 preceding and 4 following) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a73""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 5 following and unbounded following) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a74""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 5 following and 6 following) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a75""")
    
    #SET3:
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between unbounded preceding and 4 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a76""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a77""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a78""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between unbounded preceding and 4 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a79""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between current row and current row) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a80""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between current row and unbounded following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a81""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between current row and 5 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a82""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between unbounded preceding and 2 preceding) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a83""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and current row) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a84""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and unbounded following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a85""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 preceding and 2 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a86""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 following and unbounded following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a87""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 4 following and 5 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a88""")
    
    #SET4:
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between unbounded preceding and 3 preceding) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a89""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between unbounded preceding and current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a90""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between unbounded preceding and unbounded following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a91""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between unbounded preceding and 4 following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a92""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between current row and current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a93""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between current row and unbounded following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a94""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between current row and 4 following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a95""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between 5 preceding and 4 preceding ) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a96""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between 5 preceding and current row) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a97""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between 5 preceding and unbounded following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a98""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between 5 preceding and 4 following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a99""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between 5 following and unbounded following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a100""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as variance,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
min (salary) over (order by ee1.num, bonus rows between 3 following and 3 following) as MinSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between 2 following and 4 following) from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n125exp""", """a101""")
    
    _testmgr.testcase_end(desc)

def test029(desc="""N126"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN126
 
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,dateofbirth,
stddev(salary) over (order by ee1.num,dateofbirth, bonus rows between unbounded preceding and current row) as STDDEV,
count (salary) over (order by ee1.num,dateofbirth, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num,dateofbirth, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num,dateofbirth, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num,dateofbirth, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num,dateofbirth, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a0""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and 5 preceding) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a1""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and current row) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a2""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a3""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between unbounded preceding and 4 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a4""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between current row and current row) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a5""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between current row and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a6""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between current row and 4 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a7""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 2 preceding) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a8""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and current row) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a9""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a10""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 2 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a11""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 following and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a12""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 following and 6 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a13""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a14""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a15""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a16""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a17""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a18""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a19""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and 4 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a20""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 2 preceding and 4 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a21""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 2 preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a22""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 2 preceding and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a23""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 2 preceding and 4 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a24""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 2 following and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a25""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 2 following and 4 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a26""")
    
    #SET3:
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 2 following and 4 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 preceding) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a27""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 preceding) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a28""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between unbounded preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a29""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between unbounded preceding and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a30""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a31""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a32""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a33""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a34""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and 5 following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a35""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 5 preceding and 4 preceding) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a36""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 5 preceding and 4 preceding) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a37""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 5 preceding and current row) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a38""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 5 preceding and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a39""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 5 preceding and 4 following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a40""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between 5 following and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a41""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and 3 following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between 5 following and 6 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a42""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
avg (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a43""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 preceding) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, '4349')
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
stddev (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a44""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between unbounded preceding and unbounded following) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a45""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
avg (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 following) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a46""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between current row and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a47""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a48""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
avg (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
count (salary) over (order by ee1.num, bonus  rows between current row and 5 following) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a49""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 5 preceding and 4 preceding) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a50""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 5 preceding and current row) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a51""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 5 preceding and unbounded following) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a52""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 5 preceding and 4 following) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a53""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 5 following and unbounded following) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a54""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 5 following and 10 following) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 6 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num ROWS current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a55""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  4 preceding and unbounded following) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 3 following) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between current row and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between 5 following and 6 following) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between 3 preceding and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between 3 following and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between 4 preceding and current row) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a56""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  unbounded preceding and 4 preceding) as STDDEV,
count (salary) over (order by ee1.num, bonus  rows between unbounded preceding and current row) as CountSal,
min (salary) over (order by ee1.num, bonus  rows between unbounded preceding and unbounded following) as MinSal,
max (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 following) as MaxSal,
avg (salary) over (order by ee1.num, bonus  rows between current row and current row) as AvgSal,
sum (salary) over (order by ee1.num, bonus rows between current row and 4 following) as SumSal,
workgrpname from ee1, workgroup
where ee1.num =workgroup.num and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between current row and unbounded following) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a57""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
stddev(salary) over (order by ee1.num, bonus rows between  unbounded preceding and 4 preceding) as STDDEV,
stddev (salary) over (order by ee1.num, bonus  rows between unbounded preceding and current row) as CountSal,
stddev (salary) over (order by ee1.num, bonus  rows between unbounded preceding and unbounded following) as MinSal,
stddev (salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 following) as MaxSal,
stddev (salary) over (order by ee1.num, bonus  rows between current row and current row) as AvgSal,
stddev (salary) over (order by ee1.num, bonus rows between current row and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select stddev(bonus) over(order by ee1.num rows between current row and unbounded following) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a58""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
variance(salary) over (order by ee1.num, bonus rows between  unbounded preceding and 4 preceding) as STDDEV,
variance(salary) over (order by ee1.num, bonus  rows between unbounded preceding and current row) as CountSal,
variance(salary) over (order by ee1.num, bonus  rows between unbounded preceding and unbounded following) as MinSal,
variance(salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 following) as MaxSal,
variance(salary) over (order by ee1.num, bonus  rows between current row and current row) as AvgSal,
variance (salary) over (order by ee1.num, bonus rows between current row and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select variance(bonus) over(order by ee1.num rows between current row and unbounded following) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a59""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
min(salary) over (order by ee1.num, bonus rows between  unbounded preceding and 4 preceding) as STDDEV,
min(salary) over (order by ee1.num, bonus  rows between unbounded preceding and current row) as CountSal,
min(salary) over (order by ee1.num, bonus  rows between unbounded preceding and unbounded following) as MinSal,
min(salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 following) as MaxSal,
min(salary) over (order by ee1.num, bonus  rows between current row and current row) as AvgSal,
min (salary) over (order by ee1.num, bonus rows between current row and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select min(bonus) over(order by ee1.num rows between current row and unbounded following) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a60""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
max(salary) over (order by ee1.num, bonus rows between  unbounded preceding and 4 preceding) as STDDEV,
max(salary) over (order by ee1.num, bonus  rows between unbounded preceding and current row) as CountSal,
max(salary) over (order by ee1.num, bonus  rows between unbounded preceding and unbounded following) as MinSal,
max(salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 following) as MaxSal,
max(salary) over (order by ee1.num, bonus  rows between current row and current row) as AvgSal,
max (salary) over (order by ee1.num, bonus rows between current row and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select max(bonus) over(order by ee1.num rows between current row and unbounded following) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a61""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
avg(salary) over (order by ee1.num, bonus rows between  unbounded preceding and 4 preceding) as STDDEV,
avg(salary) over (order by ee1.num, bonus  rows between unbounded preceding and current row) as CountSal,
avg(salary) over (order by ee1.num, bonus  rows between unbounded preceding and unbounded following) as MinSal,
avg(salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 following) as MaxSal,
avg(salary) over (order by ee1.num, bonus  rows between current row and current row) as AvgSal,
avg (salary) over (order by ee1.num, bonus rows between current row and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select avg(bonus) over(order by ee1.num rows between current row and unbounded following) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a62""")
    
    stmt = """select ee1.num, ee1.deptnum, salary, bonus,
count(salary) over (order by ee1.num, bonus rows between  unbounded preceding and 4 preceding) as STDDEV,
count(salary) over (order by ee1.num, bonus  rows between unbounded preceding and current row) as CountSal,
count(salary) over (order by ee1.num, bonus  rows between unbounded preceding and unbounded following) as MinSal,
count(salary) over (order by ee1.num, bonus  rows between unbounded preceding and 4 following) as MaxSal,
count(salary) over (order by ee1.num, bonus  rows between current row and current row) as AvgSal,
count (salary) over (order by ee1.num, bonus rows between current row and 4 following) as SumSal,
workgrpname
from ee1, workgroup
where ee1.num =workgroup.num
and salary > 33000
and bonus IN (select count(bonus) over(order by ee1.num rows between current row and unbounded following) from ee1) order by ee1.num,ee1.deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n126exp""", """a63""")
    
    _testmgr.testcase_end(desc)

def test030(desc="""N127"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN127
    #ROW_NUMBER having a nested query in where clause
    #(with different window partition and window order clause.)
 
    stmt = """select ee1.num, row_number() over (order by commision, paygrade, ee1.num) as
ROWNUM, commision, paygrade
from ee1, insurance
where ee1.num = insurance.num
and ee1.num IN(select row_number() over(order by num)
from insurance
where policynum >1111
group by copayment, num);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n127exp""", """a1""")
    
    _testmgr.testcase_end(desc)

def test031(desc="""N128"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN128
    #ROW_NUMBER() with stddev() and avg()
    #having avg() in the subquery with the same window partition and window order clause.
 
    stmt = """select row_number() over (order by bonus desc) as rownum, bonus from ee1
where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a0""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num,bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and current row) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num,bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a1""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and 5 preceding) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a2""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and unbounded following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a3""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and 12 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a4""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between current row and current row) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a5""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between current row and unbounded following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a6""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between current row and 4 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a7""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 5 preceding and 4 preceding) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a8""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 5 preceding and current row) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a9""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and unbounded following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a10""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and 4 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a11""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(variance(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and current row) as int) as variance,
cast(count(*) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, variance, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a12""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(variance(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and 5 preceding) as int) as variance,
cast(count(*) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, variance, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a13""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(variance(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and unbounded following) as int) as variance,
cast(count(*) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, variance, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a14""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(variance(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and 12 following) as int) as variance,
cast(count(*) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, variance, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a15""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(variance(salary) over (order by ee1.num, bonus asc, salary
rows between current row and current row) as int) as variance,
cast(count(*) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, variance, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a16""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(variance(salary) over (order by ee1.num, bonus asc, salary
rows between current row and unbounded following) as int) as variance,
cast(count(*) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, variance, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a17""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(variance(salary) over (order by ee1.num, bonus asc, salary
rows between current row and 4 following) as int) as variance,
cast(count(*) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, variance, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a18""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(variance(salary) over (order by ee1.num, bonus asc, salary
rows between 5 preceding and 4 preceding) as int) as variance,
cast(count(*) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, variance, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a19""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(variance(salary) over (order by ee1.num, bonus asc, salary
rows between 5 preceding and current row) as int) as variance,
cast(count(*) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, variance, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a20""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(variance(salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and unbounded following) as int) as variance,
cast(count(*) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, variance, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a21""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(variance(salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and 4 following) as int) as variance,
cast(count(*) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, variance, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a22""")
    
    stmt = """select ee1.num,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 following and unbounded following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128exp""", """a23""")
    
    _testmgr.testcase_end(desc)

def test032(desc="""128B"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #Test128B
    #ROW_NUMBER() having the 'order by' clause outside the
    #window partition clause.
 
    #select row_number() over (partition by paygrade)as ROWNUM, num as ee1_num,
    #paygrade, salary FROM ee1 order by paygrade, num;
    
    stmt = """select row_number() over
(order by paygrade asc,dateofbirth, num asc)as ROWNUM,
num as ee1_num, paygrade, salary FROM ee1 order by paygrade, num,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128bep""", """a1""")
    
    stmt = """select row_number() over
(order by paygrade asc,dateofbirth, num asc)as ROWNUMER,
num as ee1_num, paygrade, salary FROM ee1  order by paygrade, num,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128bep""", """a2""")
    
    _testmgr.testcase_end(desc)

def test033(desc="""128A"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #test128A
 
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 4 following and 5 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a1""")
    
    #2nd set
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and current row) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 5 following and 8 following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a2""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and 5 preceding) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 following and unbounded following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a3""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and unbounded following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and 4 following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a4""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and 12 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and unbounded following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a5""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between current row and current row) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a6""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between current row and unbounded following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and 2 preceding) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a7""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between current row and 4 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and 5 preceding) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a8""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 5 preceding and 4 preceding) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between current row and 4 following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a9""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 5 preceding and current row) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between current row and unbounded following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a10""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and unbounded following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between current row and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a11""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and 4 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and 4 following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a12""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and 4 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and unbounded following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a13""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and 4 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a14""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and 4 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 5 preceding and 4 preceding) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a15""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 following and unbounded following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 0 following and unbounded following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a16""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 2 following and 2 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 following and unbounded following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a17""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 2 following and 2 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 following and unbounded following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a18""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and current row) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 5 following and 8 following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num,lastname rows between unbounded preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a19""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and 5 preceding) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 following and unbounded following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between unbounded preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a20""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and unbounded following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and 4 following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between 6 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a21""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and 12 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and unbounded following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between unbounded preceding and 3 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a22""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between current row and current row) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a23""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between current row and unbounded following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 preceding and 4 preceding) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between current row and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4342")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between current row and 4 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 8 preceding and 5 preceding) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between current row and 3 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a25""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 5 preceding and 4 preceding) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between current row and 4 following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS between 4 preceding and 4 preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a26""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 5 preceding and current row) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between current row and unbounded following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between 5 preceding and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a27""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and unbounded following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between current row and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between 4 preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a28""")
    
    stmt = """select ee1.dateofbirth,
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and 4 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and 4 following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between 5 following and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary,ee1.num,ee1.dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a29""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and 4 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and unbounded following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between 4 following and 6 following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a30""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and 4 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between unbounded preceding and current row) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between unbounded preceding and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a31""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 preceding and 4 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 5 preceding and 4 preceding) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between current row and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a32""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 10 following and unbounded following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 0 following and unbounded following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between 5 following and unbounded following)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a33""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 2 following and 2 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 following and unbounded following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname ROWS unbounded preceding)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a34""")
    
    stmt = """select
cast(row_number() over (order by ee1.num, bonus asc, salary) as smallint) as ROWNUM,
cast(stddev(salary) over (order by ee1.num, bonus asc, salary
rows between 2 following and 2 following) as int) as STDDEV_Sal,
cast(avg (salary) over (order by ee1.num, bonus asc, salary
rows between 3 following and unbounded following) as integer) as Avg_Salary,
bonus, salary
from ee1, insurance
where ee1.num = insurance.num
and policynum > 22222
and salary IN (select avg(salary) over (order by ee1.num, lastname rows between current row and current row)
from ee1, workgroup
where workgroup.num = ee1.num and salary > 0 and salary < 500000)
order by rownum ascending, stddev_sal, avg_salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128axp""", """a35""")
    
    _testmgr.testcase_end(desc)

def test034(desc="""128C"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #Test128C
    #ROW_NUMBER() having the 'order by' clause outside the
    #window partition clause.
 
    #select row_number() over (partition by paygrade)as ROWNUM, num as ee1_num,
    #paygrade, salary FROM ee1 order by paygrade, num;
    
    stmt = """select row_number() over
(order by paygrade asc,dateofbirth, num asc)as ROWNUM,
num as ee1_num, paygrade, salary FROM ee1 order by paygrade, num,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128bep""", """a1""")
    
    stmt = """select row_number() over
(order by paygrade asc,dateofbirth, num asc)as ROWNUMER,
num as ee1_num, paygrade, salary FROM ee1  order by paygrade, num,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n128bep""", """a2""")
    
    _testmgr.testcase_end(desc)

def test035(desc="""N129"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """select num,lastname, gender, deptnum,
rank() over (order by ee1.num,  2,deptnum) as rank from ee1 where deptnum < 5
order by ee1.num,  num,deptnum, gender, lastname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a1""")
    
    stmt = """select gender, paygrade, deptnum,
rank() over (order by ee1.num,  gender ascending,paygrade,deptnum desc) as rank
from ee1 where deptnum < 5
order by ee1.num,  rank,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a2""")
    
    stmt = """select ee1.num,deptnum, paygrade, cast(salary as int) as salary,
rank() over (order by ee1.num,  avg(cast(salary as int))) as rank from ee1
where paygrade > 7
group by ee1.num, deptnum, paygrade, salary
order by ee1.num,num,deptnum desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a3""")
    
    # 5: ranking order by ee1.num,  expression
    
    stmt = """select num, deptnum, cast(commision as int), cast(bonus as numeric(5,0)),
rank() over (order by ee1.num,  commision+bonus,deptnum) as rank from ee1
where (num,deptnum) < (10,5)
order by ee1.num,  num,deptnum desc, bonus,commision,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a4""")
    
    # 7: ranking order by expression
    
    stmt = """select deptnum, cast(salary - bonus as int),
rank() over (order by ee1.num,  salary - bonus) as rank from ee1
where salary - bonus < 50000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a5""")
    
    # 8: ranking order by expression
    
    stmt = """select deptnum, paygrade, bonus*1.1,
rank() over (order by ee1.num,  deptnum, paygrade, bonus*1.1) as rank
from ee1 where bonus is not NULL and bonus < 2500;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a6""")
    
    # 9: ranking order by expression
    
    stmt = """select deptnum, cast((salary/bonus) as decimal(7,0)) as bonus,
rank() over (order by ee1.num,  cast((salary/bonus) as decimal(7,0))) as rank
from ee1 where salary/bonus > 20.0;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a7""")
    
    # 10: ranking order by expression
    
    stmt = """select deptnum, paygrade, bonus,
rank() over (order by ee1.num,  paygrade**2, bonus) as rank from ee1
order by ee1.num,  rank, paygrade, bonus, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a8""")
    
    # 11: ranking order by expression
    
    stmt = """select paygrade, gender,ee1.num,
rank() over (order by ee1.num,  count(distinct paygrade) desc) as rank
from ee1 group by ee1.num, paygrade, gender;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a9""")
    
    # 12: ranking order by expression
    
    stmt = """select deptnum, paygrade, commision,
rank() over (order by ee1.num,  cast(commision as decimal(5,0)) ascending) as rank
from ee1 where paygrade between 1 and 3
order by ee1.num,  rank, commision, deptnum, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a10""")
    
    # 13: ranking order by expression
    
    stmt = """select deptnum, cast(commision as decimal(5,0)), cast(bonus as int),ee1.num,
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows 1 preceding) from insurance
where num < 10 group by ee1.num,num,deptnum,dateofbirth,bonus)
order by ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select deptnum, cast(commision as decimal(5,0)), cast(bonus as int), num,
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows 6 preceding) from insurance
where num < 10 group by num)
order by ee1.num,  num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select deptnum, cast(commision as decimal(5,0)), cast(bonus as int),
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows between unbounded preceding and 1 preceding) from insurance
where num < 10 group by num,deptnum,dateofbirth,bonus)
order by ee1.num,  num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select deptnum, cast(commision as decimal(5,0)), cast(bonus as int),
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows between unbounded preceding and current row) from insurance
where num < 10 group by num,deptnum,dateofbirth,bonus)
order by ee1.num,  num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select deptnum, cast(commision as decimal(5,0)), cast(bonus as int),
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows between unbounded preceding and unbounded following) from insurance
where num < 10 group by num,deptnum,dateofbirth,bonus)
order by ee1.num,  num, rank asc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select deptnum, cast(commision as decimal(5,0)), cast(bonus as int),
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows between unbounded preceding and current row) from insurance
where num < 10 group by num,deptnum,dateofbirth,bonus)
order by ee1.num,  num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select deptnum, cast(commision as decimal(5,0)), cast(bonus as int),
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows between current row and current row) from insurance
where num < 10 group by num,deptnum,dateofbirth,bonus)
order by ee1.num,  rank asc, deptnum desc, bonus,commision,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select deptnum, cast(commision as decimal(5,0)), cast(bonus as int),
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows between current row and unbounded following) from insurance
where num < 10 group by num,deptnum,dateofbirth,bonus)
order by ee1.num,  rank asc, deptnum desc, bonus,commision,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select deptnum, cast(commision as decimal(5,0)), cast(bonus as int),
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows between current row and 4 following) from insurance
where num < 10 group by num,deptnum,dateofbirth,bonus)
order by ee1.num,  num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select deptnum,dateofbirth, cast(commision as decimal(5,0)), cast(bonus as int),
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows between 5 preceding and 4 preceding) from insurance
where num < 10 group by num,deptnum,dateofbirth,bonus)
order by ee1.num,  num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select num,deptnum, cast(commision as decimal(5,0)), cast(bonus as int),
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows between 10 preceding and current row) from insurance
where num < 10 group by num,deptnum,dateofbirth,bonus)
order by ee1.num,  num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select deptnum, cast(commision as decimal(5,0)), cast(bonus as int),
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows between 4 preceding and unbounded following) from insurance
where num < 10 group by num) order by ee1.num,  num, rank asc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select deptnum,dateofbirth, cast(commision as decimal(5,0)), cast(bonus as int),
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows between 6 preceding and 4 following) from insurance
where num < 10 group by num,deptnum,dateofbirth,bonus)
order by ee1.num,  num, rank desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select deptnum, cast(commision as decimal(5,0)), cast(bonus as int),
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows between 4 following and unbounded following) from insurance
where num < 10 group by num,deptnum,dateofbirth,bonus)
order by ee1.num,  rank asc, deptnum desc, bonus,commision,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select deptnum, cast(commision as decimal(5,0)), cast(bonus as int),
rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int) desc)
as rank from ee1 where deptnum in (select min(num)
over (order by ee1.num,  min(coverage) rows between 6 following and 12 following) from insurance
where num < 10 group by num,deptnum,dateofbirth,bonus)
order by ee1.num,  rank asc, deptnum desc, bonus,commision,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    # 14: ranking order by ee1.num,  expression
    
    stmt = """select deptnum, commision, bonus,
rank() over (order by ee1.num,  case when commision > bonus
then commision else bonus end) as rank
from ee1 where deptnum in (select avg(deptnum)
over (order by ee1.num,  min(num) rows current row) from workgroup
where deptnum < 5 group by deptnum)
order by ee1.num,  rank, num asc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    # 15: ranking order by ee1.num,  expression
    
    stmt = """select deptnum, commision, bonus,
rank() over (order by ee1.num,  case when commision > bonus
then salary*-0.8 else salary*1.2 end) as rank
from ee1 where deptnum in (select row_number() over
(order by ee1.num,  salary-bonus asc) from ee1) and deptnum < 5 order by ee1.num,  rank, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a28""")
    
    # 16: ranking order by ee1.num,  expression
    
    stmt = """select deptnum, salary,
rank() over (order by ee1.num,  (select count(deptnum) from ee1)) as rank
from ee1 where deptnum = (select count(deptnum)
over (order by ee1.num,  salary rows current row)
from ee1 where salary > 90000 ) order by ee1.num,  rank, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "8401")
    
    # 17: ranking order by ee1.num,  expression
    
    stmt = """select deptnum, paygrade,
rank() over (order by ee1.num,  (select count(paygrade)**2 from ee1),
(select min(paygrade) from ee1) asc) as rank
from ee1 where deptnum in (0,4,6,8,5,12) order by ee1.num,  rank, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a30""")
    
    # 18: ranking order by ee1.num,  mix expression
    stmt = """select deptnum, bonus, max(bonus),
rank() over (order by ee1.num,  paygrade, max(salary)*1.2, min(commision) desc)
as rank from ee1 where commision is NULL
group by ee1.num,paygrade, salary, bonus, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a31""")
    
    stmt = """select deptnum, bonus, max(bonus),
rank() over (order by ee1.num,  paygrade, max(bonus)+min(commision)) as rank
from ee1 where commision is NULL
group by ee1.num,paygrade, bonus, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a32""")
    
    # 20: ranking order by ee1.num,  mix expression
    
    stmt = """select [first 3] deptnum, paygrade, bonus,ee1.num,
rank() over (order by ee1.num,  min(commision)+bonus) as rank
from ee1 where bonus > 0.0
group by ee1.num,deptnum, paygrade, bonus
order by ee1.num,  rank, paygrade, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a33""")
    
    # 21: ranking order by ee1.num,  mix expression
    stmt = """select [any 5] deptnum, paygrade, bonus,
rank() over (order by ee1.num,  min(paygrade)+bonus*1.1) as rank
from ee1 where deptnum < 5 and paygrade > 7
group by ee1.num,deptnum, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a34""")
    
    # 22: ranking order by ee1.num,  mix expression
    
    stmt = """select all deptnum, paygrade, bonus,
rank() over (order by ee1.num,  max(salary)/2,paygrade,bonus) as rank
from ee1 where paygrade < 5
group by ee1.num, salary, paygrade, bonus, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a35""")
    
    # 23: ranking with multiple expressions
    
    stmt = """select [any 5] distinct deptnum, bonus,
rank() over (order by ee1.num,  avg(deptnum), max(bonus) asc, num) as rank
from ee1 where deptnum < 5
group by ee1.num,deptnum,bonus,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a36""")
    
    stmt = """select deptnum, paygrade,
rank() over (order by ee1.num,  num asc,lastname desc,firstname ascending,gender desc,
deptnum,paygrade,salary,bonus,commision,dateofbirth) as rank from ee1
where salary <  bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a37""")
    
    stmt = """select firstname, lastname, deptnum,
rank() over (order by ee1.num,  max(num) asc,min(deptnum),avg(paygrade) desc,
cast(sum(salary) as int),count(commision)) as rank
from ee1 where deptnum between 3 and 5 group by ee1.num,firstname, lastname, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a38""")
    
    stmt = """select ee1.num,firstname, lastname, deptnum, rank() over (order by ee1.num,
max(num)+min(deptnum)+avg(paygrade)*sum(salary) asc, firstname) as rank
from ee1 where deptnum between 3 and 5 group by ee1.num,firstname, lastname, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a39""")
    
    stmt = """select firstname, deptnum,
cast(num*deptnum*paygrade+salary-commision as integer) as r1,
rank() over (order by ee1.num,
cast(num*deptnum*paygrade+salary-commision as integer) desc) as rank
from ee1 where deptnum between 3 and 5
order by ee1.num,  rank asc, r1 desc, firstname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a40""")
    
    stmt = """select deptnum, lastname, max(firstname) as mfirst, min(gender),ee1.num,
cast(rank() over (order by ee1.num,  max(firstname), min(gender)) as smallint)
as rank from ee1
where deptnum < 5
group by ee1.num,deptnum, lastname
order by ee1.num,  deptnum, lastname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a41""")
    
    stmt = """select deptnum, lastname,
rank() over (order by ee1.num,  lastname,stddev(bonus)) as rank from ee1
where deptnum < 5
group by ee1.num,deptnum, lastname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a42""")
    
    stmt = """select deptnum, lastname,
rank() over (order by ee1.num,  lastname,variance(bonus)) as rank from ee1
where deptnum < 5
group by ee1.num,deptnum, lastname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a43""")
    
    stmt = """select deptnum, lastname,
rank() over (order by ee1.num,  lastname, stddev(salary) asc,
variance(bonus) desc, sum(commision), max(lastname)) as rank from ee1
where deptnum < 5
group by ee1.num,deptnum, lastname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a44""")
    
    #     correct syntax is rank() over ...
    stmt = """select deptnum, paygrade,ee1.num,
rank() over (order by ee1.num,  avg(paygrade))
as rank from ee1 group by ee1.num,deptnum,paygrade
order by ee1.num,  deptnum,paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a45""")
    
    # n2: expect error 4021
    
    stmt = """select deptnum, paygrade, bonus,
rank() over (order by ee1.num,  avg(paygrade), max(bonus) asc) as rank from ee1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4021")
    
    # n3: expect error 4021
    stmt = """select deptnum, paygrade, bonus,ee1,num,
rank() over (order by ee1.num,  count(deptnum)) as rank from ee1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4001")
    
    # n4: expect error 4344
    
    stmt = """select deptnum, paygrade, bonus,
rank() over (partition by deptnum) as rank from ee1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4344")
    
    # n5: error 4009: An aggregate is not allowed inside an aggregate function.
    
    stmt = """select paygrade, bonus,ee1.num,
rank() over (order by ee1.num,  avg(sum(paygrade)), max(bonus) asc) as rank from ee1
group by ee1.num, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4009")
    
    stmt = """select num,paygrade, salary, avg(salary) over () from ee1
where paygrade in (1,3,5,7,9) order by ee1.num,  1,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n129exp""", """a50""")
    
    _testmgr.testcase_end(desc)

def test036(desc="""N130"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN130
    #rank() over (partition by ...order by...)
    #
    # Test case name:      a03
    # Test case author:    yku
    # Description:         Validated OLAP enhancement in R2.3 SP2 TCF
    #
    #   <window functions> :: =
    #      <window function type> OVER <in-line window specification>
    #   <window function type> :: =
    #      <rank function type> <left paren> <right paren>
    #      ROW_NUMBER <left paren> <right paren>
    #      <aggregate function>
    #
    # 1: rank() over (partition by <col> order by <column-list>)
    # 2: rank() over (partition by <col> order by <expressions>)
    # 3: rank() over (partition by <col>
    #       order by <mix column-list & expressions)
    #
    # Notes:
    # ranking order by column number
    #    does not support rank() over (order by <colnum>)
    #    treat it as literal - no meaning in sorting process
 
    # 2: ranking order by column number
    stmt = """select gender, deptnum, paygrade, rank() over
(partition by deptnum order by num,gender, deptnum, paygrade) as rank from ee1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n130exp""", """a0""")
    
    # 4: ranking order by expression
    stmt = """select deptnum, cast(commision+bonus as integer),
rank() over (partition by deptnum order by num, commision+bonus) as rank from ee1
where commision+bonus < 5000.00;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n130exp""", """a1""")
    
    # 5: ranking order by expression
    stmt = """select deptnum, paygrade*2,
rank() over (partition by deptnum order by num, paygrade*2) as rank from ee1
where deptnum < 9 and deptnum <> 6;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n130exp""", """a2""")
    
    # 6: ranking order by expression
    stmt = """select deptnum, paygrade, cast(bonus/salary as numeric(7,2)) as factor,
rank() over (partition by deptnum
order by num, cast(bonus/salary as decimal(7,2)) asc, paygrade, deptnum)
as rank from ee1
where cast(bonus/salary as decimal(7,2)) < 0.10
and cast(bonus/salary as decimal(7,2)) > 0.00;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n130exp""", """a3""")
    
    # 7: ranking order by expression
    stmt = """select deptnum, gender, cast(bonus*1.1 as numeric(7,2)),
rank() over (partition by deptnum
order by num, gender, cast(bonus*1.1 as numeric(7,2))) as rank
from ee1 where bonus is not NULL and gender = 'F';"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n130exp""", """a4""")
    
    # 8: ranking order by mix expression
    stmt = """select deptnum, bonus,
rank() over (partition by deptnum order by num, paygrade, max(commision)) as rank
from ee1 where commision is NULL
group by num,deptnum, bonus, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n130exp""", """a5""")
    
    stmt = """select deptnum, cast(bonus as pic s9(7)v9(2)) as bonus, paygrade,
cast(salary as decimal(7,2)) as salary,
cast(max(salary) as pic s9(7)v9(2)) as max_salary,
rank() over (partition by deptnum,paygrade order by num, paygrade,
max(salary)) as rank
from ee1 where commision is NULL
group by num,deptnum, paygrade, bonus, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n130exp""", """a6""")
    
    # 10: ranking order by mix expression
    stmt = """select deptnum,
rank() over (partition by deptnum order by num, min(paygrade)+bonus) as rank
from ee1 where bonus > 0.0
group by num,deptnum, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n130exp""", """a7""")
    
    # 11: ranking order by mix expression
    stmt = """select deptnum, paygrade, bonus,
rank() over (partition by deptnum,paygrade
order by num, deptnum, min(paygrade)+bonus*1.1, num) as rank
from ee1 where deptnum < 10 and paygrade > 5
group by deptnum, paygrade, bonus, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n130exp""", """a8""")
    
    # 12: ranking order by mix expression
    stmt = """select deptnum, paygrade, bonus,
rank() over (partition by deptnum order by num, max(bonus)/2) as rank
from ee1 where paygrade < 10
group by num,deptnum, paygrade, bonus
order by deptnum, rank, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n130exp""", """a9""")
    
    # 13: ranking with multiple expressions
    stmt = """select deptnum, paygrade, bonus,num,
rank() over (partition by deptnum, paygrade, bonus
order by num, avg(paygrade), max(bonus) asc) as rank
from ee1 where deptnum < 5
group by num,deptnum,paygrade,bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n130exp""", """a10""")
    
    _testmgr.testcase_end(desc)

def test037(desc="""N132"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """select gender, deptnum, paygrade,ee1.num,
dense_rank() over (order by ee1.num,  gender asc,paygrade desc) as rank
from ee1 where deptnum < 5 order by ee1.num,  rank, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a1""")
    
    stmt = """select deptnum, ee1.num, paygrade, cast(salary as int) as salary,
dense_rank() over (order by ee1.num,  avg(cast(salary as int))) as rank from ee1
where paygrade > 7
group by ee1.num,deptnum, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a2""")
    
    # 5: ranking order by expression
    
    stmt = """select deptnum, ee1.num, paygrade,
cast(commision as int), cast(bonus as numeric(5,0)),
dense_rank() over (order by ee1.num,  commision+bonus) as rank
from ee1 where (deptnum,paygrade) < (10,5)
order by ee1.num,  rank, bonus, commision, paygrade, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a3""")
    
    # 7: ranking order by expression
    
    stmt = """select deptnum, ee1.num, cast(salary - bonus as int),
dense_rank() over (order by ee1.num,  salary - bonus) as rank from ee1
where salary - bonus < 50000 order by ee1.num,  rank, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a4""")
    
    # 8: ranking order by expression
    
    stmt = """select deptnum, ee1.num, paygrade, bonus,
dense_rank() over (order by ee1.num,  deptnum, paygrade, bonus*1.1) as rank
from ee1 where bonus is not NULL and bonus < 2500;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a5""")
    
    # 9: ranking order by expression
    
    stmt = """select deptnum, ee1.num, cast((salary/bonus) as decimal(7,0)) as bonus,
dense_rank() over (order by ee1.num,  cast((salary/bonus) as decimal(7,0))) as rank
from ee1 where salary/bonus > 20.0;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a6""")
    
    # 10: ranking order by expression
    
    stmt = """select deptnum, ee1.num, paygrade, bonus,
dense_rank() over (order by ee1.num,  paygrade**2) as rank from ee1
order by ee1.num,  rank, paygrade, bonus, paygrade
;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a7""")
    
    # 11: ranking order by expression
    
    stmt = """select paygrade, gender, ee1.num,
dense_rank() over (order by ee1.num,  count(distinct paygrade),gender) as rank from ee1
group by ee1.num,paygrade, gender
order by ee1.num,  paygrade, gender;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a8""")
    
    # 12: ranking order by expression
    
    stmt = """select deptnum, ee1.num, paygrade, commision,
dense_rank() over (order by ee1.num,  cast(commision as decimal(5,0))) as rank
from ee1 where paygrade between 1 and 3
order by ee1.num,  rank, commision, deptnum, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a9""")
    
    # 13: ranking order by expression
    
    stmt = """select deptnum, ee1.num, cast(commision as decimal(5,0)), cast(bonus as int),
dense_rank() over (order by ee1.num,  cast(commision as decimal(5,0))+cast(bonus as int))
as rank from ee1 where deptnum in (2,4,8,0,6);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a10""")
    
    # 14: ranking order by expression
    
    stmt = """select deptnum, ee1.num, commision, bonus,
dense_rank() over (order by ee1.num,  case when commision > bonus
then commision else bonus end) as rank
from ee1 where deptnum in (2,4,8,0,6);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a11""")
    
    # 15: ranking order by expression
    
    stmt = """select deptnum, ee1.num, commision, bonus,
dense_rank() over (order by ee1.num,  case when commision > bonus
then salary*-0.8 else salary*1.2 end) as rank
from ee1 where deptnum in (2,4,8,0,6);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a12""")
    
    # 16: ranking order by expression
    
    stmt = """select deptnum, ee1.num, paygrade, salary,
dense_rank() over
(order by ee1.num,  (select count(deptnum) from ee1)) as rank
from ee1 where deptnum in (2,4,8,0,6)
order by ee1.num,  rank, deptnum, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a13""")
    
    # 17: ranking order by expression
    
    stmt = """select deptnum, ee1.num, paygrade,
dense_rank() over (order by ee1.num,
(select count(paygrade)**2 from ee1),deptnum,paygrade) as rank
from ee1 where deptnum in (2,4,8,0,6);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a14""")
    
    # 18: ranking order by mix expression
    
    stmt = """select deptnum, ee1.num, bonus, max(bonus),
dense_rank() over (order by ee1.num,  paygrade, max(salary)*1.2, min(commision) desc)
as rank from ee1 where commision is NULL
group by ee1.num, deptnum, bonus, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a15""")
    
    stmt = """select deptnum, ee1.num, bonus, max(bonus),
dense_rank() over (order by ee1.num,  paygrade, max(bonus)+min(commision)) as rank
from ee1 where commision is NULL
group by ee1.num, deptnum, bonus, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a16""")
    
    # 20: ranking order by mix expression
    
    stmt = """select deptnum, ee1.num, paygrade, bonus+min(commision) as bonus,
dense_rank() over (order by ee1.num,  min(commision)+bonus) as rank
from ee1 where bonus > 0.0
group by ee1.num,bonus, paygrade, deptnum
order by ee1.num,  rank, bonus, paygrade, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a17""")
    
    # 21: ranking order by mix expression
    
    stmt = """select deptnum, ee1.num, paygrade, bonus,
dense_rank() over (order by ee1.num,  min(paygrade)+bonus*1.1) as rank
from ee1 where deptnum < 5 and paygrade > 7
group by ee1.num, deptnum, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a18""")
    
    # 22: ranking order by mix expression
    
    stmt = """select deptnum, ee1.num, paygrade, bonus,
dense_rank() over (order by ee1.num,  deptnum, max(salary)/2) as rank
from ee1 where paygrade < 5
group by ee1.num, deptnum, paygrade, bonus order by ee1.num,  rank, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a19""")
    
    # 23: ranking with multiple expressions
    
    stmt = """select deptnum, ee1.num, paygrade, bonus,
dense_rank() over (order by ee1.num,  avg(paygrade), max(bonus) asc) as rank
from ee1 where deptnum < 5
group by ee1.num, deptnum,paygrade,bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a20""")
    
    # 24:
    
    stmt = """select deptnum, ee1.num, paygrade,
dense_rank() over (order by ee1.num,  num asc,lastname desc,
firstname ascending,gender desc,deptnum,paygrade,
salary,bonus,commision,dateofbirth) as rank from ee1
where salary <  bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a21""")
    
    # 26:
    
    stmt = """select firstname, lastname, deptnum,ee1.num,
dense_rank() over (order by ee1.num,  max(num) asc,min(deptnum),avg(paygrade) desc,
cast(sum(salary) as int),count(commision)) as rank
from ee1 where deptnum between 3 and 5 group by ee1.num,firstname, lastname, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a22""")
    
    stmt = """select ee1.num,firstname, lastname, deptnum, dense_rank() over (order by ee1.num,
max(num)+min(deptnum)+avg(paygrade)*sum(salary) asc) as rank
from ee1 where deptnum between 3 and 5 group by ee1.num,firstname, lastname, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a23""")
    
    stmt = """select firstname, deptnum,
cast(num*deptnum*paygrade+salary-commision as integer) as r1,
dense_rank() over (order by ee1.num,
cast(num*deptnum*paygrade+salary-commision as integer) desc) as rank
from ee1 where deptnum between 3 and 5
order by ee1.num,  rank asc, firstname desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a24""")
    
    stmt = """select deptnum, ee1.num, lastname, max(firstname) as mfirst, min(gender),
cast(dense_rank()
over (order by ee1.num,  deptnum, max(firstname), min(gender)) as smallint)
as rank from ee1
where deptnum < 5
group by ee1.num, deptnum, lastname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a25""")
    
    stmt = """select deptnum, ee1.num, lastname,
dense_rank() over (order by ee1.num,  lastname,stddev(bonus)) as rank from ee1
where deptnum < 5
group by ee1.num, deptnum, lastname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a26""")
    
    stmt = """select deptnum, ee1.num, lastname,
dense_rank() over (order by ee1.num,  lastname,variance(bonus)) as rank from ee1
where deptnum < 5
group by ee1.num, deptnum, lastname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a27""")
    
    stmt = """select deptnum, ee1.num, lastname,
dense_rank() over (order by ee1.num,  lastname, stddev(salary) asc,
variance(bonus) desc, sum(commision), max(lastname)) as rank from ee1
where deptnum < 5
group by ee1.num, deptnum, lastname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a28""")
    
    #     correct syntax is dense_rank() over ...
    stmt = """select deptnum, ee1.num, paygrade,dateofbirth,num,
dense_rank() over (order by ee1.num,  avg(paygrade)) as rank from ee1
group by paygrade,deptnum,dateofbirth,num
order by ee1.num,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n132exp""", """a29""")
    
    stmt = """select deptnum, num, paygrade, bonus,
dense_rank() over (order by ee1.num,  avg(paygrade), max(bonus) asc) as rank from ee1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4021")
    
    stmt = """select deptnum, paygrade, bonus,
dense_rank() over (order by ee1.num, count(deptnum)) as rank from ee1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4021")
    
    _testmgr.testcase_end(desc)

def test038(desc="""N133"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN133
    #dense_rank() over (partition by ...order by...)
    #
    # Test case name:      a05
    # Test case author:    yku
    # Description:         Validated OLAP enhancement in R2.3 SP2 TCF
    #
    #   <window functions> :: =
    #      <window function type> OVER <in-line window specification>
    #   <window function type> :: =
    #      <rank function type> <left paren> <right paren>
    #      ROW_NUMBER <left paren> <right paren>
    #      <aggregate function>
    #
    # 1: dense_rank() over (partition by <col> order by <column-list>)
    # 2: dense_rank() over (partition by <col> order by <expressions>)
    # 3: dense_rank() over (partition by <col>
    #       order by <mix column-list & expressions)
    #
    # Notes:
 
    # treat order by <colnum> as literal. Comment out because
    # test case ins un-deterministic
    # select num, gender, deptnum, paygrade,
    # dense_rank() over (partition by bonus order by 1,2) as rank from ee1;
    
    # 2: ranking order by column number
    
    stmt = """select num, gender, deptnum, paygrade,
dense_rank()
over (partition by deptnum order by gender, deptnum, num) as rank from ee1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n133exp""", """a2""")
    
    # 4: ranking order by expression
    
    stmt = """select deptnum, cast(commision+bonus as integer),
dense_rank() over (partition by deptnum order by num, commision+bonus) as rank from ee1
where commision+bonus < 5000.00;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n133exp""", """a4""")
    
    # 5: ranking order by expression
    
    stmt = """select deptnum, paygrade*2,
dense_rank() over (partition by deptnum order by num, paygrade*2) as rank from ee1
where deptnum < 9 and deptnum <> 6;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n133exp""", """a5""")
    
    # 6: ranking order by expression
    
    stmt = """select deptnum, paygrade, cast(bonus/salary as decimal(7,2)) as factor,
dense_rank() over (partition by deptnum
order by num, cast(bonus/salary as decimal(7,2)) asc, paygrade, deptnum)
as rank from ee1
where cast(bonus/salary as decimal(7,2)) < 0.10
and cast(bonus/salary as decimal(7,2)) > 0.00;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n133exp""", """a6""")
    
    # 7: ranking order by expression
    stmt = """select deptnum, gender, cast(bonus*1.1 as numeric(7,2)),
dense_rank() over (partition by deptnum
order by num, gender, cast(bonus*1.1 as numeric(7,2))) as rank
from ee1 where bonus is not NULL and gender = 'F';"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n133exp""", """a7""")
    
    # 8: ranking order by mix expression
    stmt = """select deptnum, bonus,
dense_rank() over (partition by deptnum order by num, paygrade, max(commision)) as rank
from ee1 where commision is NULL
group by ee1.num, deptnum, bonus, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n133exp""", """a8""")
    
    stmt = """select deptnum, paygrade, salary,num,
cast(max(salary) as pic s9(7)v9(2)) as max_salary,
dense_rank() over (partition by deptnum order by num, paygrade, max(salary)) as rank
from ee1 where commision is NULL
group by ee1.num, deptnum, paygrade, salary
order by num, rank, deptnum, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n133exp""", """a9""")
    
    # 10: ranking order by mix expression
    stmt = """select deptnum, min(paygrade)+bonus as m,
dense_rank() over (partition by deptnum order by num, min(paygrade)+bonus) as rank
from ee1 where bonus > 0.0
group by ee1.num, deptnum, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n133exp""", """a10""")
    
    # 11: ranking order by mix expression
    stmt = """select num,deptnum, paygrade, min(paygrade)+bonus*1.1 as m,
dense_rank()
over (partition by deptnum
order by num, min(paygrade)+bonus*1.1 asc, deptnum, paygrade) as rank
from ee1 where deptnum < 10 and paygrade > 5
group by ee1.num, deptnum, paygrade, bonus
order by num, rank, m, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n133exp""", """a11""")
    
    # 12: ranking order by mix expression
    stmt = """select deptnum, paygrade, cast(bonus/2 as numeric(7,2)) as bonus,
dense_rank()
over (partition by deptnum order by num, max(bonus)/2, paygrade*2) as rank
from ee1 where paygrade < 10 group by ee1.num, deptnum, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n133exp""", """a12""")
    
    _testmgr.testcase_end(desc)

    #testN132
    #dense_rank() over (partition by ...order by...)
    #
    # Test case name:      a04
    # Test case author:    yku
    # Description:         Validated OLAP enhancement in R2.3 SP2 TCF
    #
    #   <window functions> :: =
    #      <window function type> OVER <in-line window specification>
    #   <window function type> :: =
    #      <rank function type> <left paren> <right paren>
    #      ROW_NUMBER <left paren> <right paren>
    #      <aggregate function>
    #
    # 1: dense_rank() over (order by <column-list>)
    # 2: dense_rank() over (order by <expressions>)
    # 3: dense_rank() over (order by <mix column-list & expressions)
    #
    # Notes:
    # ranking order by column number
    #    does not support rank() over (order by <colnum>)
    #    treat it as literal - no meaning in sorting process

def test039(desc="""N134"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    #TestN134
    #<aggregate> over (order by...)
 
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
avg(salary) over (order by num, paygrade ROWS unbounded preceding)
as rank from ee1 where deptnum < 5
order by rank, paygrade, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a1""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
avg(salary) over (order by num, paygrade rows between unbounded preceding and unbounded following)
as rank from ee1 where deptnum < 5
order by rank, paygrade, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a2""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
avg(salary) over (order by num, paygrade rows between unbounded preceding and 5 following)
as rank from ee1 where deptnum < 5
order by rank, paygrade, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a3""")
    
    stmt = """select deptnum, paygrade, salary,
count(deptnum) over (order by num, paygrade, deptnum ROWS 10 preceding)
as rank from ee1 where deptnum < 5 order by deptnum,paygrade,salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a4""")
    
    stmt = """select deptnum, paygrade, salary,
count(deptnum) over (order by num, paygrade, deptnum rows between 10 preceding and 5 following)
as rank from ee1 where deptnum < 5 order by deptnum,paygrade,salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a5""")
    
    stmt = """select deptnum, paygrade, salary,
count(deptnum) over (order by num, paygrade, deptnum rows between 10 preceding and unbounded following)
as rank from ee1 where deptnum < 5 order by deptnum,paygrade,salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a6""")
    
    stmt = """select num,deptnum, paygrade, salary,
max(salary) over (order by num, paygrade, max(salary) asc ROWS current row)
as rank from ee1 where deptnum < 5
group by num,deptnum,paygrade,salary
order by num, deptnum,rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a7""")
    
    stmt = """select num,deptnum, paygrade, salary,
max(salary) over (order by paygrade, max(salary) asc rows
between current row and unbounded following)
as rank from ee1 where deptnum < 5
group by num,deptnum,paygrade,salary
order by num,deptnum,rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a8""")
    
    stmt = """select num,deptnum, paygrade, salary,
max(salary) over (order by num, paygrade, max(salary) asc rows between current row and 5 following)
as rank from ee1 where deptnum < 5
group by num,deptnum,paygrade,salary
order by num,deptnum,rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a9""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
stddev(deptnum) over (order by num, paygrade
rows between 125 following and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a10""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
min(deptnum) over (order by num, paygrade desc
rows between unbounded preceding and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a11""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
min(deptnum) over (order by num, paygrade desc
rows between unbounded preceding and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a12""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
min(deptnum) over (order by num, paygrade desc
rows between unbounded preceding and 5 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a13""")
    
    stmt = """select deptnum, paygrade, salary,
cast(stddev(deptnum) over (order by num, paygrade, salary, deptnum ascending
rows between unbounded preceding and current row) as integer)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a14""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between unbounded preceding and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a15""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
avg(deptnum) over (order by num, paygrade
rows between unbounded preceding and 5 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a16""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
count(deptnum) over (order by num, paygrade
rows between 5 preceding and unbounded following)
as rank from ee1 where deptnum < 5 order by deptnum,paygrade,salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a17""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(deptnum) over (order by num, paygrade desc, deptnum
rows between 5 preceding and 2 preceding)
as rank from ee1 where deptnum < 5 order by deptnum,paygrade,salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a18""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(deptnum) over (order by num, paygrade desc, deptnum
rows between 5 preceding and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a19""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(deptnum) over (order by num, paygrade desc, deptnum
rows between 5 preceding and 2 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a20""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
min(deptnum) over (order by num,deptnum,paygrade
rows between 5 preceding and 5 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a21""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
stddev(deptnum) over (order by num, paygrade
rows between 12 preceding and 5 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a22""")
    
    stmt = """select deptnum, paygrade, salary,
sum(deptnum) over (order by num, paygrade asc, salary, deptnum
rows between 5 preceding and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a23""")
    
    stmt = """select deptnum, paygrade, salary,
sum(deptnum) over (order by num, paygrade asc, salary, deptnum
rows between 5 preceding and 3 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a24""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 5 preceding and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a25""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
avg(deptnum) over (order by num, paygrade
rows between 5 preceding and 3 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a26""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
count(deptnum) over (order by num, paygrade
rows between current row and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a27""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
count(deptnum) over (order by num, paygrade
rows between current row and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a28""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
count(deptnum) over (order by num, paygrade
rows between current row and 5 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a29""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
min(deptnum) over (order by num, paygrade
rows between current row and 5 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a30""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
min(deptnum) over (order by num, paygrade
rows between current row and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a31""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
min(deptnum) over (order by num, paygrade
rows between current row and 4 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a32""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by deptnum, paygrade, salary
rows between current row and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a33""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by deptnum, paygrade, salary
rows between current row and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a34""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by deptnum, paygrade, salary
rows between current row and 5 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a35""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(deptnum) over (order by num, paygrade
rows between current row and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a36""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
sum(deptnum) over (order by num, paygrade
rows between current row and 5 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a37""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
stddev(deptnum) over (order by num, paygrade
rows between 5 following and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a38""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between  10 following and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a39""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
avg(deptnum) over (order by num, paygrade
rows between unbounded preceding and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a40""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
count(deptnum) over (order by num, paygrade
rows between 10 following and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a41""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
min(deptnum) over (order by num, paygrade
rows between unbounded preceding and 5 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a42""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(deptnum) over (order by num, paygrade
rows between 5 preceding and 2 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a43""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
sum(deptnum) over (order by num, paygrade
rows between 5 following and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a44""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
stddev(deptnum) over (order by num, paygrade
rows between unbounded preceding and 12 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a45""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 5 following and unbounded following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a46""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 5 following and 10 following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a47""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between unbounded preceding and unbounded following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a48""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between unbounded preceding and 3 following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a49""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between current row and unbounded following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a50""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between current row and 3 following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a51""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 4 preceding and unbounded following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a52""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 4 preceding and 684684689 following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a53""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 4 preceding and 4689 following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a54""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 684 preceding and 689 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a55""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 46496806 following and unbounded following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a56""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 4 following and 96496806 following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a57""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 6 following and 84684689 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a58""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 46496806 following and unbounded following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a59""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 46496806 preceding and 684684689 preceding)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a60""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 846496806 preceding and 4 preceding)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a62""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 46496806 preceding and unbounded following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a63""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 46496806 preceding and 2 following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a64""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between 0 preceding and 4064 following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a65""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between current row and 90684064 following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a66""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(deptnum) over (order by num, paygrade
rows between current row and 90684064 following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a67""")
    
    #check
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
avg(paygrade) over (order by num, paygrade
rows between 5 following and 9 following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a68""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
sum(deptnum) over (order by num, paygrade
rows between 2 following and 2 following)
as rank from ee1 where deptnum < 5 order by deptnum, paygrade,salary ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134exp""", """a69""")
    
    _testmgr.testcase_end(desc)

def test040(desc="""134A"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """select paygrade+3, cast(salary as decimal(9,2)) as salary,
avg(salary) over (order by num, paygrade+3 ROWS unbounded preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a1""")
    
    stmt = """select cast(deptnum*paygrade as integer) as dgrade,
cast(salary as decimal(9,2)) as salary,
count(salary) over (order by num, deptnum*paygrade, salary ROWS 3 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a2""")
    
    stmt = """select cast(salary/paygrade as numeric(7,2)) as salgrade, salary, min(salary)
over (order by num, cast(salary/paygrade as decimal(7,2)), salary asc
ROWS current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a3""")
    
    stmt = """select paygrade-2, cast(salary as decimal(9,2)) as salary,
max(salary) over (order by num, paygrade-2
rows between unbounded preceding and 5 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a4""")
    
    stmt = """select paygrade-2, cast(salary as decimal(9,2)) as salary,
max(salary) over (order by num, paygrade-2
rows between unbounded preceding and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a4a""")
    
    stmt = """select paygrade-2, cast(salary as decimal(9,2)) as salary,
max(salary) over (order by num, paygrade-2
rows between unbounded preceding and 5 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a4b""")
    
    stmt = """select paygrade, cast(paygrade**2 as integer), salary,
sum(salary) over (order by num, paygrade**2
rows between unbounded preceding and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a5""")
    
    stmt = """select num,deptnum, paygrade, salary,
stddev(salary) over (order by num, min(paygrade), salary, deptnum
rows between 5 preceding and 2 preceding)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a6""")
    
    stmt = """select num,deptnum, paygrade, salary,
stddev(salary) over (order by num, min(paygrade), salary, deptnum
rows between 5 preceding and 2 following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a6a""")
    
    stmt = """select num,deptnum, paygrade, salary,
stddev(salary) over (order by num, min(paygrade), salary, deptnum
rows between 5 preceding and unbounded following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a6b""")
    
    stmt = """select num,deptnum, paygrade, salary,
variance(salary) over (order by num, deptnum, max(paygrade)
rows between 5 preceding and 5 preceding)
as varian from ee1 where deptnum < 5
group by deptnum, paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a7""")
    
    stmt = """select num,deptnum, paygrade, salary,
variance(salary) over (order by num, num, deptnum, max(paygrade)
rows between 5 preceding and 5 following)
as varian from ee1 where deptnum < 5
group by num,deptnum, paygrade, salary order by num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a7a""")
    
    stmt = """select num,deptnum, paygrade, salary,
variance(salary) over (order by num, deptnum, max(paygrade)
rows between 5 preceding and unbounded following)
as varian from ee1 where deptnum < 5
group by deptnum, paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a7b""")
    
    stmt = """select num,deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
avg(salary) over (order by num, avg(paygrade)
rows between 3 preceding and current row)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary,num
order by num, deptnum, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a8""")
    
    stmt = """select num,deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
count(salary) over (order by num, sum(paygrade) asc, max(paygrade) desc
rows between current row and current row)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary,num
order by num, deptnum, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a9""")
    
    stmt = """select num,deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
count(salary) over (order by num,sum(paygrade) asc, max(paygrade) desc
rows between current row and unbounded following)
as rank from ee1 where deptnum < 5
group by num,deptnum, paygrade, salary
order by num,deptnum, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a9a""")
    
    stmt = """select num,deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
count(salary) over (order by num,sum(paygrade) asc, max(paygrade) desc
rows between current row and 5 following)
as rank from ee1 where deptnum < 5
group by num,deptnum, paygrade, salary
order by num,deptnum, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a9b""")
    
    stmt = """select num,deptnum,paygrade, cast(salary as decimal(9,2)) as salary,
sum(salary+bonus) over (order by num, deptnum,gender,paygrade,salary
ROWS current row)
as rank from ee1 where deptnum < 5
group by num,deptnum,gender,bonus, paygrade, salary
order by num, deptnum, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a12""")
    
    stmt = """select num,paygrade, cast(salary as decimal(9,2)) as salary,
stddev(salary-commision) over (order by num, sum(deptnum),avg(paygrade),max(bonus)
rows between unbounded preceding and 5 preceding)
as rank from ee1 where deptnum < 5
group by num,paygrade, salary, commision;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a13""")
    
    stmt = """select num,paygrade, cast(salary as decimal(9,2)) as salary,
stddev(salary-commision) over (order by num, sum(deptnum),avg(paygrade),max(bonus)
rows between unbounded preceding and 5 following)
as rank from ee1 where deptnum < 5
group by num,paygrade, salary, commision;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a13a""")
    
    stmt = """select num,paygrade, cast(salary as decimal(9,2)) as salary,
stddev(salary-commision) over (order by num, sum(deptnum),avg(paygrade),max(bonus)
rows between unbounded preceding and unbounded following)
as rank from ee1 where deptnum < 5
group by num,paygrade, salary, commision;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a13b""")
    
    stmt = """select deptnum, cast(salary as decimal(9,2)) as salary,
variance(salary*1.1) over (order by num, num, paygrade
rows between unbounded preceding and current row)
as rank from ee1 where deptnum < 5
order by num, rank, deptnum, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a14""")
    
    stmt = """select deptnum, cast(salary as decimal(9,2)) as salary,
variance(salary*1.1) over (order by num, paygrade
rows between unbounded preceding and unbounded following)
as rank from ee1 where deptnum < 5
order by num, rank, deptnum, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a14a""")
    
    stmt = """select deptnum, cast(salary as decimal(9,2)) as salary,
variance(salary*1.1) over (order by num, paygrade
rows between unbounded preceding and 6 following)
as rank from ee1 where deptnum < 5
order by num, rank, deptnum, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a14b""")
    
    stmt = """select num,deptnum, paygrade, salary,
avg(salary*paygrade) over (order by num, min(paygrade) asc, salary, deptnum
rows between 5 preceding and 2 preceding)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 11)
    
    stmt = """select num,deptnum, paygrade, salary,
avg(salary*paygrade) over (order by num, min(paygrade) asc, salary, deptnum
rows between 5 preceding and 5 following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 11)
    
    stmt = """select num,deptnum, paygrade, salary,
avg(salary*paygrade) over (order by num, min(paygrade) asc, salary, deptnum
rows between 5 preceding and unbounded following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 11)
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
count(salary) over (order by num, max(paygrade) asc, avg(bonus) desc
rows between 5 preceding and 5 preceding)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a17""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
count(salary) over (order by num, max(paygrade) asc, avg(bonus) desc
rows between 5 preceding and 4 following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a17a""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
count(salary) over (order by num, max(paygrade) asc, avg(bonus) desc
rows between 5 preceding and unbounded following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a17b""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by num, avg(paygrade)+min(bonus)
rows between 5 preceding and current row)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a18""")
    
    stmt = """select num,paygrade, cast(salary as decimal(9,2)) as salary,
cast(bonus as decimal(9,2)) as bonus,
cast(commision as decimal(9,2)) as comm,
max(salary) over (order by num,case when bonus > commision
then sum(paygrade) else max(bonus) end, paygrade
rows between current row and current row)
as rank from ee1 where deptnum < 5
group by num,paygrade, salary, bonus, commision;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a19""")
    
    stmt = """select num,paygrade, cast(salary as decimal(9,2)) as salary,
cast(bonus as decimal(9,2)) as bonus,
cast(commision as decimal(9,2)) as comm,
max(salary) over (order by num, case when bonus > commision
then sum(paygrade) else max(bonus) end, paygrade
rows between current row and unbounded following)
as rank from ee1 where deptnum < 5
group by num,paygrade, salary, bonus, commision;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a19a""")
    
    stmt = """select num,paygrade, cast(salary as decimal(9,2)) as salary,
cast(bonus as decimal(9,2)) as bonus,
cast(commision as decimal(9,2)) as comm,
max(salary) over (order by num, case when bonus > commision
then sum(paygrade) else max(bonus) end, paygrade
rows between current row and 10 following)
as rank from ee1 where deptnum < 5
group by num,paygrade, salary, bonus, commision;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a19b""")
    
    stmt = """select firstname, salary**2+100,
max(gender) over (order by num, salary**2+100, firstname ROWS 1 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a20""")
    
    stmt = """select lastname, salary,
min(lastname) over (order by num, lastname,salary ROWS 3 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a21""")
    
    stmt = """select num,deptnum, paygrade, salary,
sum(*) over (order by num, paygrade*2
rows between unbounded preceding and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "3012")
    
    stmt = """select num,deptnum, paygrade, salary,
sum(*) over (order by num, paygrade*2
rows between unbounded preceding and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "3012")
    
    stmt = """select num,deptnum, paygrade, salary,
sum(*) over (order by num, paygrade*2
rows between unbounded preceding and 5 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "3012")
    
    # n2.
    stmt = """select deptnum, cast(salary as decimal(9,2)) as salary,
stddev(salary,paygrade) over (order by num, paygrade
rows between unbounded preceding and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4078")
    
    # n3.
    stmt = """select num,deptnum, cast(salary as decimal(9,2)) as salary,
variance(salary) over (order by num, paygrade
rows between 12 preceding and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a24""")
    
    stmt = """select firstname, salary,
avg(gender) over (order by num, paygrade+salary ROWS unbounded preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4038")
    
    stmt = """select firstname, salary,
avg(salary) over (order by num, paygrade+salary ROWS unbounded preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n134axp""", """a26""")
    
    _testmgr.testcase_end(desc)

def test041(desc="""N135"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN135
 
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade ROWS 1 preceding) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade ROWS 2 preceding) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade ROWS 3 preceding) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a1""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between 1 preceding and 2 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade ROWS 3 preceding) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a2""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between 1 preceding and 2 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a3""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and unbounded following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a4""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 2 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a5""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and 2 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a6""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and unbounded following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a7""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and unbounded following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a8""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 12 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a9""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following  and 5 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 5 following and 5 following ) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 5 following and 6 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a10""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following  and unbounded following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 5 following and unbounded following ) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 5 following and unbounded following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a11""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between current row  and unbounded following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and unbounded following ) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and unbounded following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a12""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between current row  and 4 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and 5 following ) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and 6 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a13""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between current row  and current row) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and current row ) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and current row) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a14""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 4 preceding) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 5 preceding ) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 6 preceding) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a15""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and current row) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and current row) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and current row) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a16""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and unbounded following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and unbounded following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a17""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 2 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 3 following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 4 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a18""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 preceding and 2 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 preceding and 3 following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 8 preceding and 4 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a19""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 preceding and 2 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 8 preceding and 4 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a20""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 preceding and unbounded following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 preceding and 3 following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 8 preceding and 4 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a21""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and  6 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 8 preceding and 4 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a22""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and  unbounded following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 8 preceding and current row) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a23""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and 6 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 8 preceding and 4 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a24""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and unbounded following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 8 preceding and 4 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a25""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary, cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and 10 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 following and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a26""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary, cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and 10 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 following and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a27""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary, cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and 10 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a28""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary, cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and current row) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 following and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a29""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary, cast(sum(salary)
over (order by num, paygrade+bonus, paygrade rows between 10 preceding and 10 following) as integer) as s,
cast(avg(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and unbounded following) as integer) as a,
cast(min(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and unbounded following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a30""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between 1 preceding and 2 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade ROWS 3 preceding) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a31""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between 1 preceding and 2 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a32""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and unbounded following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a33""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 2 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a34""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and 2 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a35""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and unbounded following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a36""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and unbounded following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a37""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 12 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 2 preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a38""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following  and 5 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 5 following and 5 following ) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 5 following and 6 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a39""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following  and unbounded following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 5 following and unbounded following ) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 5 following and unbounded following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a40""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between current row  and unbounded following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and unbounded following ) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and unbounded following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a41""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between current row  and 4 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and 5 following ) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and 6 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a42""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between current row  and current row) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and current row ) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and current row) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a43""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 4 preceding) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 5 preceding ) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 6 preceding) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a44""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and current row) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and current row) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and current row) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a45""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and unbounded following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and unbounded following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a46""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 2 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 3 following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 4 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a47""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 preceding and 2 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 preceding and 3 following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 8 preceding and 4 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a48""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 preceding and 2 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 8 preceding and 4 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a49""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 preceding and unbounded following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 preceding and 3 following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 8 preceding and 4 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a50""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and  6 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 8 preceding and 4 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a51""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and  unbounded following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 8 preceding and current row) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a52""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and 6 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 8 preceding and 4 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a53""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and unbounded following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 8 preceding and 4 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a54""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary, cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and 10 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 following and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a55""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary, cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and 10 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 following and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a56""")
    
    #seeing null values from Oracle.
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary, cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and 10 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a57""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary, cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between unbounded preceding and current row) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between 6 following and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and 5 following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a58""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary, cast(variance(salary)
over (order by num, paygrade+bonus, paygrade rows between 10 preceding and 10 following) as integer) as s,
cast(count(salary)
over (order by num, paygrade+bonus, paygrade rows between current row and unbounded following) as integer) as a,
cast(stddev(salary)
over (order by num, paygrade+bonus, paygrade rows between 4 following and unbounded following) as integer) as m
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n135exp""", """a59""")
    
    _testmgr.testcase_end(desc)

def test042(desc="""N136"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #testN136
 
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 2 preceding and current row) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a1""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and 5 preceding) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a2""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and current row) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a3""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and unbounded following) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a4""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and 4 following) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a5""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and current row) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a6""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(avg(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and unbounded following) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a7""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and 7 following) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a8""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 5 preceding and 4 preceding ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a9""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 5 preceding and current row ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a10""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(stddev(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 5 preceding and unbounded following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a11""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 5 preceding and 4 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a12""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(avg(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(count(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 5 following and unbounded following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a13""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and 5 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a14""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and 5 preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and current row) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and unbounded following) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and 5 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a15""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and 5 following) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and unbounded following) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and unbounded following) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and 5 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a16""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and 5 following) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and unbounded following) as integer) as avgs,
cast(avg(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and unbounded following) as integer) as mins,
cast(count(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and unbounded following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a17""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and 5 following) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and unbounded following) as integer) as avgs,
cast(avg(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and unbounded following) as integer) as mins,
cast(count(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and unbounded following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a18""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between 10 preceding and 5 following) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and unbounded following) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and 8 following) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and 6 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a19""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between  5 following and unbounded following) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and current row) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and unbounded following) as integer) as mins,
cast(avg(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and 6 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a20""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between  5 following and unbounded following) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between 2 following and 4 following) as integer) as avgs,
cast(avg(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between 5 following and unbounded following) as integer) as mins,
cast(count(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and 6 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a21""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between  0 following and 1 following) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between 2 following and 4 following) as integer) as avgs,
cast(min(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between 2 following and 3 following) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and 6 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a22""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(sum(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between  0 following and unbounded following) as integer) as sums,
cast(avg(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between 2 following and unbounded following) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between 2 following and unbounded following) as integer) as mins,
cast(stddev(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and unbounded following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n136exp""", """a23""")
    
    _testmgr.testcase_end(desc)

def test043(desc="""N137"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN137
 
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and 5 preceding) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a1""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and current row) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a2""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and unbounded following) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a3""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and 4 following) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a4""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and current row) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a5""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and unbounded following) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4349")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and 7 following) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a7""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 5 preceding and 4 preceding ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a8""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 5 preceding and current row ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a9""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 5 preceding and unbounded following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4349")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 5 preceding and 4 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a11""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 5 following and unbounded following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4349")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and 5 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a13""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(variance(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and 5 preceding) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and current row) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and unbounded following) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and 5 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a14""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and 5 following) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and unbounded following) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and unbounded following) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and 5 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a15""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and 5 following) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and unbounded following) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and unbounded following) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and unbounded following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4349")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between unbounded preceding and 5 following) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and unbounded following) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and unbounded following) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and unbounded following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4349")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between 10 preceding and 5 following) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and unbounded following) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and 8 following) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and 6 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a18""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(variance(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between  5 following and unbounded following) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and current row) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between current row and unbounded following) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and 6 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a19""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between  5 following and unbounded following) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between 2 following and 4 following) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between 5 following and unbounded following) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and 6 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a20""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between  0 following and 1 following) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between 2 following and 4 following) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between 2 following and 3 following) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and 6 following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n137exp""", """a21""")
    
    stmt = """select paygrade, salary, bonus,num,
cast(avg(salary*2)
over (order by num, paygrade,salary,max(paygrade)
rows between  0 following and unbounded following) as integer) as sums,
cast(stddev(paygrade+10)
over (order by num, paygrade,salary,max(paygrade)
rows between 2 following and unbounded following) as integer) as avgs,
cast(count(bonus*2.0)
over (order by num, paygrade,salary,max(paygrade)
rows between 2 following and unbounded following) as integer) as mins,
cast(max(bonus/paygrade)
over (order by num, paygrade,salary,max(paygrade)
rows between 4 following and unbounded following ) as integer) as maxs,
rank() over (order by num, paygrade,salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus,num
order by num, paygrade, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4349")
    
    _testmgr.testcase_end(desc)

def test044(desc="""N138"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN138
 
    stmt = """select paygrade, salary,
avg(salary) over (order by salary rows current row) as avg1,
max(salary) over (order by salary rows current row) as max1,
min(salary) over (order by salary rows current row) as min1,
sum(salary) over (order by salary rows current row) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a1""")
    
    stmt = """select paygrade, salary,
avg(salary) over (order by salary rows between unbounded preceding and 5 following) as avg1,
max(salary) over (order by salary rows current row) as max1,
min(salary) over (order by salary rows current row) as min1,
sum(salary) over (order by salary rows current row) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a2""")
    
    stmt = """select paygrade, salary,
avg(salary) over (order by salary rows between unbounded preceding and 5 preceding) as avg1,
max(salary) over (order by salary rows between unbounded preceding and current row) as max1,
min(salary) over (order by salary rows current row) as min1,
sum(salary) over (order by salary rows current row) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a3""")
    
    stmt = """select paygrade, salary,
avg(salary) over (order by salary rows between unbounded preceding and 5 preceding) as avg1,
max(salary) over (order by salary rows between unbounded preceding and current row) as max1,
min(salary) over (order by salary rows between unbounded preceding and 10 following) as min1,
sum(salary) over (order by salary rows current row) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a4""")
    
    stmt = """select paygrade, salary,
avg(salary) over (order by salary rows between unbounded preceding and 5 preceding) as avg1,
max(salary) over (order by salary rows between unbounded preceding and current row) as max1,
min(salary) over (order by salary rows between unbounded preceding and 10 following) as min1,
sum(salary) over (order by salary rows between unbounded preceding and unbounded following) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a5""")
    
    stmt = """select paygrade, salary,
avg(salary) over (order by salary rows between unbounded preceding and 5 preceding) as avg1,
max(salary) over (order by salary rows between unbounded preceding and current row) as max1,
min(salary) over (order by salary rows between unbounded preceding and 10 following) as min1,
sum(salary) over (order by salary rows between unbounded preceding and unbounded following) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a6""")
    
    stmt = """select paygrade, salary,
avg(salary) over (order by salary rows between unbounded preceding and 5 following) as avg1,
max(salary) over (order by salary rows between current row and 2 following) as max1,
min(salary) over (order by salary rows between unbounded preceding and unbounded following) as min1,
sum(salary) over (order by salary rows between unbounded preceding and unbounded following) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a7""")
    
    stmt = """select paygrade, salary,
avg(salary) over (order by salary rows between unbounded preceding and 5 following) as avg1,
count(salary) over (order by salary rows between current row and unbounded following) as max1,
stddev(salary) over (order by salary rows between unbounded preceding and unbounded following) as min1,
sum(salary) over (order by salary rows between unbounded preceding and unbounded following) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a8""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows current row) as avg1,
variance(salary) over (order by salary rows current row) as max1,
count(salary) over (order by salary rows current row) as min1,
count(*) over (order by salary rows current row) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a9""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows between unbounded preceding and 5 following) as avg1,
variance(salary) over (order by salary rows current row) as max1,
count(salary) over (order by salary rows current row) as min1,
count(*) over (order by salary rows current row) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a10""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows between unbounded preceding and 5 preceding) as avg1,
variance(salary) over (order by salary rows between unbounded preceding and current row) as max1,
count(salary) over (order by salary rows current row) as min1,
count(*) over (order by salary rows current row) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a11""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows between unbounded preceding and 5 preceding) as avg1,
variance(salary) over (order by salary rows between unbounded preceding and current row) as max1,
count(salary) over (order by salary rows between unbounded preceding and 10 following) as min1,
count(*) over (order by salary rows current row) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a12""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows between unbounded preceding and 5 preceding) as avg1,
variance(salary) over (order by salary rows between unbounded preceding and current row) as max1,
count(salary) over (order by salary rows between unbounded preceding and 10 following) as min1,
count(*) over (order by salary rows between unbounded preceding and unbounded following) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a13""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows between unbounded preceding and 5 preceding) as avg1,
variance(salary) over (order by salary rows between unbounded preceding and current row) as max1,
count(salary) over (order by salary rows between unbounded preceding and 10 following) as min1,
count(*) over (order by salary rows between unbounded preceding and unbounded following) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a14""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows between unbounded preceding and 5 following) as avg1,
variance(salary) over (order by salary rows between current row and 2 following) as max1,
count(salary) over (order by salary rows between unbounded preceding and unbounded following) as min1,
count(*) over (order by salary rows between unbounded preceding and unbounded following) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a15""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows between unbounded preceding and 5 following) as avg1,
variance(salary) over (order by salary rows between current row and unbounded following) as max1,
count(salary) over (order by salary rows between unbounded preceding and unbounded following) as min1,
count(*) over (order by salary rows between unbounded preceding and unbounded following) as sum1,
rank() over (order by salary) as rank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a16""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows current row) as avg1,
variance(salary) over (order by salary rows current row) as max1,
count(salary) over (order by salary rows current row) as min1,
count(*) over (order by salary rows current row) as sum1,
row_number() over (order by salary) as RowNum,
dense_rank() over (order by salary) as drank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a17""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows between unbounded preceding and 5 following) as avg1,
variance(salary) over (order by salary rows current row) as max1,
count(salary) over (order by salary rows current row) as min1,
count(*) over (order by salary rows current row) as sum1,
row_number() over (order by salary) as RowNum,
dense_rank() over (order by salary) as drank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a18""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows between unbounded preceding and 5 preceding) as avg1,
variance(salary) over (order by salary rows between unbounded preceding and current row) as max1,
count(salary) over (order by salary rows current row) as min1,
count(*) over (order by salary rows current row) as sum1,
row_number() over (order by salary) as RowNum,
dense_rank() over (order by salary) as drank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a19""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows between unbounded preceding and 5 preceding) as avg1,
variance(salary) over (order by salary rows between unbounded preceding and current row) as max1,
count(salary) over (order by salary rows between unbounded preceding and 10 following) as min1,
count(*) over (order by salary rows current row) as sum1,
row_number() over (order by salary) as RowNum,
dense_rank() over (order by salary) as drank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a20""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows between unbounded preceding and 5 preceding) as avg1,
variance(salary) over (order by salary rows between unbounded preceding and current row) as max1,
count(salary) over (order by salary rows between unbounded preceding and 10 following) as min1,
count(*) over (order by salary rows between unbounded preceding and unbounded following) as sum1,
row_number() over (order by salary) as RowNum,
dense_rank() over (order by salary) as drank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a21""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows between unbounded preceding and 5 preceding) as avg1,
variance(salary) over (order by salary rows between unbounded preceding and current row) as max1,
count(salary) over (order by salary rows between unbounded preceding and 10 following) as min1,
count(*) over (order by salary rows between unbounded preceding and unbounded following) as sum1,
row_number() over (order by salary) as RowNum,
dense_rank() over (order by salary) as drank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a22""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows between unbounded preceding and 5 following) as avg1,
variance(salary) over (order by salary rows between current row and 2 following) as max1,
count(salary) over (order by salary rows between unbounded preceding and unbounded following) as min1,
count(*) over (order by salary rows between unbounded preceding and unbounded following) as sum1,
row_number() over (order by salary) as RowNum,
dense_rank() over (order by salary) as drank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a23""")
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by salary rows between unbounded preceding and 5 following) as avg1,
variance(salary) over (order by salary rows between current row and unbounded following) as max1,
count(salary) over (order by salary rows between unbounded preceding and unbounded following) as min1,
count(*) over (order by salary rows between unbounded preceding and unbounded following) as sum1,    

dense_rank() over (order by salary) as drank
from ee1
where paygrade in (1,3,5,7,9)
order by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n138exp""", """a24""")
    
    _testmgr.testcase_end(desc)

def test045(desc="""N139"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN139
 
    stmt = """select paygrade, num,salary, avg(salary) over (rows current row) from ee1
where paygrade in (1,5,9)
group by num,paygrade, salary
order by 1,2,3, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n139exp""", """a1""")
    
    stmt = """select num,paygrade, salary,
sum(salary) over (rows 2 preceding) as rank
from ee1 where paygrade in (1,3,5)
group by num,paygrade, salary
order by num,rank, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 9)
    
    stmt = """select paygrade,num,dateofbirth, salary, min(salary)
over (rows between 1 preceding and 1 preceding) as rank from ee1
where paygrade in (5,7,9)
group by num,paygrade, salary, dateofbirth
order by rank, paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 8)
    
    stmt = """select paygrade, salary, num,
max(salary) over (rows unbounded preceding) as maxsal from ee1
where paygrade in (1,5,9)
group by num,paygrade, salary
order by num, maxsal, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 6)
    
    stmt = """select paygrade, salary, num, count(salary)
over (order by num, (salary) rows between unbounded preceding and 4 preceding) as cnt from ee1
where paygrade in (1,3,5)
group by num,paygrade, salary
order by num,cnt, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n139exp""", """a5""")
    
    stmt = """select paygrade, salary, num, stddev(salary)
over (rows between current row and current row) as stdsal from ee1
where paygrade in (5,7,9)
group by num,paygrade, salary
order by num,stdsal, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n139exp""", """a6""")
    
    # output is undeterministics
    
    stmt = """select paygrade, salary, num, variance(salary)
over (rows between unbounded preceding and current row) as varsal from ee1
where paygrade in (3,5,7)
group by num,paygrade,salary,dateofbirth
order by num,paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 11)
    
    stmt = """select paygrade, salary, num, variance(salary)
over (rows between unbounded preceding and unbounded following) as varsal from ee1
where paygrade in (3,5,7)
group by num,paygrade, salary
order by num,varsal, salary, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n139exp""", """a8""")
    
    stmt = """select paygrade, salary,ee1.num,dateofbirth, variance(salary)
over (rows between unbounded preceding and 5 following) as varsal from ee1
where paygrade in (3,5,7)
group by num,paygrade,salary,dateofbirth
order by ee1.num,paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 11)
    
    stmt = """select paygrade, salary,ee1.num,
sum(bonus)
over (order by ee1.num, sum(bonus) rows between current row and 5 following) as s,
rank() over (order by ee1.num, sum(bonus) asc) as r
from ee1, workgroup
where ee1.num = workgroup.num
group by paygrade, salary, bonus, ee1.num
having max(bonus) > 1000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n139exp""", """a10""")
    
    stmt = """select paygrade, salary,ee1.num,
sum(bonus)
over (order by ee1.num,sum(bonus) rows between current row and 1 following) as s,
rank() over (order by ee1.num,sum(bonus) asc) as r
from ee1, workgroup
where ee1.num = workgroup.num
group by paygrade, salary, bonus, ee1.num
having max(bonus) > 1000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n139exp""", """a11""")
    
    stmt = """select paygrade, salary,ee1.num,
sum(bonus)
over (order by ee1.num,sum(bonus) rows between current row and unbounded following) as s,
rank() over (order by ee1.num, sum(bonus) asc) as r
from ee1, workgroup
where ee1.num = workgroup.num
group by paygrade, salary, bonus, ee1.num
having max(bonus) > 1000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n139exp""", """a12""")
    
    _testmgr.testcase_end(desc)

def test046(desc="""N140"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN140
 
    stmt = """select paygrade, salary, num,
count(salary)
over (order by paygrade
rows between unbounded preceding and current row) as cnt,
rank() over (order by paygrade) as rank
from ee1 group by paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 20)
    
    stmt = """select paygrade, salary, num,
count(salary)
over (order by paygrade
rows between unbounded preceding and 5 following) as cnt,
rank() over (order by paygrade) as rank
from ee1 group by paygrade, salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 20)
    
    stmt = """select paygrade, salary, num,
count(salary)
over (order by paygrade
rows between unbounded preceding and unbounded following) as cnt,
rank() over (order by paygrade) as rank
from ee1 group by num,paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 20)
    
    stmt = """select paygrade, salary, num,
count(salary)
over (order by paygrade
rows between 0 preceding and 0 following) as cnt,
rank() over (order by paygrade) as rank
from ee1 group by num,paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 20)
    
    stmt = """select paygrade, salary, num,
count(salary)
over (order by paygrade
rows between 1 preceding and 1 following) as cnt,
rank() over (order by paygrade) as rank
from ee1 group by num,paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 20)
    
    stmt = """select paygrade, salary from (select paygrade, num,
max(salary) over (rows between current row and current row) from ee1
group by paygrade, salary,num) as t1 (num,paygrade, salary) order by paygrade,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 20)
    
    stmt = """select paygrade, salary from (select paygrade,num,
max(salary) over (rows between current row and 5 following) from ee1
group by paygrade, salary,num,dateofbirth) as t1 (num,paygrade, salary)
order by paygrade,salary,num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 20)
    
    stmt = """select paygrade, salary from (select paygrade,num ,
max(salary) over (rows between current row and unbounded following) from ee1
group by paygrade, salary,num) as t1 (paygrade, salary,num) order by num, paygrade,salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 20)
    
    _testmgr.testcase_end(desc)

def test047(desc="""N141"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN141
    #<aggregate> over (partition by ... order by...)
    #
    # Test case name:      a08
    # Test case author:    yku
    # Description:         Validated OLAP enhancement in R2.3 SP2 TCF
    #
    #   <window functions> :: =
    #      <window function type> OVER <in-line window specification>
    #   <window function type> :: =
    #      <rank function type> <left paren> <right paren>
    #      ROW_NUMBER <left paren> <right paren>
    #      <aggregate function>
    #
    # 1: <aggregate> over (partition by ... order by <column-list>)
    # 2: <aggregate> over (partition by ... order by <expressions>)
    # 3: <aggregate> over (partition by ...
    #       order by <mix column-list & expressions)
    #
    # Notes:
 
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
avg(salary) over (partition by deptnum order by num, paygrade
ROWS unbounded preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a1""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
avg(salary) over (partition by deptnum order by num, paygrade
ROWS unbounded preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
count(deptnum) over (partition by deptnum order by num, paygrade ROWS 10 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a2""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over (partition by deptnum order by num, paygrade asc ROWS current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a3""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
min(commision) over (partition by deptnum order by num, paygrade desc
rows between unbounded preceding and 5 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a4""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
min(commision) over (partition by deptnum order by num, paygrade desc
rows between unbounded preceding and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a4a""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
min(commision) over (partition by deptnum order by num, paygrade desc
rows between unbounded preceding and 5 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a4b""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
stddev(salary) over (partition by deptnum order by num, paygrade ascending
rows between unbounded preceding and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a5""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(bonus) over (partition by deptnum order by num, paygrade desc, bonus
rows between 5 preceding and 2 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a6""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(bonus) over (partition by deptnum order by num, paygrade desc, bonus
rows between 5 preceding and 2 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a6a""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(bonus) over (partition by deptnum order by num, paygrade desc, bonus
rows between 5 preceding and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a6b""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
min(paygrade) over (partition by deptnum order by num,deptnum,paygrade
rows between 5 preceding and 5 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a7""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
sum(deptnum) over (partition by deptnum order by num, paygrade asc, salary desc
rows between 5 preceding and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a8""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(salary) over (partition by deptnum order by deptnum, paygrade, salary
rows between current row and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a9""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(salary) over (partition by deptnum order by deptnum, paygrade, salary
rows between current row and 5 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a10""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(salary) over (partition by deptnum order by deptnum, paygrade, salary
rows between current row and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a11""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(salary) over (partition by deptnum order by deptnum, paygrade, salary
rows between 5 following and 6 following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a12""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
variance(salary) over (partition by deptnum order by deptnum, paygrade, salary
rows between 5 following and unbounded following)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n141exp""", """a13""")
    
    _testmgr.testcase_end(desc)

def test048(desc="""N142"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN142
    #row_number() over (order by ...)
    #
    # Test case name:      a09
    # Test case author:    yku
    # Description:         Validated OLAP enhancement in R2.3 SP2 TCF
    #
    #   <window functions> :: =
    #      <window function type> OVER <in-line window specification>
    #   <window function type> :: =
    #      <rank function type> <left paren> <right paren>
    #      ROW_NUMBER <left paren> <right paren>
    #      <aggregate function>
    #
    # 1: row_number() over (order by <column-list>)
    # 2: row_number() over (order by <expressions>)
    # 3: row_number() over (order by <mix column-list & expressions)
    #
    # Notes:
 
    stmt = """select gender, deptnum, paygrade, ee1.num,
row_number() over (order by ee1.num,gender asc,paygrade desc, num) as rowcnt
from ee1 where deptnum < 5 order by ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a2""")
    
    stmt = """select deptnum, paygrade, cast(salary as int) as salary,ee1.num,
row_number() over (order by ee1.num,avg(cast(salary as int))) as rowcnt from ee1
where paygrade > 7
group by deptnum, paygrade, salary, ee1.num
order by ee1.num,deptnum, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a4""")
    
    # 5: ranking order by ee1.num,expression
    stmt = """select deptnum, cast(commision+bonus as int) as cb,
row_number() over (order by ee1.num,commision+bonus, deptnum asc) as rowcnt from ee1
where (num,deptnum) < (10,5) order by ee1.num,rowcnt desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a5""")
    
    # 7: ranking order by expression
    stmt = """select deptnum, cast(salary - bonus as int),
row_number() over (order by ee1.num,salary - bonus, deptnum) as rowcnt from ee1
where salary - bonus < 50000 order by ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a7""")
    
    # 8: ranking order by expression
    stmt = """select deptnum, paygrade, bonus,
row_number() over (order by ee1.num,deptnum, paygrade, bonus*1.1) as rowcnt
from ee1 where bonus is not NULL and bonus < 2500 order by ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a8""")
    
    # 9: ranking order by expression
    stmt = """select deptnum, cast((salary/bonus) as decimal(7,0)) as bonus,
row_number() over (order by ee1.num,cast((salary/bonus) as decimal(7,0))) as rowcnt
from ee1 where salary/bonus > 20.0 order by ee1.num,1,2,3;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a9""")
    
    # 10: ranking order by expression
    stmt = """select deptnum, paygrade, bonus,
row_number() over (order by ee1.num,deptnum, paygrade**2, bonus) as rowcnt from ee1
where exists (
select deptnum from workgroup
where workgroup.deptnum = ee1.deptnum and ee1.deptnum < 5) order by ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a10""")
    
    # 11: ranking order by expression
    stmt = """select deptnum, paygrade, gender,ee1.num,
row_number() over (
order by ee1.num,deptnum, count(distinct paygrade),gender,paygrade) as rowcnt from ee1
where deptnum between 3 and 5 and paygrade in (1,3,5,7,9)
group by deptnum, paygrade, gender,ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a11""")
    
    # 12: ranking order by expression
    stmt = """select deptnum, paygrade, commision,
row_number()
over (order by ee1.num,cast(commision*paygrade as decimal(5,0)), deptnum) as rowcnt
from ee1 where paygrade between 1 and 3;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a12""")
    
    # 13: ranking order by expression
    
    stmt = """select deptnum, cast(commision as decimal(5,0)), cast(bonus as int),
row_number() over (order by ee1.num,cast(commision as decimal(5,0))+cast(bonus as int))
as rowcnt from ee1 where deptnum in (2,4,8,0,6);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a13""")
    
    # 14: ranking order by expression
    stmt = """select deptnum, commision, bonus,
row_number() over (order by ee1.num,case when commision > bonus
then commision else bonus end) as rowcnt
from ee1 where deptnum in (2,4,8,0,6);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a14""")
    
    # 15: ranking order by expression
    stmt = """select deptnum, commision, bonus,
row_number() over (order by ee1.num,case when commision > bonus
then salary*-0.8 else salary*1.2 end) as rowcnt
from ee1 where deptnum in (2,4,8,0,6);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a15""")
    
    # 16: ranking order by expression
    stmt = """select deptnum,
row_number() over (
order by ee1.num,(select count(distinct deptnum) from ee1), deptnum) as rowcnt
from ee1 where deptnum in (2,4,8,0,6) order by ee1.num,rowcnt, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a16""")
    
    # 17: ranking order by expression
    stmt = """select ee1.num, deptnum, count(paygrade)**2 as paygrade,
row_number()
over (order by ee1.num,(select count(paygrade)**2 from ee1), deptnum asc) as rowcnt
from ee1 where deptnum in (2,4,8,0,6)
group by deptnum,ee1.num
order by ee1.num,rowcnt ascending, paygrade asc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a17""")
    
    # 18: ranking order by mix expression
    stmt = """select ee1.num,deptnum, bonus, max(bonus),
row_number() over (order by ee1.num,paygrade, max(salary)*1.2, min(commision) desc)
as rowcnt from ee1 where commision is NULL
group by ee1.num,deptnum, bonus, paygrade order by ee1.num,1,2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a18""")
    
    stmt = """select ee1.num,deptnum, bonus, max(bonus),
row_number() over (order by ee1.num,paygrade, max(bonus)+min(commision)) as rowcnt
from ee1 where commision is NULL
group by ee1.num,deptnum, bonus, paygrade order by ee1.num,1,2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a19""")
    
    # 20: ranking order by mix expression
    stmt = """select ee1.num,deptnum, paygrade, bonus,
row_number()
over (order by ee1.num,min(commision)+bonus,bonus,deptnum,paygrade) as rowcnt
from ee1 where bonus > 0.0
group by ee1.num,deptnum, paygrade, bonus order by ee1.num,1,2;;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a20""")
    
    # 21: ranking order by mix expression
    stmt = """select ee1.num,deptnum, paygrade, bonus,
row_number() over (order by ee1.num,min(paygrade)+bonus*1.1) as rowcnt
from ee1 where deptnum < 5 and paygrade > 7
group by ee1.num,deptnum, paygrade, bonus order by ee1.num,1,2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a21""")
    
    # 22: ranking order by mix expression
    stmt = """select ee1.num,deptnum, paygrade, bonus,
row_number() over (order by ee1.num,deptnum, paygrade, max(bonus)/2) as rowcnt
from ee1 where paygrade < 5
group by ee1.num,deptnum, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a22""")
    
    # 23: ranking with multiple expressions
    stmt = """select ee1.num,deptnum, bonus,
row_number() over (order by ee1.num,avg(deptnum), max(bonus) asc) as rowcnt
from ee1 where deptnum < 5
group by ee1.num,deptnum,bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a23""")
    
    # 24:
    stmt = """select ee1.num,deptnum, paygrade,
row_number() over (order by ee1.num,num asc,lastname desc,firstname ascending,
gender desc,deptnum,paygrade,salary,bonus,commision,dateofbirth) as rowcnt from ee1
where salary <  bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a24""")
    
    # 26:
    stmt = """select ee1.num,firstname, lastname, deptnum,
row_number() over (order by ee1.num,max(num) asc,min(deptnum),avg(paygrade) desc,
cast(sum(salary) as int),count(commision)) as rowcnt
from ee1 where deptnum between 3 and 5 group by ee1.num,firstname, lastname, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a26""")
    
    # 27:
    stmt = """select ee1.num,firstname, lastname, deptnum, row_number() over (order by ee1.num,
max(num)+min(deptnum)+avg(paygrade)*sum(salary) asc) as rowcnt
from ee1 where deptnum between 3 and 5 group by ee1.num,firstname, lastname, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a27""")
    
    # 28:
    stmt = """select ee1.num,firstname, deptnum,
cast(num*deptnum*paygrade+salary-commision as integer) as r1,
row_number() over (order by
cast(num*deptnum*paygrade+salary-commision as integer) desc, firstname)
as rowcnt
from ee1 where deptnum between 3 and 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a28""")
    
    # 30:
    stmt = """select ee1.num,deptnum, lastname, max(firstname) as mfirst, min(gender),
cast(row_number()
over (order by ee1.num,deptnum, max(firstname), min(gender)) as smallint)
as rowcnt from ee1
where deptnum < 5
group by deptnum, lastname, ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a30""")
    
    # 31:
    stmt = """select ee1.num,deptnum, lastname,
row_number() over (order by ee1.num,lastname,stddev(bonus)) as rowcnt from ee1
where deptnum < 5
group by ee1.num,deptnum, lastname order by ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a31""")
    
    # 32:
    stmt = """select ee1.num,deptnum, lastname,
row_number() over (order by ee1.num,lastname,variance(bonus)) as rowcnt from ee1
where deptnum < 5
group by deptnum, lastname, ee1.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a32""")
    
    # 33:
    stmt = """select ee1.num,deptnum, lastname,
row_number() over (order by ee1.num,lastname, stddev(salary) asc,
variance(bonus) desc, sum(commision), max(lastname)) as rowcnt from ee1
where deptnum < 5
group by ee1.num,deptnum, lastname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a33""")
    
    _testmgr.testcase_end(desc)

def test049(desc="""N143"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN143
    #<aggregate> over (partition by ... order by...)
    #
    # Test case name:      a10
    # Test case author:    yku
    # Description:         Validated OLAP enhancement in R2.3 SP2 TCF
    #   Test: sequence by, union, view, insert ... select
    #
    # Notes:
 
    # a10.1: OLAP with sequence by clause
    
    stmt = """select deptnum, paygrade, salary,
avg(salary) over (order by paygrade ROWS unbounded preceding)
from ee1 where deptnum < 5 sequence by deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4345")
    
    # a10.2: OLAP with sequence by clause
    
    stmt = """select salary, rank() over (order by salary+bonus+commision asc) from ee1
sequence by salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4345")
    
    # a10.3: OLAP with sequence by clause
    
    stmt = """select max(salary), rank() over (order by max(salary) asc) from ee1
sequence by salary group by salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4345")
    
    # a10.4: group by ... having ...
    
    stmt = """select deptnum, paygrade, max(salary) as salary,
rank() over (order by avg(salary)) as rank from ee1
group by deptnum, paygrade
having deptnum >= 3 and paygrade >= 5
order by deptnum, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n143exp""", """a4""")
    
    # a10.5: group by ... having ...
    
    stmt = """select count(deptnum), min(paygrade), max(salary) as salary,
rank() over (order by avg(salary)) as rank from ee1
sequence by salary
group by deptnum, paygrade
having deptnum >= 3 and paygrade >= 5
order by deptnum, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4345")
    
    stmt = """drop view view_ee1;"""
    output = _dci.cmdexec(stmt)
    stmt = """drop view view_ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """drop view view_ee3;"""
    output = _dci.cmdexec(stmt)
    
    # a10.6: create view using OLAP
    stmt = """create view view_ee1 as
select rank() over (order by salary+bonus+commision asc) as income from ee1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from view_ee1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n142exp""", """a6""")
    
    # a10.7: create view using OLAP
    stmt = """create view view_ee2 as
select dense_rank()
over (order by salary*1.1 desc) as adjust from ee1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from view_ee2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n143exp""", """a7""")
    
    # a10.9: OLAP in subquery
    # 0 row selected
    stmt = """select paygrade, salary,
max(salary) over (partition by paygrade
order by salary+bonus*2 rows current row) as mm
from ee1
where deptnum not in
(select max(deptnum) over (order by workgrpname
rows between unbounded preceding and 1 preceding)
from workgroup);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 0)
    
    stmt = """select paygrade, salary,
max(salary) over (partition by paygrade
order by salary+bonus*2 rows current row) as mm
from ee1
where deptnum not in
(select max(deptnum) over (order by workgrpname
rows between unbounded preceding and 1 following)
from workgroup);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n143exp""", """a7a""")
    
    stmt = """select paygrade, salary,
max(salary) over (partition by paygrade
order by salary+bonus*2 rows current row) as mm
from ee1
where deptnum not in
(select max(deptnum) over (order by workgrpname
rows between unbounded preceding and unbounded following)
from workgroup);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n143exp""", """a7b""")
    
    stmt = """select paygrade, salary,
max(salary) over (partition by paygrade
order by salary+bonus*2 rows current row) as mm
from ee1
where deptnum not in
(select max(deptnum) over (order by workgrpname
rows between 5 following and unbounded following)
from workgroup);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n143exp""", """a8""")
    
    stmt = """select paygrade, salary,
max(salary) over (partition by paygrade
order by salary+bonus*2 rows current row) as mm
from ee1
where deptnum not in
(select max(deptnum) over (order by workgrpname
rows between 5 following and 6 following)
from workgroup);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n143exp""", """a9""")
    
    stmt = """select paygrade, salary,
max(salary) over (partition by paygrade
order by salary+bonus*2 rows current row) as mm
from ee1
where deptnum not in
(select max(deptnum) over (order by workgrpname
rows between current row and 6 following)
from workgroup);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n143exp""", """a10""")
    
    stmt = """select paygrade, salary,
max(salary) over (partition by paygrade
order by salary+bonus*2 rows current row) as mm
from ee1
where deptnum not in
(select max(deptnum) over (order by workgrpname
rows between current row and unbounded following)
from workgroup);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n143exp""", """a11""")
    
    stmt = """select paygrade, salary,
max(salary) over (partition by paygrade
order by salary+bonus*2 rows current row) as mm
from ee1
where deptnum not in
(select max(deptnum) over (order by workgrpname
rows between 5 preceding and 6 following)
from workgroup);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n143exp""", """a12""")
    
    stmt = """select paygrade, salary,
max(salary) over (partition by paygrade
order by salary+bonus*2 rows current row) as mm
from ee1
where deptnum not in
(select max(deptnum) over (order by workgrpname
rows between 5 preceding and unbounded following)
from workgroup);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n143exp""", """a13""")
    
    _testmgr.testcase_end(desc)

def test050(desc="""143C"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #test143C
 
    # a10.9: insert ... select
    stmt = """create table ee2
(
num      int not null not droppable,
DeptNum       integer unsigned ,
PayGrade      integer unsigned ,
Salary        numeric(9,2)     ,
Bonus	 decimal(9,2)     ,
primary key (num)
)
attribute
extent (1024, 1024),
maxextents 16 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows 2 preceding),
count(deptnum)
over (order by num, salary+bonus
rows between unbounded preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows unbounded preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between 2 preceding and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows 2 preceding),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows unbounded preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between 2 preceding and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows 2 preceding),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows 12 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between 2 preceding and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows 2 preceding),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows 12 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between unbounded preceding and 0 preceding),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows 12 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between unbounded preceding and current row),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows 12 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 2 preceding and current row),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows 2 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and 4 following)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between unbounded preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows 12 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between current row and current row),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows 12 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between current row and unbounded following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows 12 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between current row and 5 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows 12 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows 12 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and current row),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows 12 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 8 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows 12 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 4 preceding and 3 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between unbounded preceding and 3 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between unbounded preceding and current row),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between unbounded preceding and unbounded following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between unbounded preceding and 5 following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between unbounded preceding and current row),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between unbounded preceding and unbounded following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between unbounded preceding and 12 following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between current row and current row),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between current row and unbounded following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between current row and 4 following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 5 preceding and 4 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 5 preceding and current row),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 5 preceding and unbounded following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 5 preceding and 4 following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 5 preceding and unbounded following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 5 following and unbounded following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 10 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 4 following and 6 following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """select paygrade, salary,
stddev(salary) over (order by num,salary rows current row) as avg1,
variance(salary) over (order by num, salary rows current row) as max1,
count(salary) over (order by num, salary rows current row) as min1,
count(*) over (order by num,salary rows current row) as sum1,
row_number() over (order by num, salary) as RowNum,
dense_rank() over (order by num, salary) as drank
from ee1
where paygrade in (1,3,5,7,9)
order by num,paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 14)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 4 preceding and 3 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between unbounded preceding and 4 preceding)    

from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between unbounded preceding and 3 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between unbounded preceding and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between unbounded preceding and current row),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between unbounded preceding and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between unbounded preceding and unbounded following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between unbounded preceding and unbounded following)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between unbounded preceding and 5 following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
variance(bonus*2)
over (order by num, salary+bonus
rows between current row and unbounded following)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, '8411')
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between unbounded preceding and current row),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and 3 following)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between unbounded preceding and unbounded following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between 4 preceding and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between unbounded preceding and 12 following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between 4 preceding and 4 preceding)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between current row and current row),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between 6 preceding and unbounded following)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between current row and unbounded following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between 3 following and 4 following)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between current row and 4 following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between 4 following and unbounded following)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 5 preceding and 4 preceding),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between unbounded preceding and current row)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 5 preceding and current row),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between unbounded preceding and unbounded following)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 5 preceding and unbounded following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between 4 following and 6 following)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 5 preceding and 4 following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and unbounded following)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 5 preceding and unbounded following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and 10 following)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 5 following and unbounded following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between 10 preceding and 10 following)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    stmt = """delete from ee2;"""
    output = _dci.cmdexec(stmt)
    stmt = """insert into ee2 (select
sum(num+1) over (order by num, salary+bonus rows between 5 preceding and 0 following),
count(deptnum)
over (order by num, salary+bonus
rows between 5 preceding and current row),
max(paygrade+2)
over (order by num, salary+bonus rows between 5 following and 6 following),
avg(salary+bonus)
over (order by num, salary+bonus rows 1 preceding),
min(bonus*2)
over (order by num, salary+bonus
rows between current row and unbounded following)
from ee1);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 20)
    
    _testmgr.testcase_end(desc)

def test051(desc="""N144"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN144
 
    stmt = """select * from ee2 order by num,2,3;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between unbounded preceding and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a3""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between unbounded preceding and 5 preceding)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a4""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between unbounded preceding and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a5""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between unbounded preceding and 2 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a6""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between current row and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a7""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between current row and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a8""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between current row and 4 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a9""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 preceding)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a10""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a11""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a12""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a13""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 preceding)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a14""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a15""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a16""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a17""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 following and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a18""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 following and 4 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a19""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between unbounded preceding and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between unbounded preceding and 4 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a20""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between unbounded preceding and 5 preceding)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between unbounded preceding and current row)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a21""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between unbounded preceding and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between unbounded preceding and 10 following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a22""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between unbounded preceding and 2 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between current row and current row)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a23""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between current row and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between current row and 12 following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a24""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between current row and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between current row and unbounded following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a25""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between current row and 4 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between 5 preceding and 4 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a26""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 preceding)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between 5 preceding and current row)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a27""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between 5 preceding and unbounded following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a28""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between 4 preceding and 6 following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a29""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between 4 following and 6 following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a30""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 preceding)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between 4 following and unbounded following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a31""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a32""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a33""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between 5 following and unbounded following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a34""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 following and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between current row and unbounded following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a35""")
    
    stmt = """select max(salary) over (order by num, max(bonus)
rows between 4 following and 4 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus)
rows between unbounded preceding and unbounded following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144exp""", """a36""")
    
    _testmgr.testcase_end(desc)

def test052(desc="""144A"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #Test144A
 
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between unbounded preceding and 5 preceding)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a1""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between unbounded preceding and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a2""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between unbounded preceding and 2 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a3""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between current row and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a4""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between current row and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a5""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between current row and 4 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a6""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 preceding)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a7""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a8""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a9""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a10""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 preceding)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a11""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a12""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a13""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a14""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 following and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a15""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 following and 4 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a16""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between unbounded preceding and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between unbounded preceding and 4 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a17""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between unbounded preceding and 5 preceding)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between unbounded preceding and current row)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a18""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between unbounded preceding and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between unbounded preceding and 10 following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a19""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between unbounded preceding and 2 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between current row and current row)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a20""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between current row and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between current row and 12 following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a21""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between current row and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between current row and unbounded following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a22""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between current row and 4 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between 5 preceding and 4 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a23""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 preceding)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between 5 preceding and current row)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a24""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between 5 preceding and unbounded following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a25""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between 4 preceding and 6 following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a26""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between 4 following and 6 following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a27""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 preceding)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between 4 following and unbounded following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a28""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and current row)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a29""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows 1 preceding)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a30""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 preceding and 3 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between 5 following and unbounded following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a31""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 following and unbounded following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between current row and unbounded following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a32""")
    
    stmt = """select variance(salary) over (order by num, max(bonus)
rows between 4 following and 4 following)
from ee1
where deptnum < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus)
rows between unbounded preceding and unbounded following)
from ee2
where deptnum < 5
group by num, salary, bonus
order by 1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n144axp""", """a33""")
    
    _testmgr.testcase_end(desc)

def test053(desc="""N145"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN145
 
    # a10.11: OLAP with union
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between unbounded preceding and current row),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a1""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between unbounded preceding and current row),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a2""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between unbounded preceding and 5 preceding),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a3""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between unbounded preceding and unbounded following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a4""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between unbounded preceding and 5 following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a5""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between unbounded preceding and unbounded following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a6""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between unbounded preceding and 3 following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a7""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between current row and current row),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a8""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between current row and unbounded following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a9""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between current row and 3 following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a10""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between 4 preceding and 3 following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a11""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between 4 preceding and current row),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a12""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between 4 preceding and unbounded following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a13""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between 5 preceding and 3 following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a14""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between 5 following and unbounded following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a15""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between 4 following and 6 following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a16""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between 4 following and 10 following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows between current row and 3 following)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a17""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between 4 following and 10 following),
sum(bonus) over (order by num, min(salary+bonus) rows between current row and current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows between current row and 3 following)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a18""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between 4 following and 10 following),
sum(bonus) over (order by num, min(salary+bonus) rows between current row and current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows between 1 preceding and 3 following),
max(bonus) over (order by num, max(bonus) rows between current row and 3 following)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a19""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between 4 following and 10 following),
sum(bonus) over (order by num, min(salary+bonus) rows between unbounded preceding and current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows between 1 preceding and 3 following),
max(bonus) over (order by num, max(bonus) rows between current row and unbounded following)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a20""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between 4 following and 10 following),
sum(bonus) over (order by num, min(salary+bonus) rows between unbounded preceding and 4 preceding)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows between 4 preceding and 3 preceding),
max(bonus) over (order by num, max(bonus) rows between 4 following and unbounded following)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a21""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between 4 following and 10 following),
sum(bonus) over (order by num, min(salary+bonus) rows between unbounded preceding and current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows between unbounded preceding and unbounded following),
max(bonus) over (order by num, max(bonus) rows between 4 following and unbounded following)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a22""")
    
    stmt = """select max(salary) over (order by num, min(salary+bonus)
rows between 4 following and 10 following),
sum(bonus) over (order by num, min(salary+bonus) rows between current row and current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select avg(salary) over (order by num, max(bonus) rows between current row and unbounded following),
max(bonus) over (order by num, max(bonus) rows between current row and 4 following )
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a23""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between unbounded preceding and current row),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a24""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between unbounded preceding and current row),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a25""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between unbounded preceding and 5 preceding),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a26""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between unbounded preceding and unbounded following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a27""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between unbounded preceding and 5 following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a28""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between unbounded preceding and unbounded following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a29""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between unbounded preceding and 3 following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a30""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between current row and current row),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a31""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between current row and unbounded following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a32""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between current row and 3 following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a33""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between 4 preceding and 3 following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a34""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between 4 preceding and current row),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a35""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between 4 preceding and unbounded following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a36""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between 5 preceding and 3 following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a37""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between 5 following and unbounded following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a38""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between 4 following and 8 following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows current row)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a39""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between 4 following and 10 following),
sum(bonus) over (order by num, min(salary+bonus) rows current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows between current row and 3 following)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a40""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between 4 following and 10 following),
sum(bonus) over (order by num, min(salary+bonus) rows between current row and current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows 1 preceding),
max(bonus) over (order by num, max(bonus) rows between current row and 3 following)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a41""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between 4 following and 10 following),
sum(bonus) over (order by num, min(salary+bonus) rows between current row and current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows between 1 preceding and 3 following),
max(bonus) over (order by num, max(bonus) rows between current row and 3 following)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a42""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between 4 following and 10 following),
sum(bonus) over (order by num, min(salary+bonus) rows between unbounded preceding and current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows between 1 preceding and 3 following),
max(bonus) over (order by num, max(bonus) rows between current row and unbounded following)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a43""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between 4 following and 10 following),
sum(bonus) over (order by num, min(salary+bonus) rows between unbounded preceding and 4 preceding)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows between 4 preceding and 3 preceding),
max(bonus) over (order by num, max(bonus) rows between 4 following and unbounded following)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a44""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between 4 following and 10 following),
sum(bonus) over (order by num, min(salary+bonus) rows between unbounded preceding and current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows between unbounded preceding and unbounded following),
max(bonus) over (order by num, max(bonus) rows between 4 following and unbounded following)
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a45""")
    
    stmt = """select variance(salary) over (order by num, min(salary+bonus)
rows between 4 following and 10 following),
sum(bonus) over (order by num, min(salary+bonus) rows between current row and current row)
from ee1
where paygrade < 5
group by num, salary, bonus
union
select stddev(salary) over (order by num, max(bonus) rows between current row and unbounded following),
max(bonus) over (order by num, max(bonus) rows between current row and 4 following )
from ee2
where paygrade < 5
group by num, salary, bonus
order by 1, 2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n145exp""", """a46""")
    
    _testmgr.testcase_end(desc)

def test054(desc="""N146"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN146
    #rows between <n> preceding and <m> preceding with sum() and dense_rank()
    #having subquery in the where clause
    #*** ERROR[2235] MXCMP Internal Error: Pass one skipped. Fix is in SUT18
 
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 5 preceding and 1 preceding) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between unbounded preceding and 1 preceding) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between unbounded preceding and current row) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between unbounded preceding and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between unbounded preceding and 4 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between current row and current row) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between current row and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between current row and 3 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 4 preceding and 5 preceding) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 4 preceding and current row) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 4 preceding and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 4 preceding and 3 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 4 following and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 4 following and 3 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 4 following and 4 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 0 following and 0 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 0 following and 4 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 4 following and 0 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 1 following and 1 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 1 following and 2 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 2 following and 1 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 4 following and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 0 following and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 0 preceding and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between unbounded preceding and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 5 preceding and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 5 preceding and 5 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 0 preceding and 0 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 3 preceding and 2 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between 2 preceding and 3 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between current row and 0 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between current row and 3 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between current row and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    #mxcmp internal error:2235
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between current row and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment rows between unbounded preceding and 5 following) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
sum (coverage) over (order by ee1.num, copayment
rows between current row and current row ) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select min(coverage) over
(order by ee1.num, copayment rows between 4 preceding and 5 following) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 5 preceding and 1 preceding) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between unbounded preceding and 1 preceding) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between unbounded preceding and current row) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between unbounded preceding and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between unbounded preceding and 4 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between current row and current row) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between current row and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between current row and 3 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 4 preceding and 5 preceding) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 4 preceding and current row) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 4 preceding and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 4 preceding and 3 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 4 following and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 4 following and 3 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 4 following and 4 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 0 following and 0 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 0 following and 4 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 4 following and 0 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 1 following and 1 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 1 following and 2 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 2 following and 1 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 4 following and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 0 following and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 0 preceding and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between unbounded preceding and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 5 preceding and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 5 preceding and 5 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 0 preceding and 0 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 3 preceding and 2 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between 2 preceding and 3 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between current row and 0 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between current row and 3 following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between current row and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment ROWS unbounded preceding) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    #mxcmp internal error:2235
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between current row and unbounded following) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment rows between unbounded preceding and 5 following) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    stmt = """select ee1.num,paygrade, coverage,  copayment,
variance (coverage) over (order by ee1.num, copayment
rows between current row and current row ) as SumCoverage,
dense_rank() over (order by ee1.num, copayment) as DenRank
from ee1, insurance where insurance.num = ee1.num
and   ee1.deptnum < 100 and Deductible > 0
and coverage IN (select stddev (coverage) over
(order by ee1.num, copayment rows between 4 preceding and 5 following) from insurance);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4391")
    
    _testmgr.testcase_end(desc)

def test055(desc="""N147"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN147
    #ranking order by aggregate function
 
    stmt = """select deptnum, paygrade, avg(salary) as salary,
rank() over (order by num, avg(salary),deptnum,paygrade) as rank from ee1
where deptnum between 3 and 5
group by num,deptnum, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a1""")
    
    # a11.29:
    
    stmt = """select paygrade,num,dateofbirth, bonus, avg(paygrade), max(cast(bonus as integer)),
rank() over (order by num, avg(paygrade), max(cast(bonus as integer)))
as rank from ee1
group by paygrade, bonus,num,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a2""")
    
    stmt = """select paygrade,num,dateofbirth,  bonus, avg(paygrade), variance(cast(bonus as integer)),
rank() over (order by num, avg(paygrade), variance(cast(bonus as integer)))
as rank from ee1
group by paygrade, bonus,num,dateofbirth
order by num,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a3""")
    
    stmt = """select paygrade, num,dateofbirth,bonus, avg(paygrade), stddev(cast(bonus as integer)),
rank() over (order by num, avg(paygrade), stddev(cast(bonus as integer)))
as rank from ee1
group by paygrade, bonus,num,dateofbirth
order by num,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a4""")
    
    # a11.3: ranking order by aggregate function
    
    stmt = """select deptnum,num,dateofbirth, paygrade, variance(salary),
rank() over (partition by deptnum order by num, variance(salary)) as rank
from ee1 where num < 15
group by deptnum, paygrade,num,dateofbirth
order by num,dateofbirth;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a5""")
    
    stmt = """select deptnum, paygrade, stddev(salary),
rank() over (partition by deptnum order by num,stddev(salary)) as rank
from ee1 where num < 15
group by num,deptnum, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a6""")
    
    stmt = """select deptnum, paygrade, avg(salary),
rank() over (partition by deptnum order by num, avg(salary)) as rank
from ee1 where num < 15
group by num,deptnum, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a7""")
    
    # a11.3: ranking order by aggregate function
    
    stmt = """select deptnum, paygrade, avg(salary) as salary,
dense_rank() over (order by num, avg(salary)) as rank from ee1
where deptnum between 3 and 5
group by num,deptnum, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a8""")
    
    # a11.29: day-1 problem
    
    stmt = """select paygrade, bonus, avg(paygrade), max(cast(bonus as integer)),
dense_rank() over (order by num, avg(paygrade), max(cast(bonus as integer)))
as rank from ee1
group by num,paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a9""")
    
    # a11.3: ranking order by aggregate function
    
    stmt = """select deptnum, paygrade, avg(salary),
dense_rank() over (partition by deptnum order by num, avg(salary)) as rank
from ee1 where num < 15
group by num,deptnum, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a10""")
    
    # a11.13: ranking with multiple expressions
    
    stmt = """select deptnum, avg(paygrade), max(bonus),
dense_rank() over (partition by deptnum
order by num, avg(paygrade), max(bonus) asc) as rank
from ee1 where deptnum < 5
group by num,deptnum,paygrade,bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a11""")
    
    # a11.10. supported
    
    stmt = """select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by num, stddev(paygrade)+3 asc, salary, num
ROWS unbounded preceding)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a12""")
    
    # a11.11. supported
    
    stmt = """select variance(deptnum*paygrade) as v, cast(salary as decimal(9,2)) as salary,
max(salary) over (order by num,variance(deptnum*paygrade), salary, num
ROWS 3 preceding)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by v, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a13""")
    
    stmt = """select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by num, stddev(paygrade)+3 asc, salary, num
rows between unbounded preceding and 4 preceding)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a14""")
    
    stmt = """select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by num,stddev(paygrade)+3 asc, salary, num
rows between unbounded preceding and current row)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a15""")
    
    stmt = """select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by num,stddev(paygrade)+3 asc, salary, num
rows between unbounded preceding and unbounded following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a16""")
    
    stmt = """select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by num, stddev(paygrade)+3 asc, salary, num
rows between unbounded preceding and current row)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a17""")
    
    stmt = """select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by num, stddev(paygrade)+3 asc, salary, num
rows between current row and current row)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a18""")
    
    stmt = """select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by num, stddev(paygrade)+3 asc, salary, num
rows between current row and unbounded following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a19""")
    
    stmt = """select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by num, stddev(paygrade)+3 asc, salary, num
rows between current row and 5 following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a20""")
    
    stmt = """select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by num, stddev(paygrade)+3 asc, salary, num
rows between 4 preceding and 3 preceding)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a21""")
    
    stmt = """select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by num, stddev(paygrade)+3 asc, salary, num
rows between 6 preceding and current row)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a22""")
    
    stmt = """select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by num, stddev(paygrade)+3 asc, salary, num
rows between 4 preceding and 6 following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a23""")
    
    stmt = """select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by num, stddev(paygrade)+3 asc, salary, num
rows between 4 preceding and unbounded following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a24""")
    
    stmt = """select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by stddev(paygrade)+3 asc, salary, num
rows between 4 following and 6 following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a25""")
    
    stmt = """select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by stddev(paygrade)+3 asc, salary, num
rows between 5 following and unbounded following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n147exp""", """a26""")
    
    _testmgr.testcase_end(desc)

def test056(desc="""N148"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN148
 
    # a11.8: ranking order by aggregate function
    
    stmt = """select deptnum, paygrade, avg(salary) as salary,
row_number() over (order by num, avg(salary)) as rowcnt from ee1
where deptnum between 3 and 5
group by num,deptnum, paygrade
order by 1,2,3,4;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a1""")
    
    # a11.29:
    
    stmt = """select paygrade, bonus, avg(paygrade), max(cast(bonus as integer)),
row_number() over (order by num, avg(paygrade), max(cast(bonus as integer)))
as rowcnt from ee1
group by num,paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a2""")
    
    stmt = """select variance(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by variance(paygrade)+3 asc, salary, num
rows between unbounded preceding and current row)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a3""")
    
    stmt = """select variance(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by variance(paygrade)+3 asc, salary, num
rows between unbounded preceding and unbounded following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a4""")
    
    stmt = """select variance(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by variance(paygrade)+3 asc, salary, num
rows between unbounded preceding and current row)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a5""")
    
    stmt = """select variance(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by variance(paygrade)+3 asc, salary, num
rows between current row and current row)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a6""")
    
    stmt = """select variance(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by variance(paygrade)+3 asc, salary, num
rows between current row and unbounded following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a7""")
    
    stmt = """select variance(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by variance(paygrade)+3 asc, salary, num
rows between current row and 5 following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a8""")
    
    stmt = """select variance(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by variance(paygrade)+3 asc, salary, num
rows between 4 preceding and 0 preceding)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a9""")
    
    stmt = """select variance(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by variance(paygrade)+3 asc, salary, num
rows between 6 preceding and current row)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a10""")
    
    stmt = """select variance(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by variance(paygrade)+3 asc, salary, num
rows between 4 preceding and 6 following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a11""")
    
    stmt = """select variance(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by variance(paygrade)+3 asc, salary, num
rows between 4 preceding and unbounded following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a12""")
    
    stmt = """select variance(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by variance(paygrade)+3 asc, salary, num
rows between 4 following and 6 following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a13""")
    
    stmt = """select variance(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (order by num, variance(paygrade)+3 asc, salary, num
rows between 5 following and unbounded following)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num
order by s, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a14""")
    
    stmt = """select deptnum, paygrade, stddev(salary) as salary,
row_number() over (order by num,variance(salary)) as rowcnt from ee1
where deptnum between 3 and 5
group by num,deptnum, paygrade
order by 1,2,3,4;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a15""")
    
    stmt = """select deptnum, paygrade, variance(salary) as salary,
row_number() over (order by num, stddev(salary)) as rowcnt from ee1
where deptnum between 3 and 5
group by num,deptnum, paygrade
order by 1,2,3,4;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a16""")
    
    stmt = """select deptnum, paygrade, stddev(salary) as salary,
row_number() over (order by num, stddev(salary)) as rowcnt from ee1
where deptnum between 3 and 5
group by num,deptnum, paygrade
order by 1,2,3,4;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a17""")
    
    stmt = """select deptnum, paygrade, variance(salary) as salary,
row_number() over (order by num, variance(salary)) as rowcnt from ee1
where deptnum between 3 and 5
group by num,deptnum, paygrade
order by 1,2,3,4;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a18""")
    
    # a11.29:
    
    stmt = """select paygrade, bonus, avg(paygrade), max(cast(bonus as integer)),
row_number() over (order by num, avg(paygrade), max(cast(bonus as integer)))
as rowcnt from ee1
group by num,paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a19""")
    
    stmt = """select paygrade, bonus, stddev(paygrade), variance(cast(bonus as integer)),
row_number() over (order by num, avg(paygrade), stddev(cast(bonus as integer)))
as rowcnt from ee1
group by num,paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n148exp""", """a20""")
    
    _testmgr.testcase_end(desc)

def test057(desc="""N149"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN149
    #order by ... asc sorted in desc order
 
    stmt = """create table ins
(
Num           integer unsigned no default  not null not droppable ,
InsName       char(18) ,
Coverage      largeint ,
CoPayment     numeric(5,2),
primary key (Num) )
attribute
extent (1024, 1024),
maxextents 16;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """insert into ins values
(1, 'BlueCross', 500000, 50.50),
(5, 'Kaiser', 332000, 40.55),
(6, 'BlueCross', 340000, 40.40),
(11, 'BlueCross', 500000, 25.25),
(15, 'Kaiser', 332000, 35.35),
(16, 'BlueCross', 340000, 55.55),
(19, 'BlueCross', 340000, 55.55),
(21, 'BlueCross', 500000, 44.33),
(25, 'Kaiser', 332000, 35.35),
(26, 'BlueCross', 340000, 44.33);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 10)
    
    # a12.01: sort ascending succesfully
    
    stmt = """select copayment, insname,
max(copayment) over (order by insurance.num, sum(copayment) asc
rows between unbounded preceding and current row) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4121")
    
    stmt = """select copayment, insname,
max(copayment) over (order by insurance.num, sum(copayment) asc
rows between unbounded preceding and 2 following) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4121")
    
    stmt = """select copayment, insname,
variance(copayment) over (order by insurance.num, sum(copayment) asc
rows between unbounded preceding and 2 following) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4121")
    
    stmt = """select copayment, insname,
max(copayment) over (order by insurance.num, sum(copayment) asc
rows between 5 preceding and 4 following) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4121")
    
    stmt = """select copayment, insname,
max(copayment) over (order by insurance.num, sum(copayment) asc
rows between 5 following and 10 following) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4121")
    
    stmt = """select copayment, insname,
max(copayment) over (order by insurance.num, sum(copayment) asc
rows between unbounded following and 4 following) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4342")
    
    stmt = """select copayment, insname,
max(copayment) over (order by insurance.num, sum(copayment) asc
rows between 8 following and unbounded following) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4121")
    
    # a12.02: verify that sort is ascending, not desceding
    # default sorting ascendingly
    
    stmt = """select copayment, insname,
max(copayment) over (order by copayment , insname
rows between unbounded preceding and current row) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n149exp""", """a8""")
    
    # a12.03: sort 2 columns ascending
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insurance.num, sum(copayment) asc, insname asc
rows between unbounded preceding and current row) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4121")
    
    # a12.04: sort 2 columns, 1 asc, 1 desc
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insurance.num, sum(copayment) asc, insname desc
ROWS current row) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4121")
    
    # a12.05: sort 2 columns, 1 desc, 1 asc
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insname desc, sum(copayment) asc
ROWS current row) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n149exp""", """a11""")
    
    # a12.06: sort 2 columns, both desc
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insname desc, sum(copayment) desc
rows between unbounded preceding and current row) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n149exp""", """a12""")
    
    # a12.07: sort 3 columns: all ascending
    
    stmt = """select copayment, insname,
max(copayment) over (order by copayment asc, coverage, insname
ROWS current row) as MaxCoPayment from ins
group by copayment, coverage, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n149exp""", """a13""")
    
    # a12.08: sort 3 columns: all ascending
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insurance.num, sum(copayment) asc, coverage asc, insname asc
ROWS current row) as MaxCoPayment from ins
group by copayment, coverage, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4121")
    
    # a12.09: sort 3 columns: mix ascending and desc
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insurance.num, sum(copayment) asc, coverage desc, insname asc
ROWS current row) as MaxCoPayment from ins
group by copayment, coverage, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output, "4121")
    
    # a12.10: sort 3 columns: all desc
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over
(order by insname desc, sum(copayment) desc, coverage desc
ROWS current row) as MaxCoPayment from ins
group by copayment, coverage, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n149exp""", """a16""")
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insname desc, sum(copayment) desc
rows between unbounded preceding and unbounded following) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n149exp""", """a17""")
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insname desc, sum(copayment) desc
rows between unbounded preceding and 5 following) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n149exp""", """a18""")
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insname desc, sum(copayment) desc
rows between current row and unbounded following) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n149exp""", """a19""")
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insname desc, sum(copayment) desc
rows between current row and 5 following) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n149exp""", """a20""")
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insname desc, sum(copayment) desc
rows between 4 following and unbounded following) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n149exp""", """a21""")
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insname desc, sum(copayment) desc
rows between 4 following and 4 following) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n149exp""", """a22""")
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insname desc, sum(copayment) desc
rows between unbounded preceding and unbounded following) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n149exp""", """a23""")
    
    stmt = """select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insname desc, sum(copayment) desc
rows between 3 preceding and 4 following) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n149exp""", """a24""")
    
    _testmgr.testcase_end(desc)

def test058(desc="""N150"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN150
 
    # a12.11: 4 columns
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by paygrade, salary, bonus, commision
rows between 5 preceding and 2 preceding) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n150exp""", """a1""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by paygrade, salary, bonus, commision
rows between unbounded preceding and 2 preceding) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n150exp""", """a2""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by paygrade, salary, bonus, commision
rows between unbounded preceding and current row) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n150exp""", """a3""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by paygrade, salary, bonus, commision
rows between unbounded preceding and unbounded following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n150exp""", """a4""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by paygrade, salary, bonus, commision
rows between unbounded preceding and 4 following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n150exp""", """a5""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by paygrade, salary, bonus, commision
rows between current row and current row) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n150exp""", """a6""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by paygrade, salary, bonus, commision
rows between current row and unbounded following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n150exp""", """a7""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by paygrade, salary, bonus, commision
rows between current row and 4 following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n150exp""", """a8""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by paygrade, salary, bonus, commision
rows between 4 preceding and current row ) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n150exp""", """a9""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by paygrade, salary, bonus, commision
rows between 4 preceding and unbounded following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n150exp""", """a10""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by paygrade, salary, bonus, commision
rows between 4 following and unbounded following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n150exp""", """a11""")
    
    #order reversed.
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by paygrade, salary, bonus, commision
rows between 4 following and 5 following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n150exp""", """a12""")
    
    _testmgr.testcase_end(desc)

def test059(desc="""N151"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN151
 
    # a12.12: 4 columns
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
min(salary) over
(order by num,sum(paygrade) asc,
salary asc, bonus, commision asc
ROWS current row) as rank
from ee1 where deptnum < 5
group by num, paygrade, salary, bonus, commision, dateofbirth, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a1""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary, bonus,
sum(salary) over
(order by num, max(paygrade) desc,
salary asc, bonus desc, commision asc
ROWS current row) as rank
from ee1 where deptnum < 5
group by num,paygrade, salary, bonus, commision, dateofbirth, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a2""")
    
    # a12.14: 5 columns
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth
rows between 5 preceding and 2 preceding) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a3""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth
rows between unbounded preceding and 2 preceding) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a4""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth
rows between unbounded preceding and current row) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a5""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth
rows between unbounded preceding and unbounded following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a6""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth
rows between unbounded preceding and 5 following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a7""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth
rows between current row and current row) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a8""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth
rows between current row and unbounded following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a9""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth
rows between current row and 4 following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a10""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth
rows between 5 preceding and current row) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a11""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth
rows between 5 preceding and unbounded following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a12""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth
rows between 5 preceding and 4 following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a13""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth
rows between 5 following and unbounded following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a14""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth
rows between 5 following and 6 following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a15""")
    
    # a12.15: 5 columns
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
min(salary) over
(order by num, sum(paygrade) asc,
salary asc, bonus, commision asc, dateofbirth
ROWS current row) as rank
from ee1 where deptnum < 5
group by num,paygrade, salary, bonus, commision, dateofbirth, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a16""")
    
    # a12.16: 5 columns
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary, bonus,
sum(salary) over
(order by num, max(paygrade) desc,
salary asc, bonus desc, commision asc, dateofbirth desc
ROWS current row) as rank
from ee1 where deptnum < 5
group by num,paygrade, salary, bonus, commision, dateofbirth, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n151exp""", """a17""")
    
    _testmgr.testcase_end(desc)

def test060(desc="""N152"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN152
 
    # a12.17: sort 6 columns: all default
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth, deptnum
rows between 5 preceding and 2 preceding) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n152exp""", """a1""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth, deptnum
rows between unbounded preceding and 2 preceding) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n152exp""", """b1""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth, deptnum
rows between unbounded preceding and unbounded following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n152exp""", """a2""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth, deptnum
rows between unbounded preceding and 4 following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n152exp""", """a3""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth, deptnum
rows between current row and current row) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n152exp""", """a4""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth, deptnum
rows between current row and unbounded following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n152exp""", """a5""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth, deptnum
rows between 4 preceding and current row ) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n152exp""", """a6""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth, deptnum
rows between 4 preceding and unbounded following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n152exp""", """a7""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth, deptnum
rows between 4 preceding and 10 following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n152exp""", """a8""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth, deptnum
rows between 4 following and unbounded following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n152exp""", """a9""")
    
    stmt = """select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, paygrade, salary, bonus, commision, dateofbirth, deptnum
rows between 4 following and 5 following) as rank
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n152exp""", """a10""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by num, sum(paygrade) asc,
salary asc, bonus , commision ascending, dateofbirth, deptnum ASC
ROWS current row) as rank
from ee1 where deptnum < 5
group by num, paygrade, salary, bonus, commision, dateofbirth, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n152exp""", """a11""")
    
    stmt = """select paygrade, cast(salary as decimal(9,2)) as salary, bonus,
max(salary) over
(order by num, sum(paygrade) desc,
salary asc, bonus desc, commision asc, dateofbirth desc, deptnum
ROWS current row) as rank
from ee1 where deptnum < 5
group by num,paygrade, salary, bonus, commision, dateofbirth, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n152exp""", """a12""")
    
    _testmgr.testcase_end(desc)

def test061(desc="""N199"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN199
 
    stmt = """prepare xx from
select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between unbounded preceding and current row) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test062(desc="""N200"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN200
 
    stmt = """prepare xx from
select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between unbounded  preceding and 5 preceding) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test063(desc="""N201"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """prepare xx from
select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between unbounded  preceding and current row) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test064(desc="""N202"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """prepare xx from
select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between unbounded  preceding and unbounded following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test065(desc="""N203"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """prepare xx from
select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between unbounded  preceding and 5 following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test066(desc="""N204"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """prepare xx from
select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between current row and current row) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test067(desc="""N205"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """prepare xx from
select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
avg(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between current row and unbounded  following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test068(desc="""N206"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """prepare xx from
select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between current row and 5 following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test069(desc="""N207"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """prepare xx from
select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between 8 preceding and 5 preceding) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test070(desc="""N208"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """prepare xx from
select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between 5 preceding and current row) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test071(desc="""N209"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """prepare xx from
select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
stddev(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between 5 preceding and unbounded following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test072(desc="""N210"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """prepare xx from
select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between 5 preceding and 5 following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test073(desc="""N211"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """prepare xx from
select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
max(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between 5 following and 10 following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test074(desc="""N212"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """prepare xx from
select ee1.deptnum, copayment, substr(insname,1,12) as insname,insurance.num,
avg(copayment) over (order by insurance.num, sum(copayment) asc, copayment, insname
rows between 5 following and unbounded following) as MaxCoPayment,
dense_rank() over (order by insurance.num, sum(copayment) asc, copayment, insname)
as DenseRank
from ee1, insurance
where ee1.num = insurance.num
and coverage > 2000
and ee1.deptnum NOT in (1,3)
group by insurance.num,ee1.deptnum, copayment, insname
order by insurance.num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test075(desc="""N213"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
  
    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
 
    #tests for MVs
 
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary,num
ROWS UNBOUNDED PRECEDING) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n213exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n213exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test076(desc="""N214"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary,num
ROWS 4 PRECEDING) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n214exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n214exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test077(desc="""N215"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
 
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary
ROWS current row) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n215exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n215exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test078(desc="""N216"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary
ROWS 0 PRECEDING) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n216exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n216exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test079(desc="""N217"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary,num
ROWS unbounded PRECEDING) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n217exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n217exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test080(desc="""N218"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary,num
ROWS 478956 PRECEDING) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n218exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n218exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test081(desc="""N219"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary,num
ROWS between unbounded PRECEDING and 3 preceding) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n219exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n219exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test082(desc="""N220"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary,num
ROWS between unbounded PRECEDING and current row) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n220exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n220exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test083(desc="""N221"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
 
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary
ROWS between unbounded PRECEDING and unbounded following) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n221exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n221exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test084(desc="""N222"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary,num
ROWS between unbounded PRECEDING and 4 following) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n222exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n222exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test085(desc="""N223"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary
ROWS between current row and current row) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n223exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n223exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test086(desc="""N224"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)

    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary,num
ROWS between current row and unbounded following) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n224exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n224exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test087(desc="""N225"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary,num
ROWS between current row and 5 following) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n225exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n225exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test088(desc="""N226"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary,num
ROWS between 5 preceding and 3 preceding) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n226exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n226exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test089(desc="""N227"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary
ROWS between 4 preceding and 6 following) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n227exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n227exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test090(desc="""N228"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary,num
ROWS between 4 preceding and current row) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n228exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n228exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test091(desc="""N229"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary,num
ROWS between 4 preceding and unbounded following) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n229exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n229exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test092(desc="""N230"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary
ROWS between 4 following and 6 following) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n230exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n230exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test093(desc="""N231"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return

    loaddata._init(_testmgr)
    
    stmt = """create mv mv_olap_2010
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary,num
ROWS between 3 following and unbounded following) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv mv_olap_2010, refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from mv_olap_2010 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n231exp""", """a1""")
    
    stmt = """select salary, deptnum, num from mv_olap_2010
group by salary, deptnum, num
order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n231exp""", """a2""")
    
    stmt = """drop mv mv_olap_2010;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test094(desc="""N232"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return

    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return
    
    loaddata._init(_testmgr)
  
    #  MV with OLAP ORDER BY clause  
    stmt = """create mv t1_a01s17
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (order by sum(bonus),deptnum,salary,num
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as STDDEV
from ee1
where salary > 2500
group by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a01s17,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a01s17 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a01s17""")
    
    stmt = """drop mv t1_a01s17;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s5
recompute
initialize on create
store by (num)
as
select num, deptnum, cast(commision as int) as commision,
cast(bonus as numeric(5,0)) as bonus,
rank() over (order by commision+bonus,deptnum) as rank from ee1
where (num,deptnum) < (10,5);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s5,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select deptnum, commision, bonus, rank from t1_a02s5
order by commision, bonus, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s5""")
    
    stmt = """drop mv t1_a02s5;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s7
recompute
initialize on create
store by (num)
as
select num, deptnum, cast(salary - bonus as int) as sb,
rank() over (order by salary - bonus) as rank from ee1
where salary - bonus < 50000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s7,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s7 order by rank, sb, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s7""")
    
    stmt = """drop mv t1_a02s7;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s8
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, bonus*1.1 as bonus,
rank() over (order by deptnum, paygrade, bonus*1.1) as rank
from ee1 where bonus is not NULL and bonus < 2500;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s8,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s8 order by deptnum, paygrade, bonus, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s8""")
    
    stmt = """drop mv t1_a02s8;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s9
recompute
initialize on create
store by (num)
as
select num, deptnum, cast((salary/bonus) as decimal(7,0)) as bonus,
rank() over (order by cast((salary/bonus) as decimal(7,0))) as rank
from ee1 where salary/bonus > 20.0;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s9,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s9 order by rank, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s9""")
    
    stmt = """drop mv t1_a02s9;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s10
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, bonus,
rank() over (order by paygrade**2, bonus) as rank from ee1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s10,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s10 order by rank, paygrade, bonus, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s10""")
    
    stmt = """drop mv t1_a02s10;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s15
recompute
initialize on create
store by (num)
as
select num, deptnum, commision, bonus,
rank() over (order by case when commision > bonus
then salary*-0.8 else salary*1.2 end) as rank
from ee1 where deptnum in (select row_number() over
(order by salary-bonus asc) from ee1) and deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s15,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s15 order by rank, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s15""")
    
    stmt = """drop mv t1_a02s15;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s16
recompute
initialize on create
store by (num)
as
select num, deptnum, salary,
rank() over (order by (select count(deptnum) from ee1), salary) as rank
from ee1 where deptnum = (select count(deptnum)
over (order by salary rows current row)
from ee1 where salary > 90000 );"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s16,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s16 order by rank, salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s16""")
    
    stmt = """drop mv t1_a02s16;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s18
recompute
initialize on create
store by (num)
as
select num, deptnum, bonus, max(bonus) as maxbonus,
rank() over (order by paygrade, max(salary)*1.2, min(commision) desc)
as rank from ee1 where commision is NULL
group by paygrade, num, deptnum, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s18,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s18 order by salary, bonus, commision desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s18""")
    
    stmt = """drop mv t1_a02s18;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s19
recompute
initialize on create
store by (num)
as
select num, deptnum, bonus, max(bonus) as maxbonus,
rank() over (order by paygrade, max(bonus)+min(commision)) as rank
from ee1 where commision is NULL
group by paygrade, bonus, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s19,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s19 order by bonus, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s19""")
    
    stmt = """drop mv t1_a02s19;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s20
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, bonus,
rank() over (order by min(commision)+bonus) as rank
from ee1 where bonus > 0.0
group by num, deptnum, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s20,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s20 order by rank, bonus, paygrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s20""")
    
    stmt = """drop mv t1_a02s20;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s21
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, bonus,
rank() over (order by min(paygrade)+bonus*1.1) as rank
from ee1 where deptnum < 5 and paygrade > 7
group by num, deptnum, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s21,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s21;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s21""")
    
    stmt = """drop mv t1_a02s21;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s22
recompute
initialize on create
store by (num)
as
select all num, deptnum, paygrade, bonus,
rank() over (order by max(salary)/2,paygrade,bonus) as rank
from ee1 where paygrade < 5
group by num, deptnum, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s22,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s22 order by rank, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s22""")
    
    stmt = """drop mv t1_a02s22;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s24
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade,
rank() over (order by num asc,lastname desc,firstname ascending,gender descending,deptnum,paygrade,salary,bonus,commision,dateofbirth) as rank from ee1
where salary <  bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s24,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s24;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s24""")
    
    stmt = """drop mv t1_a02s24;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s26
recompute
initialize on create
store by (num)
as
select num, firstname, lastname, deptnum,
rank() over (order by max(num) asc,min(deptnum),avg(paygrade) desc,
cast(sum(salary) as int),count(commision)) as rank
from ee1 where deptnum between 3 and 5
group by num, firstname, lastname, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s26,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s26 order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s26""")
    
    stmt = """drop mv t1_a02s26;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s27
recompute
initialize on create
store by (num)
as
select num, deptnum, salary,
rank() over (partition by salary order by
max(num)+min(deptnum)+avg(paygrade)*sum(salary) asc) as rank
from ee1 where deptnum between 3 and 5
group by salary, paygrade, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s27,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s27 order by salary, rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s27""")
    
    stmt = """drop mv t1_a02s27;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s28
recompute
initialize on create
store by (num)
as
select num, firstname, deptnum,
cast(num*deptnum*paygrade+salary-commision as integer) as r1,
rank() over (order by
cast(num*deptnum*paygrade+salary-commision as integer) desc) as rank
from ee1 where deptnum between 3 and 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s28,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select firstname, deptnum, r1, rank from t1_a02s28
order by rank, r1 desc, firstname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s28""")
    
    stmt = """drop mv t1_a02s28;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a02s30
recompute
initialize on create
store by (num)
as
select num, deptnum, lastname,
max(firstname) as mfirst, min(gender) as mgen,
cast(rank() over (order by max(firstname), min(gender)) as smallint)
as rank from ee1
where deptnum < 5
group by deptnum, lastname, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a02s30,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a02s30 order by rank, lastname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a02s30""")
    
    stmt = """drop mv t1_a02s30;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a04s11
recompute
initialize on create
store by (num)
as
select num, paygrade, gender,
dense_rank() over (order by count(distinct paygrade),gender) as rank from ee1
group by num, paygrade, gender;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a04s11,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a04s11 order by rank, gender, paygrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a04s11""")
    
    stmt = """drop mv t1_a04s11;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a04s14
recompute
initialize on create
store by (num)
as
select num, deptnum, commision, bonus,
dense_rank() over (order by case when commision*1.0 > bonus
then commision else bonus end) as rank
from ee1 where deptnum in (2,4,8,0,6);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a04s14,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a04s14 order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a04s14""")
    
    stmt = """drop mv t1_a04s14;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s1
recompute
initialize on create
store by (num)
as
select num, paygrade+3 as paygrade, cast(salary as decimal(9,2)) as salary,
avg(salary) over (order by paygrade+3, salary, num ROWS unbounded preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s1,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a07s1 order by rank, paygrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s1""")
    
    stmt = """drop mv t1_a07s1;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s2
recompute
initialize on create
store by (num)
as
select num, deptnum*paygrade as dgrade, cast(salary as decimal(9,2)) as salary,
count(salary) over (order by salary, deptnum*paygrade, num ROWS 3 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s2,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a07s2 order by rank, salary, dgrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s2""")
    
    stmt = """drop mv t1_a07s2;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s3
recompute
initialize on create
store by (num)
as
select num, cast(salary/paygrade as numeric(7,2)) as salgrade,
salary, min(salary)
over (order by cast(salary/paygrade as decimal(7,2)), salary asc, num
ROWS CURRENT ROW)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s3,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a07s3 order by rank, salgrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s3""")
    
    stmt = """drop mv t1_a07s3;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s4
recompute
initialize on create
store by (num)
as
select num, paygrade-2 as paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over (order by paygrade-2,num
ROWS between unbounded preceding and 5 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s4,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a07s4 order by rank, salary, paygrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s4""")
    
    stmt = """drop mv t1_a07s4;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s5
recompute
initialize on create
store by (num)
as
select num, paygrade, cast(paygrade**2 as integer) as pay2, salary,
sum(salary) over (order by salary, paygrade**2, num
ROWS between unbounded preceding and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s5,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a07s5 order by rank, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s5""")
    
    stmt = """drop mv t1_a07s5;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s6
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, salary,
stddev(salary) over (order by min(paygrade), salary, deptnum, num
ROWS between 1 preceding and current row)
as rank from ee1 where deptnum < 5
group by paygrade, salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s6,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a07s6 order by rank, salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s6""")
    
    stmt = """drop mv t1_a07s6;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s9
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
count(salary) over (order by sum(paygrade) asc, max(paygrade) desc
ROWS between current row and current row)
as rank from ee1 where deptnum < 5
group by deptnum, paygrade, salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s9,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a07s9 order by paygrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s9""")
    
    stmt = """drop mv t1_a07s9;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s12
recompute
initialize on create
store by (num)
as
select num, paygrade, cast(salary as decimal(9,2)) as salary,
sum(salary+bonus) over (order by deptnum,gender,paygrade,salary
ROWS CURRENT ROW)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s12,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a07s12 order by rank, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s12""")
    
    stmt = """drop mv t1_a07s12;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s13
recompute
initialize on create
store by (num)
as
select num, paygrade, cast(salary as decimal(9,2)) as salary,
stddev(salary-commision) over
(order by sum(deptnum),avg(paygrade),max(bonus), num
ROWS between unbounded preceding and 5 preceding)
as rank from ee1 where deptnum < 5
group by num, paygrade, salary, commision;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s13,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select paygrade, salary, rank from t1_a07s13 order by rank, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s13""")
    
    stmt = """drop mv t1_a07s13;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s14
recompute
initialize on create
store by (num)
as
select num, deptnum, cast(salary as decimal(9,2)) as salary,
variance(salary*1.1) over (order by salary, deptnum, num
ROWS between unbounded preceding and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s14,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a07s14 order by rank, salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s14""")
    
    stmt = """drop mv t1_a07s14;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s15
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, salary,
cast(avg(salary*paygrade) over (order by min(paygrade) asc, salary, deptnum, num
ROWS between 5 preceding and 2 preceding) as integer)
as rank from ee1 where deptnum < 5
group by paygrade, salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s15,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a07s15 order by paygrade, salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s15""")
    
    stmt = """drop mv t1_a07s15;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s18
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, salary, bonus,
min(salary) over (order by salary, avg(salary)+min(bonus) asc
ROWS between 5 preceding and current row)
as rank from ee1 where deptnum < 5
group by salary, bonus, paygrade, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s18,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select paygrade, salary, bonus, rank from t1_a07s18 order by rank, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s18""")
    
    stmt = """drop mv t1_a07s18;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s20
recompute
initialize on create
store by (num)
as
select num, firstname, salary**2+100 as salary,
max(salary) over (order by salary**2+100, firstname ROWS 1 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s20,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select firstname, salary, rank from t1_a07s20 order by 3,2,1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s20""")
    
    stmt = """drop mv t1_a07s20;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s32
recompute
initialize on create
store by (num)
as
select num, paygrade, salary, bonus,
cast(sum(salary*2)
over (order by paygrade,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (order by paygrade,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(min(bonus*2.0)
over (order by paygrade,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (order by paygrade,max(paygrade)
ROWS between 2 preceding and current row) as integer) as maxs,
cast(stddev(bonus*paygrade)
over (order by paygrade,max(paygrade)
ROWS between 2 preceding and 2 preceding) as integer) as stds,
cast(variance(bonus*paygrade)
over (order by paygrade,max(paygrade)
ROWS between 2 preceding and 2 preceding) as integer) as vars,
rank() over (order by paygrade,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, bonus, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s32,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a07s32 order by rank, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s32""")
    
    stmt = """drop mv t1_a07s32;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s33
recompute
initialize on create
store by (num)
as
select num, paygrade, salary,
avg(salary) over (order by salary*1.0 rows current row) as avg1,
max(salary) over (order by salary*1.0 rows current row) as max1,
min(salary) over (order by salary*1.0 rows current row) as min1,
sum(salary) over (order by salary*1.0 rows current row) as sum1,
rank() over (order by salary*1.0) as rank
from ee1
where paygrade in (1,5,9,11,15);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s33,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select paygrade, salary, rank from t1_a07s33 order by salary, rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a07s33b""")
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a09s5
recompute
initialize on create
store by (num)
as
select num, cast(commision+bonus as int) as cb,
row_number() over (order by commision+bonus, deptnum asc) as rowcnt from ee1
where (num,deptnum) < (10,5);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a09s5,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select cb, rowcnt from t1_a09s5 order by rowcnt;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a09s5""")
    
    stmt = """drop mv t1_a09s5;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a09s7
recompute
initialize on create
store by (num)
as
select num, deptnum, cast(salary - bonus as int) as sb,
row_number() over (order by num, deptnum, salary - bonus) as rowcnt from ee1
where salary - bonus < 50000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a09s7,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a09s7 order by 1,2,3;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a09s7""")
    
    stmt = """drop mv t1_a09s7;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a09s21
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, bonus,
row_number() over (order by min(paygrade)+bonus*1.1) as rowcnt
from ee1 where deptnum < 5 and paygrade > 7
group by num, deptnum, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a09s21,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a09s21 order by 1,2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a09s21""")
    
    stmt = """drop mv t1_a09s21;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a09s22
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, bonus,
row_number() over (order by deptnum, paygrade, max(bonus)/2) as rowcnt
from ee1 where paygrade < 5
group by num, deptnum, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a09s22,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select deptnum, paygrade, bonus, rowcnt from t1_a09s22 order by rowcnt;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a09s22""")
    
    stmt = """drop mv t1_a09s22;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a09s27
recompute
initialize on create
store by (num)
as
select num, firstname, lastname, deptnum, row_number() over (order by
max(num)+min(deptnum)+avg(paygrade)*sum(salary) asc, firstname, lastname)
as rowcnt
from ee1 where deptnum between 3 and 5
group by deptnum, firstname, lastname, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a09s27,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a09s27 order by rowcnt;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a09s27""")
    
    stmt = """drop mv t1_a09s27;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a09s28
recompute
initialize on create
store by (num)
as
select num, firstname, deptnum,
cast(num*deptnum*paygrade+salary-commision as integer) as r1,
row_number() over (order by
cast(num*deptnum*paygrade+salary-commision as integer) desc, num asc) as rowcnt
from ee1 where deptnum between 3 and 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a09s28,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a09s28 order by rowcnt, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n232exp""", """a09s28""")
    
    stmt = """drop mv t1_a09s28;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test095(desc="""N233"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return
 
    loaddata._init(_testmgr)
   
    # MV with OLAP partition ORDER BY clause 
    stmt = """create mv t2_a02s17
recompute
initialize on create
store by (num)
as
select num, salary, sum(bonus) as sb,
stddev(salary) over (partition by salary order by sum(bonus),deptnum,
salary ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as STDDEV
from ee1
where salary > 2500
group by salary, bonus, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s17,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select salary, sb, stddev from t2_a02s17 order by salary, sb;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s17""")
    
    stmt = """drop mv t2_a02s17;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s5
recompute
initialize on create
store by (num)
as
select num, deptnum, cast(commision as int) as commision,
cast(bonus as numeric(5,0)) as bonus,
rank() over (partition by salary order by commision+bonus,deptnum)
as rank from ee1
where (num,deptnum) < (10,5);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s5,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s5 order by rank, bonus, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s5""")
    
    stmt = """drop mv t2_a02s5;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s7
recompute
initialize on create
store by (num)
as
select num, deptnum, cast(salary - bonus as int) as sb,
rank() over (partition by salary order by salary - bonus) as rank from ee1
where salary - bonus < 50000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s7,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s7 order by rank, sb, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s7""")
    
    stmt = """drop mv t2_a02s7;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s8
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, bonus*1.1 as bonus,
rank() over (partition by salary order by deptnum, paygrade, bonus*1.1) as rank
from ee1 where bonus is not NULL and bonus < 2500;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s8,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s8 order by rank, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s8""")
    
    stmt = """drop mv t2_a02s8;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s9
recompute
initialize on create
store by (num)
as
select num, deptnum, cast((salary/bonus) as decimal(7,0)) as bonus,
rank() over (partition by salary
order by cast((salary/bonus) as decimal(7,0))) as rank
from ee1 where salary/bonus > 20.0;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s9,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s9 order by rank, bonus desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s9""")
    
    stmt = """drop mv t2_a02s9;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s10
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, bonus,
rank() over (partition by salary
order by paygrade**2, bonus) as rank from ee1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s10,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s10 order by rank, bonus, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s10""")
    
    stmt = """drop mv t2_a02s10;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s15
recompute
initialize on create
store by (num)
as
select num, deptnum, commision, bonus,
rank() over (partition by salary
order by case when commision > bonus
then salary*-0.8 else salary*1.2 end) as rank
from ee1 where deptnum in (select row_number() over
(partition by salary
order by salary-bonus asc) from ee1) and deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s15,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s15 order by rank, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s15""")
    
    stmt = """drop mv t2_a02s15;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s16
recompute
initialize on create
store by (num)
as
select num, deptnum, salary,
rank() over (partition by salary
order by (select count(deptnum) from ee1)) as rank
from ee1 where deptnum = (select count(deptnum)
over (partition by salary
order by salary rows current row)
from ee1 where salary > 90000 );"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s16,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s16 order by rank, salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s16""")
    
    stmt = """drop mv t2_a02s16;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s18
recompute
initialize on create
store by (num)
as
select num, deptnum, bonus, max(bonus) as maxbonus,
rank() over (partition by salary
order by paygrade, max(salary)*1.2, min(commision) desc)
as rank from ee1 where commision is NULL
group by salary,bonus, paygrade, deptnum, paygrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s18,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s18 order by maxbonus, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s18""")
    
    stmt = """drop mv t2_a02s18;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s19
recompute
initialize on create
store by (num)
as
select num, deptnum, bonus, max(bonus) as maxbonus,
rank() over (partition by salary
order by paygrade, max(bonus)+min(commision)) as rank
from ee1 where commision is NULL
group by salary, bonus, paygrade, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s19,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s19 order by maxbonus desc, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s19""")
    
    stmt = """drop mv t2_a02s19;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s20
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, bonus,
rank() over (partition by salary
order by min(commision)+bonus) as rank
from ee1 where bonus > 0.0
group by salary, bonus, paygrade, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s20,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s20 order by rank, bonus, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s20""")
    
    stmt = """drop mv t2_a02s20;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s21
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, bonus,
rank() over (partition by salary
order by min(paygrade)+bonus*1.1) as rank
from ee1 where deptnum < 5 and paygrade > 7
group by salary, bonus, paygrade, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s21,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s21 order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s21""")
    
    stmt = """drop mv t2_a02s21;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s22
recompute
initialize on create
store by (num)
as
select all num, deptnum, paygrade, bonus,
rank() over (partition by salary
order by max(salary)/2,paygrade,bonus) as rank
from ee1 where paygrade < 5
group by salary, bonus, paygrade, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s22,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s22 order by rank, bonus, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s22""")
    
    stmt = """drop mv t2_a02s22;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s24
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade,
rank() over (partition by salary
order by num asc,lastname desc,firstname ascending,gender descending,deptnum,paygrade,salary,bonus,commision,dateofbirth) as rank from ee1
where salary <  bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s24,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s24;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s24""")
    
    stmt = """drop mv t2_a02s24;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s26
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, commision, paygrade,
rank() over (partition by salary
order by max(num) asc,min(deptnum),avg(paygrade) desc,
cast(sum(salary) as int),count(commision)) as rank
from ee1 where deptnum between 3 and 5
group by salary, commision, paygrade, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s26,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s26 order by paygrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s26""")
    
    stmt = """drop mv t2_a02s26;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s27
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, rank() over (partition by salary
order by
max(num)+min(deptnum)+avg(paygrade)*sum(salary) asc) as rank
from ee1 where deptnum between 3 and 5
group by salary, bonus, paygrade, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s27,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a02s27 order by salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s27""")
    
    stmt = """drop mv t2_a02s27;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s28
recompute
initialize on create
store by (num)
as
select num, firstname, deptnum,
cast(num*deptnum*paygrade+salary-commision as integer) as r1,
rank() over (partition by salary
order by
cast(num*deptnum*paygrade+salary-commision as integer) desc) as rank
from ee1 where deptnum between 3 and 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s28,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select firstname, r1, rank from t2_a02s28 order by 3,2,1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s28""")
    
    stmt = """drop mv t2_a02s28;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a02s30
recompute
initialize on create
store by (num)
as
select salary, lastname,
max(firstname) as mfirst, min(gender) as mgen,
cast(rank() over (partition by salary
order by max(firstname), min(gender)) as smallint)
as rank, num from ee1
where deptnum < 5
group by salary, lastname, firstname, gender, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a02s30,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select salary, lastname, mfirst, mgen, rank
from t2_a02s30 order by salary, rank, lastname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a02s30""")
    
    stmt = """drop mv t2_a02s30;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a04s11
recompute
initialize on create
store by (num)
as
select num, paygrade, gender,
dense_rank() over (partition by salary
order by count(distinct paygrade),gender) as rank from ee1
group by salary, gender, paygrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a04s11,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a04s11 order by gender, paygrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a04s11""")
    
    stmt = """drop mv t2_a04s11;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a04s14
recompute
initialize on create
store by (num)
as
select num, deptnum, commision, bonus,
dense_rank() over (partition by salary
order by case when commision*1.0 > bonus
then commision else bonus end, deptnum, commision) as rank
from ee1 where deptnum in (2,4,8,0,6);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a04s14,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a04s14 order by rank, deptnum, commision;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a04s14""")
    
    stmt = """drop mv t2_a04s14;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s1
recompute
initialize on create
store by (num)
as
select num, paygrade+3 as paygrade, cast(salary as decimal(9,2)) as salary,
avg(salary) over (partition by salary
order by paygrade+3 ROWS unbounded preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s1,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a07s1 order by rank, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a07s1""")
    
    stmt = """drop mv t2_a07s1;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s2
recompute
initialize on create
store by (num)
as
select num, deptnum*paygrade as dgrade, cast(salary as decimal(9,2)) as salary,
count(salary) over (partition by salary
order by deptnum*paygrade, num ROWS 3 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s2,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a07s2 order by rank, salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a07s2""")
    
    stmt = """drop mv t2_a07s2;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s3
recompute
initialize on create
store by (num)
as
select num, cast(salary/paygrade as numeric(7,2)) as salgrade,
salary, min(salary)
over (partition by salary
order by cast(salary/paygrade as decimal(7,2)), salary asc
ROWS CURRENT ROW)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s3,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select salgrade, salary, rank from t2_a07s3 order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a07s3""")
    
    stmt = """drop mv t2_a07s3;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s5
recompute
initialize on create
store by (num)
as
select num, paygrade, cast(paygrade**2 as integer) as pay2, salary,
sum(salary) over (partition by salary
order by paygrade**2, gender, num
ROWS between unbounded preceding and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s5,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a07s5 order by salary, rank, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a07s5""")
    
    stmt = """drop mv t2_a07s5;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s9
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
count(salary) over (partition by salary
order by sum(paygrade) asc, max(paygrade) desc
ROWS between current row and current row)
as rank from ee1 where deptnum < 5
group by num, deptnum, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s9,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a07s9 order by paygrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a07s9""")
    
    stmt = """drop mv t2_a07s9;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s12
recompute
initialize on create
store by (num)
as
select num, paygrade, cast(salary as decimal(9,2)) as salary,
sum(salary+bonus) over (partition by salary
order by deptnum,gender,paygrade,salary
ROWS CURRENT ROW)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s12,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select paygrade, salary, rank from t2_a07s12 order by rank, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a07s12""")
    
    stmt = """drop mv t2_a07s12;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s14
recompute
initialize on create
store by (num)
as
select num, deptnum, cast(salary as decimal(9,2)) as salary,
variance(salary*1.1) over (partition by salary
order by paygrade
ROWS between unbounded preceding and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s14,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a07s14 order by salary, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a07s14""")
    
    stmt = """drop mv t2_a07s14;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s18
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
min(salary) over (partition by salary
order by avg(paygrade)+min(bonus)
ROWS between 5 preceding and current row)
as rank from ee1 where deptnum < 5
group by num, deptnum, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s18,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a07s18 order by rank, salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a07s18""")
    
    stmt = """drop mv t2_a07s18;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s20
recompute
initialize on create
store by (num)
as
select num, firstname, salary**2+100 as salary,
max(gender) over (partition by salary
order by salary**2+100, firstname ROWS 1 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s20,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a07s20 order by rank, salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a07s20""")
    
    stmt = """drop mv t2_a07s20;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s32
recompute
initialize on create
store by (num)
as
select num, paygrade, salary, bonus,
cast(sum(salary*2)
over (partition by salary
order by paygrade,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (partition by salary
order by paygrade,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(min(bonus*2.0)
over (partition by salary
order by paygrade,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (partition by salary
order by paygrade,max(paygrade)
ROWS between 2 preceding and current row) as integer) as maxs,
cast(stddev(bonus*paygrade)
over (partition by salary
order by paygrade,max(paygrade)
ROWS between 2 preceding and 2 preceding) as integer) as stds,
cast(variance(bonus*paygrade)
over (partition by salary
order by paygrade,max(paygrade)
ROWS between 2 preceding and 2 preceding) as integer) as vars,
rank() over (partition by salary
order by paygrade,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by salary, bonus, paygrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s32,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a07s32 order by rank, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a07s32""")
    
    stmt = """drop mv t2_a07s32;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s33
recompute
initialize on create
store by (num)
as
select num, paygrade, salary,
avg(salary) over (partition by salary
order by salary+1.0 rows current row) as avg1,
max(salary) over (partition by salary
order by salary-1.0 rows current row) as max1,
min(salary) over (partition by salary
order by salary*1.0 rows current row) as min1,
sum(salary) over (partition by salary
order by salary/1.0 rows current row) as sum1,
rank() over (partition by salary
order by salary**1.0) as rank
from ee1
where paygrade in (1,3,5,7,9);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a09s5
recompute
initialize on create
store by (num)
as
select num, deptnum, salary, cast(commision+bonus as int) as cb,
row_number() over (partition by salary
order by commision+bonus desc, deptnum asc) as rowcnt from ee1
where (num,deptnum) < (10,5);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a09s5,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select salary, cb, rowcnt from t2_a09s5
order by rowcnt desc, salary, cb;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a09s5""")
    
    stmt = """drop mv t2_a09s5;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a09s7
recompute
initialize on create
store by (num)
as
select num, deptnum, cast(salary - bonus as int) as sb,
row_number() over (partition by salary
order by salary - bonus, num) as rowcnt from ee1
where salary - bonus < 50000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a09s7,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a09s7 order by 1,2,3,4;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a09s7""")
    
    stmt = """drop mv t2_a09s7;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a09s21
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, bonus,
row_number() over (partition by salary
order by min(paygrade)+bonus*1.1) as rowcnt
from ee1 where deptnum < 5 and paygrade > 7
group by num, deptnum, paygrade, bonus, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a09s21,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a09s21 order by 1,2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a09s21""")
    
    stmt = """drop mv t2_a09s21;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a09s22
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, bonus,
row_number() over (partition by salary
order by deptnum, paygrade, max(bonus)/2, num) as rowcnt
from ee1 where paygrade < 5
group by salary, bonus, deptnum, paygrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a09s22,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a09s22 order by rowcnt, bonus, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a09s22""")
    
    stmt = """drop mv t2_a09s22;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a09s27
recompute
initialize on create
store by (num)
as
select num, firstname, lastname, deptnum,
row_number() over (partition by salary order by
max(num)+min(deptnum)+avg(paygrade)*sum(salary) asc) as rowcnt
from ee1 where deptnum between 3 and 5
group by num, firstname, lastname, deptnum, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a09s27,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select firstname, lastname, deptnum, rowcnt from t2_a09s27
order by rowcnt, firstname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a09s27""")
    
    stmt = """drop mv t2_a09s27;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a09s28
recompute
initialize on create
store by (num)
as
select num, firstname, deptnum,
cast(num*deptnum*paygrade+salary-commision as integer) as r1,
row_number() over (partition by salary order by
cast(num*deptnum*paygrade+salary-commision as integer) desc) as rowcnt
from ee1 where deptnum between 3 and 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a09s28,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a09s28 order by rowcnt, r1, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n233exp""", """a09s28""")
    
    stmt = """drop mv t2_a09s28;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test096(desc="""N234"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    loaddata._init(_testmgr)
   
    # views with OLAP ORDER BY 
    stmt = """create view t3_a02s17
as
select num, deptnum, salary, sum(bonus) as sb,
stddev(salary) over (partition by salary order by sum(bonus),deptnum,
salary, num ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as STDDEV
from ee1
where salary > 2500
group by num, deptnum, salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a02s17;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s17""")
    
    stmt = """drop view t3_a02s17;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s5
as
select num, deptnum, cast(commision as int) as commision,
cast(bonus as numeric(5,0)) as bonus,
rank() over (partition by salary order by commision+bonus,deptnum)
as rank from ee1
where (num,deptnum) < (10,5);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select commision, bonus, rank from t3_a02s5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s5""")
    
    stmt = """drop view t3_a02s5;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s7
as
select num, deptnum, cast(salary - bonus as int) as sb,
rank() over (partition by salary order by salary - bonus) as rank from ee1
where salary - bonus < 50000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a02s7 order by rank, sb, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s7""")
    
    stmt = """drop view t3_a02s7;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s8
as
select num, deptnum, paygrade, bonus*1.1 as bonus,
rank() over (partition by salary order by deptnum, paygrade, bonus*1.1)
as rank
from ee1 where bonus is not NULL and bonus < 2500;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select deptnum, paygrade, bonus, rank from t3_a02s8;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s8""")
    
    stmt = """drop view t3_a02s8;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s9
as
select num, deptnum, cast((salary/bonus) as decimal(7,0)) as bonus,
rank() over (partition by salary
order by cast((salary/bonus) as decimal(7,0))) as rank
from ee1 where salary/bonus > 20.0;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a02s9;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s9""")
    
    stmt = """drop view t3_a02s9;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s10
as
select num, deptnum, paygrade, bonus,
rank() over (partition by salary
order by paygrade**2, bonus) as rank from ee1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select paygrade, bonus, rank from t3_a02s10 order by paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s10""")
    
    stmt = """drop view t3_a02s10;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s15
as
select num, salary, commision, bonus,
rank() over (partition by salary
order by case when commision > bonus
then salary*-0.8 else salary*1.2 end) as rank
from ee1 where deptnum in (select row_number() over
(partition by salary
order by salary-bonus asc) from ee1) and deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select salary, commision, bonus, rank from t3_a02s15
order by salary, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s15""")
    
    stmt = """drop view t3_a02s15;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s16
as
select num, deptnum, salary,
rank() over (partition by salary
order by (select count(deptnum) from ee1), salary) as rank
from ee1 where deptnum = (select count(deptnum)
over (partition by salary
order by salary rows current row)
from ee1 where salary > 90000 );"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a02s16 order by rank, salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s16""")
    
    stmt = """drop view t3_a02s16;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s18
as
select num, deptnum, bonus, max(bonus) as maxbonus,
rank() over (partition by salary
order by paygrade, max(salary)*1.2, min(commision) desc)
as rank from ee1 where commision is NULL
group by num, deptnum, bonus, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a02s18;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s18""")
    
    stmt = """drop view t3_a02s18;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s19
as
select num, deptnum, bonus, max(bonus) as maxbonus,
rank() over (partition by salary
order by paygrade, max(bonus)+min(commision)) as rank
from ee1 where commision is NULL
group by salary, paygrade, bonus, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a02s19;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s19""")
    
    stmt = """drop view t3_a02s19;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s20
as
select num, salary, commision, bonus,
rank() over (partition by salary
order by min(commision)+bonus) as rank
from ee1 where bonus > 0.0
group by salary, commision, bonus, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select salary, commision, bonus, rank from t3_a02s20;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s20""")
    
    stmt = """drop view t3_a02s20;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s21
as
select num, deptnum, paygrade, bonus,
rank() over (partition by salary
order by min(paygrade)+bonus*1.1) as rank
from ee1 where deptnum < 5 and paygrade > 7
group by num, deptnum, paygrade, bonus, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a02s21;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s21""")
    
    stmt = """drop view t3_a02s21;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s22
as
select all salary, paygrade, bonus,
rank() over (partition by salary
order by max(salary)/2,paygrade,bonus) as rank, num
from ee1 where paygrade < 5
group by salary, paygrade, bonus, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select salary, paygrade, bonus from t3_a02s22;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s22""")
    
    stmt = """drop view t3_a02s22;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s24
as
select num, deptnum, paygrade,
rank() over (partition by salary
order by num asc,lastname desc,firstname ascending,gender descending,deptnum,paygrade,salary,bonus,commision,dateofbirth) as rank from ee1
where salary <  bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a02s24;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s24""")
    
    stmt = """drop view t3_a02s24;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s26
as
select num, firstname, lastname, deptnum,
rank() over (partition by salary
order by max(num) asc,min(deptnum),avg(paygrade) desc,
cast(sum(salary) as int),count(commision)) as rank
from ee1 where deptnum between 3 and 5
group by num, firstname, lastname, deptnum, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a02s26;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s26""")
    
    stmt = """drop view t3_a02s26;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s27
as
select num, firstname, lastname, deptnum, rank() over (partition by salary
order by
max(num)+min(deptnum)+avg(paygrade)*sum(salary) asc) as rank
from ee1 where deptnum between 3 and 5
group by num, firstname, lastname, deptnum, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a02s27;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s27""")
    
    stmt = """drop view t3_a02s27;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s28
as
select num, firstname, deptnum,
cast(num*deptnum*paygrade+salary-commision as integer) as r1,
rank() over (partition by salary
order by
cast(num*deptnum*paygrade+salary-commision as integer) desc) as rank
from ee1 where deptnum between 3 and 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a02s28;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s28""")
    
    stmt = """drop view t3_a02s28;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a02s30
as
select lastname,
max(firstname) as mfirst, min(gender) as mgen,
cast(rank() over (partition by salary
order by max(firstname), min(gender)) as smallint)
as rank from ee1
where deptnum < 5
group by num, deptnum, lastname, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a02s30 order by mfirst, mgen, lastname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """t03s30""")
    
    stmt = """drop view t3_a02s30;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a04s11
as
select salary, gender, paygrade,
dense_rank() over (partition by salary
order by count(distinct paygrade),gender) as rank from ee1
group by salary, gender, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a04s11;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a04s11""")
    
    stmt = """drop view t3_a04s11;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a04s14
as
select num, deptnum, commision, bonus,
dense_rank() over (partition by salary
order by case when commision*1.0 > bonus
then commision else bonus end) as rank
from ee1 where deptnum in (2,4,8,0,6);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a04s14;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a04s14""")
    
    stmt = """drop view t3_a04s14;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s1
as
select paygrade+3 as paygrade, cast(salary as decimal(9,2)) as salary,
avg(salary) over (partition by salary
order by paygrade+3 ROWS unbounded preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s1;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a07s1""")
    
    stmt = """drop view t3_a07s1;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s2
as
select deptnum*paygrade as dgrade, cast(salary as decimal(9,2)) as salary,
count(salary) over (partition by salary
order by deptnum*paygrade ROWS 3 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a07s2""")
    
    stmt = """drop view t3_a07s2;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s3
as
select cast(salary/paygrade as numeric(7,2)) as salgrade, salary, min(salary)
over (partition by salary
order by cast(salary/paygrade as decimal(7,2)), salary asc
ROWS CURRENT ROW)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s3;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a07s3""")
    
    stmt = """drop view t3_a07s3;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s4
as
select paygrade-2 as paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over (partition by salary
order by paygrade-2
ROWS between unbounded preceding and 5 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s4;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a07s4""")
    
    stmt = """drop view t3_a07s4;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s5
as
select num, paygrade, cast(paygrade**2 as integer) as pay2, salary,
sum(salary) over (partition by salary
order by paygrade**2, num
ROWS between unbounded preceding and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a07s5""")
    
    stmt = """drop view t3_a07s5;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s6
as
select salary, paygrade,
stddev(salary) over (partition by salary
order by min(paygrade) asc, salary asc, deptnum asc
ROWS between 5 preceding and 2 preceding)
as rank from ee1 where deptnum < 5
group by salary, paygrade, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s6 order by paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a07s6""")
    
    stmt = """drop view t3_a07s6;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s9
as
select cast(salary as decimal(9,2)) as salary, paygrade,
count(salary) over (partition by salary
order by sum(paygrade) asc, max(paygrade) desc
ROWS between current row and current row)
as rank from ee1 where deptnum < 5
group by salary, paygrade, deptnum;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s9 order by paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a07s9""")
    
    stmt = """drop view t3_a07s9;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s12
as
select cast(salary as decimal(9,2)) as salary, paygrade,
sum(salary+bonus) over (partition by salary
order by salary, paygrade ROWS CURRENT ROW)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s12 order by salary, rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a07s12""")
    
    stmt = """drop view t3_a07s12;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s13
as
select cast(salary as decimal(9,2)) as salary, paygrade,
stddev(salary*100.00) over (partition by salary
order by sum(deptnum),avg(paygrade),max(bonus)
ROWS between unbounded preceding and current row)
as rank from ee1 where deptnum < 5
group by salary, paygrade, commision;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s13 order by paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a07s13""")
    
    stmt = """drop view t3_a07s13;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s14
as
select num, deptnum, cast(salary as decimal(9,2)) as salary,
variance(salary*1.1) over (partition by salary
order by paygrade
ROWS between unbounded preceding and current row)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s14 order by salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a07s14""")
    
    stmt = """drop view t3_a07s14;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s15
as
select salary, paygrade,
avg(salary*paygrade) over (partition by salary
order by min(paygrade) asc, salary, paygrade
ROWS between 5 preceding and 2 preceding)
as rank from ee1 where deptnum < 5
group by salary, paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s15;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a07s15""")
    
    stmt = """drop view t3_a07s15;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s18
as
select cast(salary as decimal(9,2)) as salary, paygrade,
min(salary) over (partition by salary
order by avg(paygrade)+min(bonus)
ROWS between 5 preceding and current row)
as rank from ee1 where deptnum < 5
group by salary, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s18;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a07s18""")
    
    stmt = """drop view t3_a07s18;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s20
as
select num, firstname, salary**2+100 as salary,
max(gender) over (partition by salary
order by salary**2+100, firstname ROWS 1 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select firstname, salary, rank from t3_a07s20;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a07s20""")
    
    stmt = """drop view t3_a07s20;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s32
as
select paygrade, salary, bonus,
cast(sum(salary*2)
over (partition by salary
order by salary,max(paygrade)
ROWS unbounded preceding) as integer) as sums,
cast(avg(paygrade+10)
over (partition by salary
order by salary,max(paygrade)
ROWS 2 preceding) as integer) as avgs,
cast(min(bonus*2.0)
over (partition by salary
order by salary,max(paygrade)
ROWS current row) as integer) as mins,
cast(max(bonus/paygrade)
over (partition by salary
order by salary,max(paygrade)
ROWS between 2 preceding and current row) as integer) as maxs,
cast(stddev(bonus*paygrade)
over (partition by salary
order by salary,max(paygrade)
ROWS between 2 preceding and 2 preceding) as integer) as stds,
cast(variance(bonus*paygrade)
over (partition by salary
order by salary,max(paygrade)
ROWS between 2 preceding and 2 preceding) as integer) as vars,
rank() over (partition by salary
order by salary,max(paygrade)) as rank
from ee1 where deptnum between 3 and 5 and bonus is not NULL
group by paygrade, salary, paygrade, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s32 order by salary, rank, sums;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a07s32""")
    
    stmt = """drop view t3_a07s32;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s33
as
select num, paygrade, salary,
avg(salary) over (partition by salary
order by salary+1.0 rows current row) as avg1,
max(salary) over (partition by salary
order by salary-1.0 rows current row) as max1,
min(salary) over (partition by salary
order by salary*1.0 rows current row) as min1,
sum(salary) over (partition by salary
order by salary/1.0 rows current row) as sum1,
rank() over (partition by salary
order by salary**1.0) as rank
from ee1
where paygrade in (1,3,5,7,9);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_error_msg(output)
    
    stmt = """create view t3_a09s5 as
select salary, cast(commision+bonus as int) as cb,
row_number() over (partition by salary
order by commision+bonus desc) as rowcnt from ee1
where (num,deptnum) < (10,5);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a09s5 order by rowcnt desc, salary, cb;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a09s5""")
    
    stmt = """drop view t3_a09s5;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a09s5a as
select num, deptnum, salary, cast(commision+bonus as int) as cb,
row_number() over (
order by commision+bonus desc, num, deptnum asc) as rowcnt from ee1
where (num,deptnum) < (10,5);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a09s5a;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a09s5a""")
    
    stmt = """drop view t3_a09s5a;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a09s7
as
select row_number()
over (partition by salary order by salary - bonus) as rowcnt,
cast(salary - bonus as int) as sb, salary from ee1
where salary - bonus < 50000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a09s7;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a09s7""")
    
    stmt = """drop view t3_a09s7;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a09s21
as
select num, deptnum, paygrade, bonus,
row_number() over (partition by salary
order by min(paygrade)+bonus*1.1, deptnum, num) as rowcnt
from ee1 where deptnum < 5 and paygrade > 7
group by num, deptnum, paygrade, bonus, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a09s21;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a09s21""")
    
    stmt = """drop view t3_a09s21;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a09s22
as
select num, deptnum, paygrade, bonus,
row_number() over (partition by salary
order by deptnum, paygrade, max(bonus)/2) as rowcnt
from ee1 where paygrade < 5
group by num, deptnum, paygrade, bonus, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select paygrade, bonus, rowcnt from t3_a09s22;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a09s22""")
    
    stmt = """drop view t3_a09s22;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a09s27
as
select num, firstname, lastname, deptnum,
row_number() over (partition by salary order by
max(num)+min(deptnum)+avg(paygrade)*sum(salary) asc) as rowcnt
from ee1 where deptnum between 3 and 5
group by num, firstname, lastname, deptnum, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a09s27 order by rowcnt, firstname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a09s27""")
    
    stmt = """drop view t3_a09s27;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a09s28
as
select num, firstname, deptnum,
cast(num*deptnum*paygrade+salary-commision as integer) as r1,
row_number() over (partition by salary order by
cast(num*deptnum*paygrade+salary-commision as integer) desc) as rowcnt
from ee1 where deptnum between 3 and 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a09s28;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n234exp""", """a09s28""")
    
    stmt = """drop view t3_a09s28;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test097(desc="""N235"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return
 
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s10
recompute
initialize on create
store by (num)
as
select num, stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over
(order by stddev(paygrade)+3 asc, num asc ROWS unbounded preceding)
as rank from ee1 where deptnum < 5
group by paygrade, salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s10,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select s, salary, rank from t1_a07s10 order by salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n235exp""", """t1_a07s10""")
    
    stmt = """drop mv t1_a07s10;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t1_a07s11
recompute
initialize on create
store by (num)
as
select num,
variance(deptnum*paygrade) as v, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by salary, variance(deptnum*paygrade), num ROWS 3 preceding)
as rank from ee1 where deptnum < 5
group by salary, paygrade, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t1_a07s11,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t1_a07s11 order by salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n235exp""", """t1_a07s11""")
    
    stmt = """drop mv t1_a07s11;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s10
recompute
initialize on create
store by (num)
as
select num, stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (partition by salary
order by stddev(paygrade)+3 asc, num asc ROWS unbounded preceding)
as rank from ee1 where deptnum < 5
group by paygrade, salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s10,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select s, salary, rank from t2_a07s10 order by salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n235exp""", """t2_a07s10""")
    
    stmt = """drop mv t2_a07s10;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s10
as
select stddev(paygrade)+3 as s, cast(salary as decimal(9,2)) as salary,
min(salary) over (partition by salary
order by stddev(paygrade)+3 asc ROWS unbounded preceding)
as rank from ee1 where deptnum < 5 group by paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s10;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n235exp""", """t3_a07s10""")
    
    stmt = """drop view t3_a07s10;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """create view t3_a07s11
as
select num,
variance(deptnum*paygrade) as v, cast(salary as decimal(9,2)) as salary,
max(salary) over (partition by salary
order by salary, variance(deptnum*paygrade), num ROWS 3 preceding)
as rank from ee1 where deptnum < 5
group by paygrade, deptnum, salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t3_a07s11;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n235exp""", """t3_a07s11""")
    
    stmt = """drop view t3_a07s11;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s4
recompute
initialize on create
store by (num)
as
select num, paygrade-2 as paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over (partition by salary
order by salary, paygrade-2, num
ROWS between unbounded preceding and 5 preceding)
as rank from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s4,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a07s4 order by salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n235exp""", """t2_a07s4""")
    
    stmt = """drop mv t2_a07s4;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s6
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, salary,
stddev(salary) over (partition by salary
order by min(paygrade), salary, deptnum
ROWS between 5 preceding and 2 preceding)
as rank from ee1 where deptnum < 5
group by num, deptnum, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s6,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a07s6 order by salary, paygrade, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n235exp""", """t2_a07s6""")
    
    stmt = """drop mv t2_a07s6;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s13
recompute
initialize on create
store by (num)
as
select num, paygrade, cast(salary as decimal(9,2)) as salary,
stddev(salary-commision) over (partition by salary
order by sum(deptnum),avg(paygrade),max(bonus)
ROWS between unbounded preceding and 5 preceding)
as rank from ee1 where deptnum < 5
group by num, paygrade, salary, commision;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s13,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a07s13 order by salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n235exp""", """t2_a07s13""")
    
    stmt = """drop mv t2_a07s13;"""
    output = _dci.cmdexec(stmt)
    
    loaddata._init(_testmgr)
    
    stmt = """create mv t2_a07s15
recompute
initialize on create
store by (num)
as
select num, deptnum, paygrade, salary,
avg(salary*paygrade) over (partition by salary
order by min(paygrade) asc, salary, deptnum, num
ROWS between 5 preceding and 2 preceding)
as rank from ee1 where deptnum < 5
group by num, deptnum, paygrade, salary;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t2_a07s15,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t2_a07s15 order by salary, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 12)
    
    stmt = """drop mv t2_a07s15;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test098(desc="""N236 MV with OLAP order by ...."""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return
 
    stmt = """drop table ins;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """create table ins
(
Num           integer unsigned no default  not null not droppable ,
InsName       char(18) ,
Coverage      largeint ,
CoPayment     numeric(5,2)) no partition;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    stmt = """insert into ins values
(1, 'BlueCross', 500000, 50.50),
(5, 'Kaiser', 332000, 40.55),
(6, 'BlueCross', 340000, 40.40),
(11, 'BlueCross', 500000, 25.25),
(15, 'Kaiser', 332000, 35.35),
(16, 'BlueCross', 340000, 55.55),
(19, 'BlueCross', 340000, 55.55),
(21, 'BlueCross', 500000, 44.33),
(25, 'Kaiser', 332000, 35.35),
(26, 'BlueCross', 340000, 44.33);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 10)
    
    stmt = """create mv t05s01
recompute initialize on create as
select copayment, insname,
max(copayment) over (order by sum(copayment) asc
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as MaxCoPayment
from ins group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s01,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t05s01;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s01""")
    stmt = """drop mv t05s01;"""
    output = _dci.cmdexec(stmt)
    
    # t05.02: verify that sort is ascending, not desceding
    # default sorting ascendingly
    
    stmt = """create mv t05s02
recompute initialize on create as
select copayment, insname,
max(copayment) over (order by copayment , insname
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s02,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t05s02;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s02""")
    stmt = """drop mv t05s02;"""
    output = _dci.cmdexec(stmt)
    
    # t05.03: sort 2 columns ascending
    
    stmt = """create mv t05s03
recompute initialize on create as
select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by sum(copayment) asc, insname asc
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s03,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t05s03;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 7)
    stmt = """drop mv t05s03;"""
    output = _dci.cmdexec(stmt)
    
    # t05.04: sort 2 columns, 1 asc, 1 desc
    stmt = """create mv t05s04
recompute initialize on create as
select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by  sum(copayment) asc, insname desc
ROWS CURRENT ROW) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """maintain mv t05s04,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t05s04;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s04""")
    stmt = """drop mv t05s04;"""
    output = _dci.cmdexec(stmt)
    
    # t05.05: sort 2 columns, 1 desc, 1 asc
    
    stmt = """create mv t05s05
recompute initialize on create as
select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insname desc, sum(copayment) asc
ROWS CURRENT ROW) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s05,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t05s05;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s05""")
    stmt = """drop mv t05s05;"""
    output = _dci.cmdexec(stmt)
    
    # t05.06: sort 2 columns, both descending
    
    stmt = """create mv t05s06
recompute initialize on create as
select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insname desc, sum(copayment) desc
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as MaxCoPayment from ins
group by copayment, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s06,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t05s06;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s06""")
    stmt = """drop mv t05s06;"""
    output = _dci.cmdexec(stmt)
    
    # t05.07: sort 3 columns: all ascending
    
    stmt = """create mv t05s07
recompute initialize on create as
select copayment, insname,
max(copayment) over (order by copayment asc, coverage, insname
ROWS CURRENT ROW) as MaxCoPayment from ins
group by copayment, coverage, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s07,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t05s07;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s07""")
    stmt = """drop mv t05s07;"""
    output = _dci.cmdexec(stmt)
    
    # t05.08: sort 3 columns: all ascending
    
    stmt = """create mv t05s08
recompute initialize on create as
select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by sum(copayment) asc, coverage asc, insname asc
ROWS CURRENT ROW) as MaxCoPayment from ins
group by copayment, coverage, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s08,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t05s08;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s08""")
    stmt = """drop mv t05s08;"""
    output = _dci.cmdexec(stmt)
    
    # t05.09: sort 3 columns: mix ascending and descending
    
    stmt = """create mv t05s09
recompute initialize on create as
select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by sum(copayment) asc, coverage desc, insname asc
ROWS CURRENT ROW) as MaxCoPayment from ins
group by copayment, coverage, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s09,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t05s09;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s09""")
    stmt = """drop mv t05s09;"""
    output = _dci.cmdexec(stmt)
    
    # t05.10: sort 3 columns: all descending
    
    stmt = """create mv t05s10
recompute initialize on create as
select copayment, insname, max(copayment) as maxpay,
max(copayment) over
(order by insname desc, sum(copayment) desc, coverage desc
ROWS CURRENT ROW) as MaxCoPayment from ins
group by copayment, coverage, insname;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s10,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t05s10;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s10""")
    stmt = """drop mv t05s10;"""
    output = _dci.cmdexec(stmt)
    
    # t05.11: 4 columns
    
    stmt = """create mv t05s11
recompute initialize on create store by (num) as
select cast(salary as decimal(9,2)) as salary, paygrade,
max(salary) over
(order by paygrade, salary, bonus, commision
ROWS between 5 preceding and 2 preceding) as rank, num
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s11,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select salary, paygrade, rank from t05s11 order by paygrade, rank, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s11""")
    stmt = """drop mv t05s11;"""
    output = _dci.cmdexec(stmt)
    
    # t05.12: 4 columns
    
    stmt = """create mv t05s12
recompute initialize on create store by (num) as
select paygrade, cast(salary as decimal(9,2)) as salary,
min(salary) over
(order by sum(paygrade) asc,
salary asc, bonus, commision asc
ROWS current row) as rank, num
from ee1 where deptnum < 5
group by paygrade, salary, bonus, commision, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s12,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select paygrade, salary, rank from t05s12 order by rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s12""")
    stmt = """drop mv t05s12;"""
    output = _dci.cmdexec(stmt)
    
    # t05.13: 4 columns
    
    stmt = """create mv t05s13
recompute initialize on create store by (num) as
select paygrade, cast(salary as decimal(9,2)) as salary, bonus,
sum(salary) over
(order by max(paygrade) desc,
salary asc, bonus desc, commision asc
ROWS current row) as rank, num
from ee1 where deptnum < 5
group by paygrade, salary, bonus, commision, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s13,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select paygrade, salary, bonus, rank from t05s13 order by rank desc, bonus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s13""")
    stmt = """drop mv t05s13;"""
    output = _dci.cmdexec(stmt)
    
    # t05.14: 5 columns
    
    stmt = """create mv t05s14
recompute initialize on create store by (num) as
select paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by paygrade, salary, bonus, commision, dateofbirth
ROWS between 5 preceding and 2 preceding) as rank, num
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s14,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select paygrade, salary, rank from t05s14 order by paygrade, rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s14""")
    stmt = """drop mv t05s14;"""
    output = _dci.cmdexec(stmt)
    
    # t05.15: 5 columns
    
    stmt = """create mv t05s15
recompute initialize on create store by (num) as
select paygrade, cast(salary as decimal(9,2)) as salary,
min(salary) over
(order by sum(paygrade) asc,
salary asc, bonus, commision asc, dateofbirth
ROWS current row) as rank, num
from ee1 where deptnum < 5
group by paygrade, salary, bonus, commision, dateofbirth, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s15,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t05s15 order by rank, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s15""")
    stmt = """drop mv t05s15;"""
    output = _dci.cmdexec(stmt)
    
    # t05.16: 5 columns
    
    stmt = """create mv t05s16
recompute initialize on create store by (num) as
select paygrade, cast(salary as decimal(9,2)) as salary, bonus,
sum(salary) over
(order by max(paygrade) desc,
salary asc, bonus desc, commision asc, dateofbirth desc
ROWS current row) as rank, num
from ee1 where deptnum < 5
group by paygrade, salary, bonus, commision, dateofbirth, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s16,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t05s16 order by rank, bonus, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s16""")
    stmt = """drop mv t05s16;"""
    output = _dci.cmdexec(stmt)
    
    # t05.17: sort 6 columns: all default
    
    stmt = """create mv t05s17
recompute initialize on create store by (num) as
select deptnum, paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by paygrade, salary, bonus, commision, dateofbirth, deptnum
ROWS between 5 preceding and 2 preceding) as rank, num
from ee1 where deptnum < 5;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s17,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select paygrade, salary, rank from t05s17 order by paygrade, rank;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s17""")
    stmt = """drop mv t05s17;"""
    output = _dci.cmdexec(stmt)
    
    # t05.18: sort 6 columns: all ascending
    
    stmt = """create mv t05s18
recompute initialize on create store by (num) as
select paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by sum(paygrade) asc,
salary asc, bonus , commision ascending, dateofbirth, deptnum ASC
ROWS current row) as rank, num
from ee1 where deptnum < 5
group by paygrade, salary, bonus, commision, dateofbirth, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s18,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select paygrade, salary, rank from t05s18 order by paygrade;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s18""")
    stmt = """drop mv t05s18;"""
    output = _dci.cmdexec(stmt)
    
    # t05.19: sort 6 columns:
    
    stmt = """create mv t05s19
recompute initialize on create store by (num) as
select paygrade, cast(salary as decimal(9,2)) as salary,
max(salary) over
(order by sum(paygrade) desc,
salary asc, bonus desc, commision asc, dateofbirth desc, deptnum
ROWS current row) as rank, num
from ee1 where deptnum < 5
group by paygrade, salary, bonus, commision, dateofbirth, deptnum, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t05s19,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t05s19 order by rank desc, num desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n236exp""", """t05s19""")
    stmt = """drop mv t05s19;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test099(desc="""N237"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
  
    # MV is not suuported in TRAF yet
    if hpdci.tgtTR():
        _testmgr.testcase_end(desc)
        return
 
    #MV with OLAP order by ....
    # t06.01: sort ascending succesfully
 
    stmt = """create table ins06
(
Num           integer unsigned no default  not null not droppable ,
InsName       char(18) ,
Coverage      largeint ,
CoPayment     numeric(5,2),
primary key (Num) )
attribute
extent (1024, 1024),
maxextents 16;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """insert into ins06 values
(1, 'BlueCross', 500000, 50.50),
(5, 'Kaiser', 332000, 40.55),
(6, 'BlueCross', 340000, 40.40),
(11, 'BlueCross', 500000, 25.25),
(15, 'Kaiser', 332000, 35.35),
(16, 'BlueCross', 340000, 55.55),
(19, 'BlueCross', 340000, 55.55),
(21, 'BlueCross', 500000, 44.33),
(25, 'Kaiser', 332000, 35.35),
(26, 'BlueCross', 340000, 44.33);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_inserted_msg(output, 10)
    
    stmt = """create mv t06s01
recompute initialize on create store by (num) as
select copayment, insname,
max(copayment) over (order by sum(copayment) asc
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as MaxCoPayment, num
from ins06 group by copayment, insname, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t06s01,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t06s01 order by MaxCoPayment, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n237exp""", """t06s01""")
    stmt = """drop mv t06s01;"""
    output = _dci.cmdexec(stmt)
    
    # t06.02: verify that sort is ascending, not desceding
    # default sorting ascendingly
    
    stmt = """create mv t06s02
recompute initialize on create store by (num) as
select copayment, insname,
max(copayment) over (order by copayment , insname
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as MaxCoPayment, num
from ins06
group by copayment, insname, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t06s02,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t06s02 order by MaxCoPayment, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n237exp""", """t06s02""")
    stmt = """drop mv t06s02;"""
    output = _dci.cmdexec(stmt)
    
    # t06.03: sort 2 columns ascending
    
    stmt = """create mv t06s03
recompute initialize on create store by (num) as
select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by sum(copayment) asc, insname asc
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as MaxCoPayment, num
from ins06
group by copayment, insname, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t06s03,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t06s03 order by MaxCoPayment, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n237exp""", """t06s03""")
    stmt = """drop mv t06s03;"""
    output = _dci.cmdexec(stmt)
    
    # t06.04: sort 2 columns, 1 asc, 1 desc
    
    stmt = """create mv t06s04
recompute initialize on create store by (num) as
select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by sum(copayment) asc, insname desc
ROWS CURRENT ROW) as MaxCoPayment, num from ins06
group by copayment, insname, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t06s04,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t06s04 order by MaxCoPayment, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n237exp""", """t06s04""")
    stmt = """drop mv t06s04;"""
    output = _dci.cmdexec(stmt)
    
    # t06.05: sort 2 columns, 1 desc, 1 asc
    
    stmt = """create mv t06s05
recompute initialize on create store by (num) as
select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insname desc, sum(copayment) asc
ROWS CURRENT ROW) as MaxCoPayment, num from ins06
group by copayment, insname, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t06s05,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t06s05 order by insname desc, MaxCoPayment asc, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n237exp""", """t06s05""")
    stmt = """drop mv t06s05;"""
    output = _dci.cmdexec(stmt)
    
    # t06.06: sort 2 columns, both descending
    
    stmt = """create mv t06s06
recompute initialize on create store by (num) as
select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by insname desc, sum(copayment) desc
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as MaxCoPayment, num
from ins06
group by copayment, insname, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t06s06,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t06s06 order by insname desc, CoPayment desc, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n237exp""", """t06s06""")
    stmt = """drop mv t06s06;"""
    output = _dci.cmdexec(stmt)
    
    # t06.07: sort 3 columns: all ascending
    
    stmt = """create mv t06s07
recompute initialize on create store by (num) as
select copayment, insname,
max(copayment) over (order by copayment asc, coverage, insname
ROWS CURRENT ROW) as MaxCoPayment, num from ins06
group by copayment, coverage, insname, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t06s07,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t06s07 order by MaxCoPayment, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n237exp""", """t06s07""")
    stmt = """drop mv t06s07;"""
    output = _dci.cmdexec(stmt)
    
    # t06.08: sort 3 columns: all ascending
    
    stmt = """create mv t06s08
recompute initialize on create store by (num) as
select copayment, insname, max(copayment) as maxpay,
max(copayment) over (order by sum(copayment) asc, coverage asc, insname asc
ROWS CURRENT ROW) as MaxCoPayment, num from ins06
group by copayment, coverage, insname, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t06s08,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t06s08 order by MaxCoPayment asc, num desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n237exp""", """t06s08""")
    stmt = """drop mv t06s08;"""
    output = _dci.cmdexec(stmt)
    
    # t06.09: sort 3 columns: mix ascending and descending
    
    stmt = """create mv t06s09
recompute initialize on create store by (num) as
select copayment, insname, max(copayment) as maxpay,
max(copayment) over (
order by sum(copayment) asc, coverage desc, insname asc
ROWS CURRENT ROW) as MaxCoPayment, num
from ins06
group by copayment, coverage, insname, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t06s09,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select * from t06s09 order by MaxCoPayment, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n237exp""", """t06s09""")
    stmt = """drop mv t06s09;"""
    output = _dci.cmdexec(stmt)
    
    # t06.10: sort 3 columns: all descending
    
    stmt = """create mv t06s10
recompute initialize on create store by (num) as
select copayment, insname, max(copayment) as maxpay,
max(copayment) over
(order by insname desc, sum(copayment) desc, coverage desc
ROWS CURRENT ROW) as MaxCoPayment, num from ins06
group by copayment, coverage, insname, num;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """maintain mv t06s10,refresh;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """select copayment, insname, maxpay, maxcopayment from t06s10
order by insname desc, maxcopayment desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_file(output, defs.test_dir + """/n237exp""", """t06s10""")
    stmt = """drop mv t06s10;"""
    output = _dci.cmdexec(stmt)
    
    _testmgr.testcase_end(desc)

def test100(desc="""232A"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #Tests with large tables.
    #TestN232A
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  49001 preceding and 999 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test101(desc="""N233"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN232
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and 5 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test102(desc="""N234"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test103(desc="""N235"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test104(desc="""N236"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and 5 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test105(desc="""N237"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test106(desc="""N238"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and  unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test107(desc="""N239"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and  4 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test108(desc="""N240"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  5 preceding    and  4 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test109(desc="""N241"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  6 preceding and  current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test110(desc="""N242"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  10 preceding    and unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test111(desc="""N243"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  5 preceding    and  21 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test112(desc="""N244"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  21 following    and  unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test113(desc="""N245"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  8598745 following and 9876584 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_selected_msg(output, 0)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test114(desc="""N246"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
avg(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  28598745 preceding and 19876584 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test115(desc="""N247"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]  lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  4 preceding and 4 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 543948;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test116(desc="""N248"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #tests for function sum: 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and 5 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test117(desc="""N249"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test118(desc="""N250"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test119(desc="""N251"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and 5 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test120(desc="""N252"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test121(desc="""N253"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and  unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test122(desc="""N254"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and  4 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test123(desc="""N255"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  5 preceding    and  4 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test124(desc="""N256"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  6 preceding and  current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test125(desc="""N257"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  10 preceding    and unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test126(desc="""N258"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  5 preceding    and  21 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test127(desc="""N259"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  21 following    and  unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test128(desc="""N260"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  8598745 following and 9876584 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test129(desc="""N261"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  28598745 preceding and 19876584 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test130(desc="""N262"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]  lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
sum(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  4 preceding and 4 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 543948;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test131(desc="""N263"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #for max:
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and 5 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test132(desc="""N264"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test133(desc="""N265"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test134(desc="""N266"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and 5 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test135(desc="""N267"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test136(desc="""N268"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and  unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test137(desc="""N269"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and  4 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test138(desc="""N270"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  5 preceding    and  4 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test139(desc="""N271"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  6 preceding and  current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test140(desc="""N272"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  10 preceding    and unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test141(desc="""N273"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  5 preceding    and  21 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test142(desc="""N274"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  21 following    and  unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test143(desc="""N275"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  8598745 following and 9876584 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    #
    #execute xx;
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test144(desc="""N276"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  28598745 preceding and 19876584 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    #execute xx;
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test145(desc="""N277"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]  lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  4 preceding and 4 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 543948;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test146(desc="""N278"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #For min: 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and 5 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test147(desc="""N279"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test148(desc="""N280"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test149(desc="""N281"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and 5 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test150(desc="""N282"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test151(desc="""N283"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and  unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test152(desc="""N284"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and  4 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test153(desc="""N285"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  5 preceding    and  4 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test154(desc="""N286"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  6 preceding and  current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test155(desc="""N287"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  10 preceding    and unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test156(desc="""N288"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  5 preceding    and  21 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test157(desc="""N289"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  21 following    and  unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test158(desc="""N290"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  8598745 following and 9876584 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    #execute xx;
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test159(desc="""N291"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  28598745 preceding and 19876584 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    #execute xx;
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test160(desc="""N292"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]  lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  4 preceding and 4 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 543948;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test161(desc="""N293"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #tests for count:
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and 5 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test162(desc="""N294"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test163(desc="""N295"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test164(desc="""N296"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and 5 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test165(desc="""N297"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test166(desc="""N298"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and  unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test167(desc="""N299"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and  4 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test168(desc="""N300"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  5 preceding    and  4 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test169(desc="""N301"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  6 preceding and  current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test170(desc="""N302"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  10 preceding    and unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test171(desc="""N303"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  5 preceding    and  21 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test172(desc="""N303"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  21 following    and  unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test173(desc="""N304"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  8598745 following and 9876584 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test174(desc="""N305"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  28598745 preceding and 19876584 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test175(desc="""N306"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]  lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  4 preceding and 4 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 543948;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test176(desc="""N307"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #for variance:
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
variance(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and 5 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test177(desc="""N308"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
variance(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test178(desc="""N309"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
variance(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test179(desc="""N310"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
variance(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and 5 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test180(desc="""N311"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
variance(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test181(desc="""N312"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
variance(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and  unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test182(desc="""N313"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
variance(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  current row and  4 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test183(desc="""N314"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
variance(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  5 preceding    and  4 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test184(desc="""N315"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
variance(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  6 preceding and  current row) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test185(desc="""N316"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""    
    output = _dci.cmdexec(stmt)

    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
variance(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  10 preceding    and unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test186(desc="""N317"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
variance(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  5 preceding    and  21 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test187(desc="""N318"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
variance(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  21 following    and  unbounded following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test188(desc="""N319"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
min(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  8598745 following and 9876584 following) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    #execute xx;
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test189(desc="""N320"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
max(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  28598745 preceding and 19876584 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 59450;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    #execute xx;
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test190(desc="""N321"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]  lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
variance(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  4 preceding and 4 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 543948;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test191(desc="""N322"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(s_acctbal) over (order by p_partkey desc
rows between 5 preceding and 4 preceding) as ActBal,    

sum(p_partkey) over (order by p_partkey desc
rows between 4 preceding and 3 preceding) as PartKey,
s_name,
n_name,
p_mfgr,
s_address,
s_phone,
s_comment
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test192(desc="""N323"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #TestN324
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(s_acctbal) over (order by p_partkey desc
rows between unbounded preceding and 4 preceding) as ActBal,    

sum(p_partkey) over (order by p_partkey desc
rows between 4 preceding and unbounded following) as PartKey,
s_name,
n_name,
p_mfgr,
s_address,
s_phone,
s_comment
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test193(desc="""N324"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    # Q2: 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(s_acctbal) over (order by p_partkey desc
rows between unbounded preceding and current row) as ActBal,    

sum(p_partkey) over (order by p_partkey desc
rows between 4 preceding and 3 following) as PartKey,
s_name,
n_name,
p_mfgr,
s_address,
s_phone,
s_comment
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test194(desc="""N325"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(s_acctbal) over (order by p_partkey desc
rows between unbounded preceding and unbounded following) as ActBal,    

sum(p_partkey) over (order by p_partkey desc
rows between current row and unbounded following) as PartKey,
s_name,
n_name,
p_mfgr,
s_address,
s_phone,
s_comment
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test195(desc="""N326"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(s_acctbal) over (order by p_partkey desc
rows between unbounded preceding and 4 following) as ActBal,    

sum(p_partkey) over (order by p_partkey desc
rows between current row and 3 following) as PartKey,
s_name,
n_name,
p_mfgr,
s_address,
s_phone,
s_comment
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test196(desc="""N327"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(s_acctbal) over (order by p_partkey desc
rows between current row and current row) as ActBal,    

sum(p_partkey) over (order by p_partkey desc
rows between 4 following  and unbounded following) as PartKey,
s_name,
n_name,
p_mfgr,
s_address,
s_phone,
s_comment
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test197(desc="""N328"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(s_acctbal) over (order by p_partkey desc
rows between current row and unbounded following) as ActBal,    

sum(p_partkey) over (order by p_partkey desc
rows between 5 following and 6 following) as PartKey,
s_name,
n_name,
p_mfgr,
s_address,
s_phone,
s_comment
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test198(desc="""N329"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(s_acctbal) over (order by p_partkey desc
rows between current row and 4 following) as ActBal,    

sum(p_partkey) over (order by p_partkey desc
rows between 4 following and unbounded following) as PartKey,
s_name,
n_name,
p_mfgr,
s_address,
s_phone,
s_comment
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test199(desc="""N330"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(s_acctbal) over (order by p_partkey desc
rows between 5 preceding and current row) as ActBal,    

sum(p_partkey) over (order by p_partkey desc
rows between unbounded preceding and 3 following) as PartKey,
s_name,
n_name,
p_mfgr,
s_address,
s_phone,
s_comment
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test200(desc="""N331"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(s_acctbal) over (order by p_partkey desc
rows between 5 preceding and unbounded following) as ActBal,    

sum(p_partkey) over (order by p_partkey desc
rows between unbounded preceding and unbounded following) as PartKey,
s_name,
n_name,
p_mfgr,
s_address,
s_phone,
s_comment
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test201(desc="""N332"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(s_acctbal) over (order by p_partkey desc
rows between 5 preceding and 4 following) as ActBal,    

sum(p_partkey) over (order by p_partkey desc
rows between current row and 3 following) as PartKey,
s_name,
n_name,
p_mfgr,
s_address,
s_phone,
s_comment
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test202(desc="""N333"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(s_acctbal) over (order by p_partkey desc
rows between 5 following and unbounded following)  as ActBal,    

sum(p_partkey) over (order by p_partkey desc
rows between 4 preceding and unbounded following) as PartKey,
s_name,
n_name,
p_mfgr,
s_address,
s_phone,
s_comment
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test203(desc="""N334"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(s_acctbal) over (order by p_partkey desc
rows between 5 following and 6 following) as ActBal,    

sum(p_partkey) over (order by p_partkey desc
rows between current row and current row) as PartKey,
s_name,
n_name,
p_mfgr,
s_address,
s_phone,
s_comment
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test204(desc="""N335"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
max(s_acctbal) over (order by p_partkey desc
rows between 5 following and 6 following) as ActBal,    

count(p_partkey) over (order by p_partkey desc
rows between current row and unbounded following) as PartKey,
s_name,
n_name,
p_mfgr
s_phone
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test205(desc="""N336"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
max(s_acctbal) over (order by p_partkey desc
rows between 5 following and 6 following) as ActBal,    

count(p_partkey) over (order by p_partkey desc
rows between current row and unbounded following) as PartKey,
s_name,
n_name,
p_mfgr
s_phone
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test206(desc="""N337"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
count(s_acctbal) over (order by p_partkey desc
rows between 5 following and unbounded following) as ActBal,    

min(p_partkey) over (order by p_partkey desc
rows between current row and 5 following) as PartKey,
s_name,
n_name,
p_mfgr
s_phone
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test207(desc="""N338"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
min(s_acctbal) over (order by p_partkey desc
rows between current row and unbounded following) as ActBal,    

max(p_partkey) over (order by p_partkey desc
rows between 5 following and unbounded following) as PartKey,
s_name,
n_name,
p_mfgr
s_phone
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test208(desc="""N339"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
max(s_acctbal) over (order by p_partkey desc
rows between 5 preceding and unbounded following) as ActBal,    

avg(p_partkey) over (order by p_partkey desc
rows between unbounded preceding and unbounded following) as PartKey,
s_name,
n_name,
p_mfgr
s_phone
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test209(desc="""N340"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
avg(s_acctbal) over (order by p_partkey desc
rows between current row and unbounded following) as ActBal,    

count(p_partkey) over (order by p_partkey desc
rows between unbounded preceding and 5 following) as PartKey,
s_name,
n_name,
p_mfgr
s_phone
from
part,
supplier,
partsupp,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and p_size = 5
and p_type like '%COPPER'
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and ps_supplycost = (
select
min(ps_supplycost)
from
partsupp,
supplier,
nation,
region
where
p_partkey = ps_partkey
and s_suppkey = ps_suppkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
)
order by
s_acctbal desc,
n_name,
s_name,
p_partkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test210(desc="""N341"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between unbounded preceding and 5 preceding ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test211(desc="""N342"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between unbounded preceding and current row ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test212(desc="""N343"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between unbounded preceding and unbounded following ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test213(desc="""N344"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between unbounded preceding and 5 following ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test214(desc="""N345"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between current row and current row ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test215(desc="""N346"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between current row and unbounded following ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test216(desc="""N347"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between current row and 25 following ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test217(desc="""N348"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between 250 preceding and 150 preceding ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test218(desc="""N349"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between 50 preceding and 25 preceding ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test219(desc="""N350"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between 50 preceding and current row ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test220(desc="""N351"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between 50 preceding and unbounded following ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test221(desc="""N352"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between 50 preceding and 25 following ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test222(desc="""N353"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between 50 following and unbounded following ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test223(desc="""N354"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between 25 following and 500 following ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test224(desc="""N355"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between unbounded preceding and 10 preceding ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test225(desc="""N356"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between unbounded preceding and current row ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test226(desc="""N357"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between unbounded preceding and unbounded following ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test227(desc="""N358"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between unbounded preceding and 10 following ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test228(desc="""N359"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between current row and current row ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test229(desc="""N360"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between current row and unbounded following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test230(desc="""N361"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between current row and 10 following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test231(desc="""N362"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 50 preceding and 10 preceding) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test232(desc="""N363"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 5 preceding and current row) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test233(desc="""N364"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 5 preceding and unbounded following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test234(desc="""N365"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 5 preceding and 4 following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test235(desc="""N366"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 5 following and unbounded following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test236(desc="""N367"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 500 following and 800 following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25 ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test237(desc="""N368"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test238(desc="""N369"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and current row) as sum_qty ,
sum(l_extendedprice) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test239(desc="""N370"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and unbounded following) as sum_qty ,
sum(l_extendedprice) as sum_base_price ,
min(l_extendedprice * (1 - l_discount)) as sum_disc_price,
max(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
stddev(l_quantity) as avg_qty,
count(l_extendedprice) as avg_price,
variance(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test240(desc="""N371"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 5 following ) as sum_qty ,
min(l_extendedprice) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test241(desc="""N372"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between current row and current row) as sum_qty ,
sum(l_extendedprice) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test242(desc="""N373"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between current row and unbounded following) as sum_qty ,
sum(l_extendedprice) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test243(desc="""N374"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between current row and 5 following) as sum_qty ,
sum(l_extendedprice) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test244(desc="""N375"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between 5 preceding and 4 preceding)  as sum_qty ,
sum(l_extendedprice) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test245(desc="""N376"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between 5 preceding and current row) as sum_qty ,
sum(l_extendedprice) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test246(desc="""N377"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between 5 preceding and unbounded following) as sum_qty ,
sum(l_extendedprice) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test247(desc="""N378"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between 5 following and unbounded following) as sum_qty ,
sum(l_extendedprice) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test248(desc="""N379"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select  [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between 5 following and 6 following) as sum_qty ,
sum(l_extendedprice) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test249(desc="""N380"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
min(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_base_price ,
max(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_disc_price,
count(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_charge,
avg(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_qty,
stddev(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding )as avg_price,
variance(l_discount) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_discount,
l_extendedprice,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test250(desc="""N381"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #q1-- Modified--only preceding
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
   
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and current row ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between current row and current row ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between 8 preceding and 5 preceding ) as sum_charge,
avg(l_quantity) over (order by l_quantity
rows between 10 preceding and current row ) as avg_qty,
avg(l_extendedprice) over (order by l_quantity
rows between 10 preceding and 5 preceding )as avg_price,
avg(l_discount) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_discount,
l_extendedprice,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test251(desc="""N382"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and current row) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between unbounded preceding and unbounded following ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between current row and current row ) as sum_charge,
avg(l_quantity) over (order by l_quantity
rows between current row and unbounded following ) as avg_qty,
avg(l_extendedprice) over (order by l_quantity
rows between current row and 5 following)as avg_price,
avg(l_discount) over (order by l_quantity
rows between 6 preceding and 4 preceding ) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_discount,
l_extendedprice,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test252(desc="""N383"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #q1-- Modified-Only mixed  'following'
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and unbounded following ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between 5 following and unbounded following) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between current row and unbounded following ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between current row and 10 following ) as sum_charge,
avg(l_quantity) over (order by l_quantity
rows between 10 preceding and unbounded following ) as avg_qty,
avg(l_extendedprice) over (order by l_quantity
rows between 6 preceding and 10 following)as avg_price,
avg(l_discount) over (order by l_quantity
rows between 4 following and 6 following ) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_discount,
l_extendedprice,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test253(desc="""N384"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #q1-- Modified-Only mixed 'unbounded following'
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and unbounded following ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between 5 following and unbounded following) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between current row and unbounded following ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between 5 following and unbounded following ) as sum_charge,
avg(l_quantity) over (order by l_quantity
rows between 10 preceding and unbounded following ) as avg_qty,
avg(l_extendedprice) over (order by l_quantity
rows between 6 preceding and unbounded following)as avg_price,
avg(l_discount) over (order by l_quantity
rows between unbounded preceding and unbounded following ) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_discount,
l_extendedprice,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test254(desc="""N385"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #q1-- Modified
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between 10 following  and 15 following ) as sum_qty ,
sum(l_extendedprice) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity)
over (order by l_quantity
rows between unbounded preceding and current row ) as avg_qty,
avg(l_extendedprice) over (order by l_quantity
rows between 15 preceding and 10 following )as avg_price,
avg(l_discount) over (order by l_quantity
rows between unbounded preceding and unbounded following ) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_discount,
l_extendedprice
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test255(desc="""N386"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between unbounded preceding and 150000 preceding ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test256(desc="""N387"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between unbounded preceding and 10 preceding ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test257(desc="""N388"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between unbounded preceding and current row) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test258(desc="""N389"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between unbounded preceding and unbounded following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test259(desc="""N390"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between unbounded preceding and 10 following ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test260(desc="""N391"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between current row and current row ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test261(desc="""N392"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between current row and unbounded following ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test262(desc="""N393"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between unbounded preceding and 10 preceding ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test263(desc="""N394"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 1000 preceding and 750 preceding ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test264(desc="""N395"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 10 preceding and current row ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test265(desc="""N396"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 10 preceding and unbounded following ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test266(desc="""N397"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between  10 preceding and 15 following ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test267(desc="""N398"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 10 following and unbounded following ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test268(desc="""N399"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 10 following and 12 following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test269(desc="""N400"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between current row and 12 following ) as sum_qty ,
sum(l_extendedprice) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test270(desc="""N401"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_extendedprice
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test271(desc="""N402"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_extendedprice,
l_discount
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test272(desc="""N403"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_extendedprice,
l_discount,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test273(desc="""N404"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_charge,
avg(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_extendedprice,
l_discount,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test274(desc="""N405"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_charge,
avg(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_extendedprice,
l_discount,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test275(desc="""N406"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_charge,
avg(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_qty,
avg(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_extendedprice,
l_discount,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test276(desc="""N407"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_charge,
avg(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_qty,
avg(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_price,
avg(l_discount)  over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_extendedprice,
l_discount,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test277(desc="""N408"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and current row ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between unbounded preceding and unbounded following ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between unbounded preceding and 10 following ) as sum_charge,
avg(l_quantity) over (order by l_quantity
rows between current row and 10 following ) as avg_qty,
avg(l_extendedprice) over (order by l_quantity
rows between current row and unbounded following ) as avg_price,
avg(l_discount)  over (order by l_quantity
rows between 5 following and 6 following ) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_extendedprice,
l_discount,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test278(desc="""N409"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
count(o_totalprice) over (order by o_custkey, o_orderkey
rows between unbounded preceding and 10 preceding ) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where
l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test279(desc="""N410"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
stddev(o_totalprice) over (order by o_custkey, o_orderkey
rows between unbounded preceding and current row ) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where
l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test280(desc="""N411"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
avg(o_totalprice) over (order by o_custkey, o_orderkey
rows between unbounded preceding and unbounded following ) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where
l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test281(desc="""N412"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between unbounded preceding and 10 following ) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where
l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test282(desc="""N413"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
max(o_totalprice) over (order by o_custkey, o_orderkey
rows between unbounded preceding and current row ) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where
l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test283(desc="""N414"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
sum(o_totalprice) over (order by o_custkey, o_orderkey
rows between current row and current row ) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where
l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test284(desc="""N415"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
n_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and unbounded following) as revenue
from
customer,
orders,
lineitem,
supplier,
nation,
region
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and l_suppkey = s_suppkey
and c_nationkey = s_nationkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and o_orderdate >= date '1996-01-01'
and o_orderdate < date '1996-01-01' + interval '1' year
group by
n_name,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test285(desc="""N416"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
n_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and 12 following) as revenue
from
customer,
orders,
lineitem,
supplier,
nation,
region
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and l_suppkey = s_suppkey
and c_nationkey = s_nationkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and o_orderdate >= date '1996-01-01'
and o_orderdate < date '1996-01-01' + interval '1' year
group by
n_name,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test286(desc="""N417"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
n_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and current row) as revenue
from
customer,
orders,
lineitem,
supplier,
nation,
region
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and l_suppkey = s_suppkey
and c_nationkey = s_nationkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and o_orderdate >= date '1996-01-01'
and o_orderdate < date '1996-01-01' + interval '1' year
group by
n_name,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test287(desc="""N418"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
n_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 5 preceding and 10 following) as revenue
from
customer,
orders,
lineitem,
supplier,
nation,
region
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and l_suppkey = s_suppkey
and c_nationkey = s_nationkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and o_orderdate >= date '1996-01-01'
and o_orderdate < date '1996-01-01' + interval '1' year
group by
n_name,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test288(desc="""N419"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
n_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 12 preceding and unbounded following) as revenue
from
customer,
orders,
lineitem,
supplier,
nation,
region
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and l_suppkey = s_suppkey
and c_nationkey = s_nationkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and o_orderdate >= date '1996-01-01'
and o_orderdate < date '1996-01-01' + interval '1' year
group by
n_name,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test289(desc="""N420"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
n_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 100 following and unbounded following) as revenue
from
customer,
orders,
lineitem,
supplier,
nation,
region
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and l_suppkey = s_suppkey
and c_nationkey = s_nationkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and o_orderdate >= date '1996-01-01'
and o_orderdate < date '1996-01-01' + interval '1' year
group by
n_name,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test290(desc="""N421"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
n_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 200 following and 300 following) as revenue
from
customer,
orders,
lineitem,
supplier,
nation,
region
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and l_suppkey = s_suppkey
and c_nationkey = s_nationkey
and s_nationkey = n_nationkey
and n_regionkey = r_regionkey
and r_name = 'AFRICA'
and o_orderdate >= date '1996-01-01'
and o_orderdate < date '1996-01-01' + interval '1' year
group by
n_name,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test291(desc="""N422"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice * l_discount) over (order by l_extendedprice
rows between unbounded preceding and 4 preceding) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test292(desc="""N423"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice * l_discount) over (order by l_extendedprice
rows between unbounded preceding and current row) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test293(desc="""N424"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice * l_discount) over (order by l_extendedprice
rows between unbounded preceding and unbounded following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test294(desc="""N425"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice * l_discount) over (order by l_extendedprice
rows between unbounded preceding and 10 following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test295(desc="""N426"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice * l_discount) over (order by l_extendedprice
rows between current row and current row) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test296(desc="""N427"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice * l_discount) over (order by l_extendedprice
rows between current row and unbounded following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test297(desc="""N428"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice * l_discount) over (order by l_extendedprice
rows between current row and 10 following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test298(desc="""N429"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice * l_discount) over (order by l_extendedprice
rows between 25 preceding and 10 preceding) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test299(desc="""N430"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice * l_discount) over (order by l_extendedprice
rows between 10 preceding and current row) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test300(desc="""N431"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice * l_discount) over (order by l_extendedprice
rows between 10 preceding and unbounded following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test301(desc="""N432"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice * l_discount) over (order by l_extendedprice
rows between 5 preceding and 4 following ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test302(desc="""N433"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice * l_discount) over (order by l_extendedprice
rows between 5 following and unbounded following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test303(desc="""N434"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice * l_discount) over (order by l_extendedprice
rows between 5 following and 10 following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test304(desc="""N435"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
supp_nation,
cust_nation,
l_year,
sum(volume) as revenue
from
(
select
n1.n_name as supp_nation,
n2.n_name as cust_nation,
extract (year from l_shipdate) as l_year,
stddev(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and 4 preceding)
as volume
from
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2
where
s_suppkey = l_suppkey
and o_orderkey = l_orderkey
and c_custkey = o_custkey
and s_nationkey = n1.n_nationkey
and c_nationkey = n2.n_nationkey
and (
(n1.n_name = 'ARGENTINA' and n2.n_name = 'ROMANIA')
or (n1.n_name = 'ROMANIA' and n2.n_name = 'ARGENTINA')
)
and l_shipdate between date '1995-01-01' and date '1996-12-31'
) shipping
group by
supp_nation,
cust_nation,
l_year
order by
supp_nation,
cust_nation, l_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test305(desc="""N436"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
supp_nation,
cust_nation,
l_year,
sum(volume) as revenue
from
(
select
n1.n_name as supp_nation,
n2.n_name as cust_nation,
extract (year from l_shipdate) as l_year,
stddev(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and current row)
as volume
from
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2
where
s_suppkey = l_suppkey
and o_orderkey = l_orderkey
and c_custkey = o_custkey
and s_nationkey = n1.n_nationkey
and c_nationkey = n2.n_nationkey
and (
(n1.n_name = 'ARGENTINA' and n2.n_name = 'ROMANIA')
or (n1.n_name = 'ROMANIA' and n2.n_name = 'ARGENTINA')
)
and l_shipdate between date '1995-01-01' and date '1996-12-31'
) shipping
group by
supp_nation,
cust_nation,
l_year
order by
supp_nation,
cust_nation, l_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test306(desc="""N437"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
supp_nation,
cust_nation,
l_year,
sum(volume) as revenue
from
(
select
n1.n_name as supp_nation,
n2.n_name as cust_nation,
extract (year from l_shipdate) as l_year,
stddev(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and unbounded following)
as volume
from
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2
where
s_suppkey = l_suppkey
and o_orderkey = l_orderkey
and c_custkey = o_custkey
and s_nationkey = n1.n_nationkey
and c_nationkey = n2.n_nationkey
and (
(n1.n_name = 'ARGENTINA' and n2.n_name = 'ROMANIA')
or (n1.n_name = 'ROMANIA' and n2.n_name = 'ARGENTINA')
)
and l_shipdate between date '1995-01-01' and date '1996-12-31'
) shipping
group by
supp_nation,
cust_nation,
l_year
order by
supp_nation,
cust_nation, l_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test307(desc="""N438"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
supp_nation,
cust_nation,
l_year,
sum(volume) as revenue
from
(
select
n1.n_name as supp_nation,
n2.n_name as cust_nation,
extract (year from l_shipdate) as l_year,
stddev(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and 10 following)
as volume
from
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2
where
s_suppkey = l_suppkey
and o_orderkey = l_orderkey
and c_custkey = o_custkey
and s_nationkey = n1.n_nationkey
and c_nationkey = n2.n_nationkey
and (
(n1.n_name = 'ARGENTINA' and n2.n_name = 'ROMANIA')
or (n1.n_name = 'ROMANIA' and n2.n_name = 'ARGENTINA')
)
and l_shipdate between date '1995-01-01' and date '1996-12-31'
) shipping
group by
supp_nation,
cust_nation,
l_year
order by
supp_nation,
cust_nation, l_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test308(desc="""N439"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
supp_nation,
cust_nation,
l_year,
sum(volume) as revenue
from
(
select
n1.n_name as supp_nation,
n2.n_name as cust_nation,
extract (year from l_shipdate) as l_year,
stddev(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and current row)
as volume
from
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2
where
s_suppkey = l_suppkey
and o_orderkey = l_orderkey
and c_custkey = o_custkey
and s_nationkey = n1.n_nationkey
and c_nationkey = n2.n_nationkey
and (
(n1.n_name = 'ARGENTINA' and n2.n_name = 'ROMANIA')
or (n1.n_name = 'ROMANIA' and n2.n_name = 'ARGENTINA')
)
and l_shipdate between date '1995-01-01' and date '1996-12-31'
) shipping
group by
supp_nation,
cust_nation,
l_year
order by
supp_nation,
cust_nation, l_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test309(desc="""N440"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
supp_nation,
cust_nation,
l_year,
sum(volume) as revenue
from
(
select
n1.n_name as supp_nation,
n2.n_name as cust_nation,
extract (year from l_shipdate) as l_year,
stddev(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and unbounded following)
as volume
from
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2
where
s_suppkey = l_suppkey
and o_orderkey = l_orderkey
and c_custkey = o_custkey
and s_nationkey = n1.n_nationkey
and c_nationkey = n2.n_nationkey
and (
(n1.n_name = 'ARGENTINA' and n2.n_name = 'ROMANIA')
or (n1.n_name = 'ROMANIA' and n2.n_name = 'ARGENTINA')
)
and l_shipdate between date '1995-01-01' and date '1996-12-31'
) shipping
group by
supp_nation,
cust_nation,
l_year
order by
supp_nation,
cust_nation, l_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test310(desc="""N441"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
supp_nation,
cust_nation,
l_year,
sum(volume) as revenue
from
(
select
n1.n_name as supp_nation,
n2.n_name as cust_nation,
extract (year from l_shipdate) as l_year,
stddev(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and 100 following)
as volume
from
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2
where
s_suppkey = l_suppkey
and o_orderkey = l_orderkey
and c_custkey = o_custkey
and s_nationkey = n1.n_nationkey
and c_nationkey = n2.n_nationkey
and (
(n1.n_name = 'ARGENTINA' and n2.n_name = 'ROMANIA')
or (n1.n_name = 'ROMANIA' and n2.n_name = 'ARGENTINA')
)
and l_shipdate between date '1995-01-01' and date '1996-12-31'
) shipping
group by
supp_nation,
cust_nation,
l_year
order by
supp_nation,
cust_nation, l_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test311(desc="""N442"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
supp_nation,
cust_nation,
l_year,
sum(volume) as revenue
from
(
select
n1.n_name as supp_nation,
n2.n_name as cust_nation,
extract (year from l_shipdate) as l_year,
stddev(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 preceding and 5 preceding )
as volume
from
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2
where
s_suppkey = l_suppkey
and o_orderkey = l_orderkey
and c_custkey = o_custkey
and s_nationkey = n1.n_nationkey
and c_nationkey = n2.n_nationkey
and (
(n1.n_name = 'ARGENTINA' and n2.n_name = 'ROMANIA')
or (n1.n_name = 'ROMANIA' and n2.n_name = 'ARGENTINA')
)
and l_shipdate between date '1995-01-01' and date '1996-12-31'
) shipping
group by
supp_nation,
cust_nation,
l_year
order by
supp_nation,
cust_nation, l_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test312(desc="""N443"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
supp_nation,
cust_nation,
l_year,
sum(volume) as revenue
from
(
select
n1.n_name as supp_nation,
n2.n_name as cust_nation,
extract (year from l_shipdate) as l_year,
stddev(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 preceding and current row)
as volume
from
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2
where
s_suppkey = l_suppkey
and o_orderkey = l_orderkey
and c_custkey = o_custkey
and s_nationkey = n1.n_nationkey
and c_nationkey = n2.n_nationkey
and (
(n1.n_name = 'ARGENTINA' and n2.n_name = 'ROMANIA')
or (n1.n_name = 'ROMANIA' and n2.n_name = 'ARGENTINA')
)
and l_shipdate between date '1995-01-01' and date '1996-12-31'
) shipping
group by
supp_nation,
cust_nation,
l_year
order by
supp_nation,
cust_nation, l_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test313(desc="""N444"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
supp_nation,
cust_nation,
l_year,
sum(volume) as revenue
from
(
select
n1.n_name as supp_nation,
n2.n_name as cust_nation,
extract (year from l_shipdate) as l_year,
stddev(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 preceding and unbounded following)
as volume
from
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2
where
s_suppkey = l_suppkey
and o_orderkey = l_orderkey
and c_custkey = o_custkey
and s_nationkey = n1.n_nationkey
and c_nationkey = n2.n_nationkey
and (
(n1.n_name = 'ARGENTINA' and n2.n_name = 'ROMANIA')
or (n1.n_name = 'ROMANIA' and n2.n_name = 'ARGENTINA')
)
and l_shipdate between date '1995-01-01' and date '1996-12-31'
) shipping
group by
supp_nation,
cust_nation,
l_year
order by
supp_nation,
cust_nation, l_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test314(desc="""N445"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
supp_nation,
cust_nation,
l_year,
sum(volume) as revenue
from
(
select
n1.n_name as supp_nation,
n2.n_name as cust_nation,
extract (year from l_shipdate) as l_year,
stddev(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 preceding and unbounded following)
as volume
from
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2
where
s_suppkey = l_suppkey
and o_orderkey = l_orderkey
and c_custkey = o_custkey
and s_nationkey = n1.n_nationkey
and c_nationkey = n2.n_nationkey
and (
(n1.n_name = 'ARGENTINA' and n2.n_name = 'ROMANIA')
or (n1.n_name = 'ROMANIA' and n2.n_name = 'ARGENTINA')
)
and l_shipdate between date '1995-01-01' and date '1996-12-31'
) shipping
group by
supp_nation,
cust_nation,
l_year
order by
supp_nation,
cust_nation, l_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test315(desc="""N446"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
supp_nation,
cust_nation,
l_year,
sum(volume) as revenue
from
(
select
n1.n_name as supp_nation,
n2.n_name as cust_nation,
extract (year from l_shipdate) as l_year,
stddev(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 following and unbounded following)
as volume
from
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2
where
s_suppkey = l_suppkey
and o_orderkey = l_orderkey
and c_custkey = o_custkey
and s_nationkey = n1.n_nationkey
and c_nationkey = n2.n_nationkey
and (
(n1.n_name = 'ARGENTINA' and n2.n_name = 'ROMANIA')
or (n1.n_name = 'ROMANIA' and n2.n_name = 'ARGENTINA')
)
and l_shipdate between date '1995-01-01' and date '1996-12-31'
) shipping
group by
supp_nation,
cust_nation,
l_year
order by
supp_nation,
cust_nation, l_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test316(desc="""N447"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
supp_nation,
cust_nation,
l_year,
sum(volume) as revenue
from
(
select
n1.n_name as supp_nation,
n2.n_name as cust_nation,
extract (year from l_shipdate) as l_year,
stddev(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 following and 10 following)
as volume
from
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2
where
s_suppkey = l_suppkey
and o_orderkey = l_orderkey
and c_custkey = o_custkey
and s_nationkey = n1.n_nationkey
and c_nationkey = n2.n_nationkey
and (
(n1.n_name = 'ARGENTINA' and n2.n_name = 'ROMANIA')
or (n1.n_name = 'ROMANIA' and n2.n_name = 'ARGENTINA')
)
and l_shipdate between date '1995-01-01' and date '1996-12-31'
) shipping
group by
supp_nation,
cust_nation,
l_year
order by
supp_nation,
cust_nation, l_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test317(desc="""N448"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_year,
sum(case when nation='ROMANIA' then volume else 0 end )/ sum(volume) as mkt_share
from
(
select
n2.n_name as nation,
extract( year from o_orderdate ) as o_year,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and 4 preceding) as volume
from
part,
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2,
region
where
p_partkey = l_partkey
and s_suppkey = l_suppkey
and l_orderkey = o_orderkey
and o_custkey = c_custkey
and c_nationkey = n1.n_nationkey
and n1.n_regionkey = r_regionkey
and r_name = 'EUROPE'
and s_nationkey = n2.n_nationkey
and o_orderdate between date '1995-01-01' and date '1996-12-31'
and p_type = 'LARGE POLISHED BRASS'
) all_nations
group by
o_year
order by
o_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test318(desc="""N449"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_year,
sum(case when nation='ROMANIA' then volume else 0 end )/ sum(volume) as mkt_share
from
(
select
n2.n_name as nation,
extract( year from o_orderdate ) as o_year,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and current row) as volume
from
part,
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2,
region
where
p_partkey = l_partkey
and s_suppkey = l_suppkey
and l_orderkey = o_orderkey
and o_custkey = c_custkey
and c_nationkey = n1.n_nationkey
and n1.n_regionkey = r_regionkey
and r_name = 'EUROPE'
and s_nationkey = n2.n_nationkey
and o_orderdate between date '1995-01-01' and date '1996-12-31'
and p_type = 'LARGE POLISHED BRASS'
) all_nations
group by
o_year
order by
o_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test319(desc="""N450"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_year,
sum(case when nation='ROMANIA' then volume else 0 end )/ sum(volume) as mkt_share
from
(
select
n2.n_name as nation,
extract( year from o_orderdate ) as o_year,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and unbounded following) as volume
from
part,
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2,
region
where
p_partkey = l_partkey
and s_suppkey = l_suppkey
and l_orderkey = o_orderkey
and o_custkey = c_custkey
and c_nationkey = n1.n_nationkey
and n1.n_regionkey = r_regionkey
and r_name = 'EUROPE'
and s_nationkey = n2.n_nationkey
and o_orderdate between date '1995-01-01' and date '1996-12-31'
and p_type = 'LARGE POLISHED BRASS'
) all_nations
group by
o_year
order by
o_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test320(desc="""N451"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_year,
sum(case when nation='ROMANIA' then volume else 0 end )/ sum(volume) as mkt_share
from
(
select
n2.n_name as nation,
extract( year from o_orderdate ) as o_year,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and 10 following) as volume
from
part,
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2,
region
where
p_partkey = l_partkey
and s_suppkey = l_suppkey
and l_orderkey = o_orderkey
and o_custkey = c_custkey
and c_nationkey = n1.n_nationkey
and n1.n_regionkey = r_regionkey
and r_name = 'EUROPE'
and s_nationkey = n2.n_nationkey
and o_orderdate between date '1995-01-01' and date '1996-12-31'
and p_type = 'LARGE POLISHED BRASS'
) all_nations
group by
o_year
order by
o_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test321(desc="""N452"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_year,
sum(case when nation='ROMANIA' then volume else 0 end )/ sum(volume) as mkt_share
from
(
select
n2.n_name as nation,
extract( year from o_orderdate ) as o_year,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and current row) as volume
from
part,
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2,
region
where
p_partkey = l_partkey
and s_suppkey = l_suppkey
and l_orderkey = o_orderkey
and o_custkey = c_custkey
and c_nationkey = n1.n_nationkey
and n1.n_regionkey = r_regionkey
and r_name = 'EUROPE'
and s_nationkey = n2.n_nationkey
and o_orderdate between date '1995-01-01' and date '1996-12-31'
and p_type = 'LARGE POLISHED BRASS'
) all_nations
group by
o_year
order by
o_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test322(desc="""N453"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_year,
sum(case when nation='ROMANIA' then volume else 0 end )/ sum(volume) as mkt_share
from
(
select
n2.n_name as nation,
extract( year from o_orderdate ) as o_year,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and unbounded following) as volume
from
part,
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2,
region
where
p_partkey = l_partkey
and s_suppkey = l_suppkey
and l_orderkey = o_orderkey
and o_custkey = c_custkey
and c_nationkey = n1.n_nationkey
and n1.n_regionkey = r_regionkey
and r_name = 'EUROPE'
and s_nationkey = n2.n_nationkey
and o_orderdate between date '1995-01-01' and date '1996-12-31'
and p_type = 'LARGE POLISHED BRASS'
) all_nations
group by
o_year
order by
o_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test323(desc="""N454"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_year,
sum(case when nation='ROMANIA' then volume else 0 end )/ sum(volume) as mkt_share
from
(
select
n2.n_name as nation,
extract( year from o_orderdate ) as o_year,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and 10 following) as volume
from
part,
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2,
region
where
p_partkey = l_partkey
and s_suppkey = l_suppkey
and l_orderkey = o_orderkey
and o_custkey = c_custkey
and c_nationkey = n1.n_nationkey
and n1.n_regionkey = r_regionkey
and r_name = 'EUROPE'
and s_nationkey = n2.n_nationkey
and o_orderdate between date '1995-01-01' and date '1996-12-31'
and p_type = 'LARGE POLISHED BRASS'
) all_nations
group by
o_year
order by
o_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test324(desc="""N455"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_year,
sum(case when nation='ROMANIA' then volume else 0 end )/ sum(volume) as mkt_share
from
(
select
n2.n_name as nation,
extract( year from o_orderdate ) as o_year,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 250 preceding and 100 preceding) as volume
from
part,
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2,
region
where
p_partkey = l_partkey
and s_suppkey = l_suppkey
and l_orderkey = o_orderkey
and o_custkey = c_custkey
and c_nationkey = n1.n_nationkey
and n1.n_regionkey = r_regionkey
and r_name = 'EUROPE'
and s_nationkey = n2.n_nationkey
and o_orderdate between date '1995-01-01' and date '1996-12-31'
and p_type = 'LARGE POLISHED BRASS'
) all_nations
group by
o_year
order by
o_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test325(desc="""N456"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_year,
sum(case when nation='ROMANIA' then volume else 0 end )/ sum(volume) as mkt_share
from
(
select
n2.n_name as nation,
extract( year from o_orderdate ) as o_year,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 preceding and current row) as volume
from
part,
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2,
region
where
p_partkey = l_partkey
and s_suppkey = l_suppkey
and l_orderkey = o_orderkey
and o_custkey = c_custkey
and c_nationkey = n1.n_nationkey
and n1.n_regionkey = r_regionkey
and r_name = 'EUROPE'
and s_nationkey = n2.n_nationkey
and o_orderdate between date '1995-01-01' and date '1996-12-31'
and p_type = 'LARGE POLISHED BRASS'
) all_nations
group by
o_year
order by
o_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test326(desc="""N457"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_year,
sum(case when nation='ROMANIA' then volume else 0 end )/ sum(volume) as mkt_share
from
(
select
n2.n_name as nation,
extract( year from o_orderdate ) as o_year,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 preceding and unbounded following) as volume
from
part,
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2,
region
where
p_partkey = l_partkey
and s_suppkey = l_suppkey
and l_orderkey = o_orderkey
and o_custkey = c_custkey
and c_nationkey = n1.n_nationkey
and n1.n_regionkey = r_regionkey
and r_name = 'EUROPE'
and s_nationkey = n2.n_nationkey
and o_orderdate between date '1995-01-01' and date '1996-12-31'
and p_type = 'LARGE POLISHED BRASS'
) all_nations
group by
o_year
order by
o_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test327(desc="""N458"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_year,
sum(case when nation='ROMANIA' then volume else 0 end )/ sum(volume) as mkt_share
from
(
select
n2.n_name as nation,
extract( year from o_orderdate ) as o_year,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 preceding and 5 following) as volume
from
part,
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2,
region
where
p_partkey = l_partkey
and s_suppkey = l_suppkey
and l_orderkey = o_orderkey
and o_custkey = c_custkey
and c_nationkey = n1.n_nationkey
and n1.n_regionkey = r_regionkey
and r_name = 'EUROPE'
and s_nationkey = n2.n_nationkey
and o_orderdate between date '1995-01-01' and date '1996-12-31'
and p_type = 'LARGE POLISHED BRASS'
) all_nations
group by
o_year
order by
o_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test328(desc="""N459"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_year,
sum(case when nation='ROMANIA' then volume else 0 end )/ sum(volume) as mkt_share
from
(
select
n2.n_name as nation,
extract( year from o_orderdate ) as o_year,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 following and unbounded following) as volume
from
part,
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2,
region
where
p_partkey = l_partkey
and s_suppkey = l_suppkey
and l_orderkey = o_orderkey
and o_custkey = c_custkey
and c_nationkey = n1.n_nationkey
and n1.n_regionkey = r_regionkey
and r_name = 'EUROPE'
and s_nationkey = n2.n_nationkey
and o_orderdate between date '1995-01-01' and date '1996-12-31'
and p_type = 'LARGE POLISHED BRASS'
) all_nations
group by
o_year
order by
o_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test329(desc="""N460"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_year,
sum(case when nation='ROMANIA' then volume else 0 end )/ sum(volume) as mkt_share
from
(
select
n2.n_name as nation,
extract( year from o_orderdate ) as o_year,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 8 following and 10 following) as volume
from
part,
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2,
region
where
p_partkey = l_partkey
and s_suppkey = l_suppkey
and l_orderkey = o_orderkey
and o_custkey = c_custkey
and c_nationkey = n1.n_nationkey
and n1.n_regionkey = r_regionkey
and r_name = 'EUROPE'
and s_nationkey = n2.n_nationkey
and o_orderdate between date '1995-01-01' and date '1996-12-31'
and p_type = 'LARGE POLISHED BRASS'
) all_nations
group by
o_year
order by
o_year;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test330(desc="""N461"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
nation,
o_year,
sum(amount) as sum_profit
from
(
select
n_name as nation,
extract (year from o_orderdate) as o_year,
stddev(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity)
over (order by l_extendedprice
rows between unbounded preceding and 4 preceding)  as amount    

from
part, supplier, lineitem, partsupp, orders, nation
where
s_suppkey = l_suppkey
and ps_suppkey = l_suppkey
and ps_partkey = l_partkey
and p_partkey = l_partkey
and o_orderkey = l_orderkey
and s_nationkey = n_nationkey
and p_name like '%navy%'
) profit
group by
nation,
o_year
order by
nation,
o_year desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test331(desc="""N462"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
nation,
o_year,
sum(amount) as sum_profit
from
(
select
n_name as nation,
extract (year from o_orderdate) as o_year,
stddev(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity)
over (order by l_extendedprice
rows between unbounded preceding and current row)  as amount    

from
part, supplier, lineitem, partsupp, orders, nation
where
s_suppkey = l_suppkey
and ps_suppkey = l_suppkey
and ps_partkey = l_partkey
and p_partkey = l_partkey
and o_orderkey = l_orderkey
and s_nationkey = n_nationkey
and p_name like '%navy%'
) profit
group by
nation,
o_year
order by
nation,
o_year desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test332(desc="""N463"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
nation,
o_year,
sum(amount) as sum_profit
from
(
select
n_name as nation,
extract (year from o_orderdate) as o_year,
stddev(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity)
over (order by l_extendedprice
rows between unbounded preceding and unbounded following)  as amount    

from
part, supplier, lineitem, partsupp, orders, nation
where
s_suppkey = l_suppkey
and ps_suppkey = l_suppkey
and ps_partkey = l_partkey
and p_partkey = l_partkey
and o_orderkey = l_orderkey
and s_nationkey = n_nationkey
and p_name like '%navy%'
) profit
group by
nation,
o_year
order by
nation,
o_year desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test333(desc="""N464"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
nation,
o_year,
sum(amount) as sum_profit
from
(
select
n_name as nation,
extract (year from o_orderdate) as o_year,
stddev(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity)
over (order by l_extendedprice
rows between unbounded preceding and 10 following)  as amount    

from
part, supplier, lineitem, partsupp, orders, nation
where
s_suppkey = l_suppkey
and ps_suppkey = l_suppkey
and ps_partkey = l_partkey
and p_partkey = l_partkey
and o_orderkey = l_orderkey
and s_nationkey = n_nationkey
and p_name like '%navy%'
) profit
group by
nation,
o_year
order by
nation,
o_year desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test334(desc="""N465"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
nation,
o_year,
sum(amount) as sum_profit
from
(
select
n_name as nation,
extract (year from o_orderdate) as o_year,
stddev(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity)
over (order by l_extendedprice
rows between current row and current row)  as amount    

from
part, supplier, lineitem, partsupp, orders, nation
where
s_suppkey = l_suppkey
and ps_suppkey = l_suppkey
and ps_partkey = l_partkey
and p_partkey = l_partkey
and o_orderkey = l_orderkey
and s_nationkey = n_nationkey
and p_name like '%navy%'
) profit
group by
nation,
o_year
order by
nation,
o_year desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test335(desc="""N466"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
nation,
o_year,
sum(amount) as sum_profit
from
(
select
n_name as nation,
extract (year from o_orderdate) as o_year,
stddev(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity)
over (order by l_extendedprice
rows between current row and unbounded following)  as amount    

from
part, supplier, lineitem, partsupp, orders, nation
where
s_suppkey = l_suppkey
and ps_suppkey = l_suppkey
and ps_partkey = l_partkey
and p_partkey = l_partkey
and o_orderkey = l_orderkey
and s_nationkey = n_nationkey
and p_name like '%navy%'
) profit
group by
nation,
o_year
order by
nation,
o_year desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test336(desc="""N467"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
nation,
o_year,
sum(amount) as sum_profit
from
(
select
n_name as nation,
extract (year from o_orderdate) as o_year,
stddev(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity)
over (order by l_extendedprice
rows between current row and 10 following)  as amount    

from
part, supplier, lineitem, partsupp, orders, nation
where
s_suppkey = l_suppkey
and ps_suppkey = l_suppkey
and ps_partkey = l_partkey
and p_partkey = l_partkey
and o_orderkey = l_orderkey
and s_nationkey = n_nationkey
and p_name like '%navy%'
) profit
group by
nation,
o_year
order by
nation,
o_year desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test337(desc="""N468"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
nation,
o_year,
sum(amount) as sum_profit
from
(
select
n_name as nation,
extract (year from o_orderdate) as o_year,
stddev(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity)
over (order by l_extendedprice
rows between 100 preceding and 75 preceding)  as amount    

from
part, supplier, lineitem, partsupp, orders, nation
where
s_suppkey = l_suppkey
and ps_suppkey = l_suppkey
and ps_partkey = l_partkey
and p_partkey = l_partkey
and o_orderkey = l_orderkey
and s_nationkey = n_nationkey
and p_name like '%navy%'
) profit
group by
nation,
o_year
order by
nation,
o_year desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test338(desc="""N469"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
nation,
o_year,
sum(amount) as sum_profit
from
(
select
n_name as nation,
extract (year from o_orderdate) as o_year,
stddev(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity)
over (order by l_extendedprice
rows between 10 preceding and current row)  as amount    

from
part, supplier, lineitem, partsupp, orders, nation
where
s_suppkey = l_suppkey
and ps_suppkey = l_suppkey
and ps_partkey = l_partkey
and p_partkey = l_partkey
and o_orderkey = l_orderkey
and s_nationkey = n_nationkey
and p_name like '%navy%'
) profit
group by
nation,
o_year
order by
nation,
o_year desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test339(desc="""N470"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
nation,
o_year,
sum(amount) as sum_profit
from
(
select
n_name as nation,
extract (year from o_orderdate) as o_year,
stddev(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity)
over (order by l_extendedprice
rows between 10 preceding and unbounded following)  as amount    

from
part, supplier, lineitem, partsupp, orders, nation
where
s_suppkey = l_suppkey
and ps_suppkey = l_suppkey
and ps_partkey = l_partkey
and p_partkey = l_partkey
and o_orderkey = l_orderkey
and s_nationkey = n_nationkey
and p_name like '%navy%'
) profit
group by
nation,
o_year
order by
nation,
o_year desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test340(desc="""N471"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
nation,
o_year,
sum(amount) as sum_profit
from
(
select
n_name as nation,
extract (year from o_orderdate) as o_year,
stddev(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity)
over (order by l_extendedprice
rows between 10 preceding and 12 following)  as amount    

from
part, supplier, lineitem, partsupp, orders, nation
where
s_suppkey = l_suppkey
and ps_suppkey = l_suppkey
and ps_partkey = l_partkey
and p_partkey = l_partkey
and o_orderkey = l_orderkey
and s_nationkey = n_nationkey
and p_name like '%navy%'
) profit
group by
nation,
o_year
order by
nation,
o_year desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test341(desc="""N472"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
nation,
o_year,
sum(amount) as sum_profit
from
(
select
n_name as nation,
extract (year from o_orderdate) as o_year,
stddev(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity)
over (order by l_extendedprice
rows between 10 following and unbounded following)  as amount    

from
part, supplier, lineitem, partsupp, orders, nation
where
s_suppkey = l_suppkey
and ps_suppkey = l_suppkey
and ps_partkey = l_partkey
and p_partkey = l_partkey
and o_orderkey = l_orderkey
and s_nationkey = n_nationkey
and p_name like '%navy%'
) profit
group by
nation,
o_year
order by
nation,
o_year desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test342(desc="""N473"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
nation,
o_year,
sum(amount) as sum_profit
from
(
select
n_name as nation,
extract (year from o_orderdate) as o_year,
stddev(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity)
over (order by l_extendedprice
rows between 3 following and 5 following)  as amount    

from
part, supplier, lineitem, partsupp, orders, nation
where
s_suppkey = l_suppkey
and ps_suppkey = l_suppkey
and ps_partkey = l_partkey
and p_partkey = l_partkey
and o_orderkey = l_orderkey
and s_nationkey = n_nationkey
and p_name like '%navy%'
) profit
group by
nation,
o_year
order by
nation,
o_year desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test343(desc="""N474"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and 4 preceding) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from
customer,
orders,
lineitem,
nation
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '1994-08-01'
and o_orderdate < date '1994-08-01' + interval '3' month
and l_returnflag = 'R'
and c_nationkey = n_nationkey
group by
c_custkey,
c_name,
c_acctbal,
c_phone,
n_name,
c_address,
c_comment,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test344(desc="""N475"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and current row) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from
customer,
orders,
lineitem,
nation
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '1994-08-01'
and o_orderdate < date '1994-08-01' + interval '3' month
and l_returnflag = 'R'
and c_nationkey = n_nationkey
group by
c_custkey,
c_name,
c_acctbal,
c_phone,
n_name,
c_address,
c_comment,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test345(desc="""N476"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and unbounded following) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from
customer,
orders,
lineitem,
nation
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '1994-08-01'
and o_orderdate < date '1994-08-01' + interval '3' month
and l_returnflag = 'R'
and c_nationkey = n_nationkey
group by
c_custkey,
c_name,
c_acctbal,
c_phone,
n_name,
c_address,
c_comment,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test346(desc="""N477"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and 10 following) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from
customer,
orders,
lineitem,
nation
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '1994-08-01'
and o_orderdate < date '1994-08-01' + interval '3' month
and l_returnflag = 'R'
and c_nationkey = n_nationkey
group by
c_custkey,
c_name,
c_acctbal,
c_phone,
n_name,
c_address,
c_comment,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test347(desc="""N478"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and current row) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from
customer,
orders,
lineitem,
nation
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '1994-08-01'
and o_orderdate < date '1994-08-01' + interval '3' month
and l_returnflag = 'R'
and c_nationkey = n_nationkey
group by
c_custkey,
c_name,
c_acctbal,
c_phone,
n_name,
c_address,
c_comment,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test348(desc="""N479"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and unbounded following) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from
customer,
orders,
lineitem,
nation
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '1994-08-01'
and o_orderdate < date '1994-08-01' + interval '3' month
and l_returnflag = 'R'
and c_nationkey = n_nationkey
group by
c_custkey,
c_name,
c_acctbal,
c_phone,
n_name,
c_address,
c_comment,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test349(desc="""N480"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and 10 following) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from
customer,
orders,
lineitem,
nation
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '1994-08-01'
and o_orderdate < date '1994-08-01' + interval '3' month
and l_returnflag = 'R'
and c_nationkey = n_nationkey
group by
c_custkey,
c_name,
c_acctbal,
c_phone,
n_name,
c_address,
c_comment,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test350(desc="""N481"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 preceding and 5 preceding) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from
customer,
orders,
lineitem,
nation
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '1994-08-01'
and o_orderdate < date '1994-08-01' + interval '3' month
and l_returnflag = 'R'
and c_nationkey = n_nationkey
group by
c_custkey,
c_name,
c_acctbal,
c_phone,
n_name,
c_address,
c_comment,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test351(desc="""N482"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 preceding and current row) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from
customer,
orders,
lineitem,
nation
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '1994-08-01'
and o_orderdate < date '1994-08-01' + interval '3' month
and l_returnflag = 'R'
and c_nationkey = n_nationkey
group by
c_custkey,
c_name,
c_acctbal,
c_phone,
n_name,
c_address,
c_comment,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test352(desc="""N483"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 preceding and unbounded following) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from
customer,
orders,
lineitem,
nation
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '1994-08-01'
and o_orderdate < date '1994-08-01' + interval '3' month
and l_returnflag = 'R'
and c_nationkey = n_nationkey
group by
c_custkey,
c_name,
c_acctbal,
c_phone,
n_name,
c_address,
c_comment,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test353(desc="""N484"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 preceding and 12 following) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from
customer,
orders,
lineitem,
nation
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '1994-08-01'
and o_orderdate < date '1994-08-01' + interval '3' month
and l_returnflag = 'R'
and c_nationkey = n_nationkey
group by
c_custkey,
c_name,
c_acctbal,
c_phone,
n_name,
c_address,
c_comment,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test354(desc="""N485"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 following and unbounded following) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from
customer,
orders,
lineitem,
nation
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '1994-08-01'
and o_orderdate < date '1994-08-01' + interval '3' month
and l_returnflag = 'R'
and c_nationkey = n_nationkey
group by
c_custkey,
c_name,
c_acctbal,
c_phone,
n_name,
c_address,
c_comment,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test355(desc="""N486"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 following and 12 following) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from
customer,
orders,
lineitem,
nation
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '1994-08-01'
and o_orderdate < date '1994-08-01' + interval '3' month
and l_returnflag = 'R'
and c_nationkey = n_nationkey
group by
c_custkey,
c_name,
c_acctbal,
c_phone,
n_name,
c_address,
c_comment,
l_extendedprice,
l_discount
order by
revenue desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test356(desc="""N487"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between unbounded preceding and 4 preceding ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test357(desc="""N488"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between unbounded preceding and current row ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test358(desc="""N489"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between unbounded preceding and unbounded following) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test359(desc="""N490"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between unbounded preceding and 10 following ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test360(desc="""N491"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between current row and current row ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test361(desc="""N492"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between current row and unbounded following ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test362(desc="""N493"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between current row and 10 following ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test363(desc="""N494"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between 10 preceding and 5 preceding ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test364(desc="""N495"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between 12 preceding and current row ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test365(desc="""N496"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between 10 preceding and unbounded following ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test366(desc="""N497"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between 10 preceding and 5 following ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test367(desc="""N498"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between 10 following and unbounded following ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test368(desc="""N499"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between 10 preceding and 5 following ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    #q12
    _testmgr.testcase_end(desc)

def test369(desc="""N500"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between unbounded preceding and 4 preceding )  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test370(desc="""N501"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between unbounded preceding and current row)  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between unbounded preceding and unbounded following ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test371(desc="""N502"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
stddev((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between unbounded preceding and unbounded following )  as high_line_count,
stddev(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between unbounded preceding and 21 following ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test372(desc="""N503"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
count((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between unbounded preceding and 15 following )  as high_line_count,
count(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between current row  and current row) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test373(desc="""N504"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,    

avg((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between current row  and current row )  as high_line_count,
avg(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between current row  and unbounded following) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test374(desc="""N505"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
min((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between current row  and unbounded following )  as high_line_count,
min(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between current row  and 15 following ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test375(desc="""N506"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
max((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between current row  and 15 following )  as high_line_count,
max(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between 5 preceding and 4 preceding ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test376(desc="""N507"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,    

stddev((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between 5 preceding and 4 preceding )  as std_high_line_count,    

stddev(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)    

over (order by l_orderkey
rows between 5 preceding and current row) as  std_low_line_count,    
    
count((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between 5 preceding and 4 preceding )  as cnt_high_line_count,    

count(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)    

over (order by l_orderkey
rows between 5 preceding and 4 preceding ) as cnt_low_line_count,    
    
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between 5 preceding and 4 preceding )  as sum_high_line_count,    

sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)    

over (order by l_orderkey
rows between 5 preceding and 4 preceding ) as sum_low_line_count,    
    
avg((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between 5 preceding and 4 preceding )  as avg_high_line_count,    

avg(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)    

over (order by l_orderkey
rows between 5 preceding and 4 preceding ) as avg_low_line_count,    
    
min((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between 5 preceding and 4 preceding )  as min_high_line_count,    

min(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)    

over (order by l_orderkey
rows between 5 preceding and 4 preceding ) as min_low_line_count,    

max((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between 5 preceding and 4 preceding )  as max_high_line_count,    

max(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)    

over (order by l_orderkey
rows between 5 preceding and 4 preceding ) as max_low_line_count    
    
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test377(desc="""N508"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
c_count,
count(*) as custdist
from
(
select
count(o_orderkey) over (order by o_orderkey
rows between unbounded preceding and 4 preceding)
as  c_count
from
customer, orders where
c_custkey = o_custkey
and o_comment not like '%unusual%accounts%'
group by
c_custkey,
o_orderkey
) c_orders
group by
c_count
order by
custdist desc,
c_count desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test378(desc="""508A"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
c_count,
count(*) as custdist
from
(
select
count(o_orderkey) over (order by o_orderkey
rows between unbounded preceding and current row)
as  c_count
from
customer, orders where
c_custkey = o_custkey
and o_comment not like '%unusual%accounts%'
group by
c_custkey,
o_orderkey
) c_orders
group by
c_count
order by
custdist desc,
c_count desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test379(desc="""508B"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
c_count,
count(*) as custdist
from
(
select
count(o_orderkey) over (order by o_orderkey
rows between unbounded preceding and unbounded following)
as  c_count
from
customer, orders where
c_custkey = o_custkey
and o_comment not like '%unusual%accounts%'
group by
c_custkey,
o_orderkey
) c_orders
group by
c_count
order by
custdist desc,
c_count desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test380(desc="""508C"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
c_count,
count(*) as custdist
from
(
select
count(o_orderkey) over (order by o_orderkey
rows between unbounded preceding and 10 following)
as  c_count
from
customer, orders where
c_custkey = o_custkey
and o_comment not like '%unusual%accounts%'
group by
c_custkey,
o_orderkey
) c_orders
group by
c_count
order by
custdist desc,
c_count desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test381(desc="""508D"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
c_count,
count(*) as custdist
from
(
select
count(o_orderkey) over (order by o_orderkey
rows between current row and current row)
as  c_count
from
customer, orders where
c_custkey = o_custkey
and o_comment not like '%unusual%accounts%'
group by
c_custkey,
o_orderkey
) c_orders
group by
c_count
order by
custdist desc,
c_count desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test382(desc="""508E"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
c_count,
count(*) as custdist
from
(
select
count(o_orderkey) over (order by o_orderkey
rows between current row and unbounded following)
as  c_count
from
customer, orders where
c_custkey = o_custkey
and o_comment not like '%unusual%accounts%'
group by
c_custkey,
o_orderkey
) c_orders
group by
c_count
order by
custdist desc,
c_count desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test383(desc="""508F"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
c_count,
count(*) as custdist
from
(
select
count(o_orderkey) over (order by o_orderkey
rows between current row and 15 following)
as  c_count
from
customer, orders where
c_custkey = o_custkey
and o_comment not like '%unusual%accounts%'
group by
c_custkey,
o_orderkey
) c_orders
group by
c_count
order by
custdist desc,
c_count desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test384(desc="""508G"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
c_count,
count(*) as custdist
from
(
select
count(o_orderkey) over (order by o_orderkey
rows between 8 preceding and 4 preceding)
as  c_count
from
customer, orders where
c_custkey = o_custkey
and o_comment not like '%unusual%accounts%'
group by
c_custkey,
o_orderkey
) c_orders
group by
c_count
order by
custdist desc,
c_count desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test385(desc="""508H"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
c_count,
count(*) as custdist
from
(
select
count(o_orderkey) over (order by o_orderkey
rows between 10 preceding and current row)
as  c_count
from
customer, orders where
c_custkey = o_custkey
and o_comment not like '%unusual%accounts%'
group by
c_custkey,
o_orderkey
) c_orders
group by
c_count
order by
custdist desc,
c_count desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test386(desc="""508I"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
c_count,
count(*) as custdist
from
(
select
count(o_orderkey) over (order by o_orderkey
rows between 10 preceding and unbounded following)
as  c_count
from
customer, orders where
c_custkey = o_custkey
and o_comment not like '%unusual%accounts%'
group by
c_custkey,
o_orderkey
) c_orders
group by
c_count
order by
custdist desc,
c_count desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test387(desc="""508J"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
c_count,
count(*) as custdist
from
(
select
count(o_orderkey) over (order by o_orderkey
rows between 10 preceding and 8 following)
as  c_count
from
customer, orders where
c_custkey = o_custkey
and o_comment not like '%unusual%accounts%'
group by
c_custkey,
o_orderkey
) c_orders
group by
c_count
order by
custdist desc,
c_count desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test388(desc="""508K"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
c_count,
count(*) as custdist
from
(
select
count(o_orderkey) over (order by o_orderkey
rows between 10 following and unbounded following)
as  c_count
from
customer, orders where
c_custkey = o_custkey
and o_comment not like '%unusual%accounts%'
group by
c_custkey,
o_orderkey
) c_orders
group by
c_count
order by
custdist desc,
c_count desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test389(desc="""508L"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
c_count,
count(*) as custdist
from
(
select
count(o_orderkey) over (order by o_orderkey
rows between 10 following and 12 following )
as  c_count
from
customer, orders where
c_custkey = o_custkey
and o_comment not like '%unusual%accounts%'
group by
c_custkey,
o_orderkey
) c_orders
group by
c_count
order by
custdist desc,
c_count desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test390(desc="""508M"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
100.00 * sum(case
when p_type like 'PROMO%'
then l_extendedprice * (1 - l_discount)
else 0
end) / sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and 4 preceding)as promo_revenue    

from
lineitem,
part
where
l_partkey = p_partkey
and l_shipdate >= date '1995-08-01'
and l_shipdate < date '1995-08-01' + interval '1' month
group by
l_extendedprice,
l_discount
order by
promo_revenue;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test391(desc="""508N"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
100.00 * sum(case
when p_type like 'PROMO%'
then l_extendedprice * (1 - l_discount)
else 0
end) / sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and current row)as promo_revenue    

from
lineitem,
part
where
l_partkey = p_partkey
and l_shipdate >= date '1995-08-01'
and l_shipdate < date '1995-08-01' + interval '1' month
group by
l_extendedprice,
l_discount
order by
promo_revenue;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test392(desc="""508O"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
100.00 * sum(case
when p_type like 'PROMO%'
then l_extendedprice * (1 - l_discount)
else 0
end) / sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and unbounded following)as promo_revenue    

from
lineitem,
part
where
l_partkey = p_partkey
and l_shipdate >= date '1995-08-01'
and l_shipdate < date '1995-08-01' + interval '1' month
group by
l_extendedprice,
l_discount
order by
promo_revenue;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test393(desc="""508P"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
100.00 * sum(case
when p_type like 'PROMO%'
then l_extendedprice * (1 - l_discount)
else 0
end) / sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and 10 following)as promo_revenue    

from
lineitem,
part
where
l_partkey = p_partkey
and l_shipdate >= date '1995-08-01'
and l_shipdate < date '1995-08-01' + interval '1' month
group by
l_extendedprice,
l_discount
order by
promo_revenue;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test394(desc="""508Q"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
100.00 * sum(case
when p_type like 'PROMO%'
then l_extendedprice * (1 - l_discount)
else 0
end) / sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and current row)as promo_revenue    

from
lineitem,
part
where
l_partkey = p_partkey
and l_shipdate >= date '1995-08-01'
and l_shipdate < date '1995-08-01' + interval '1' month
group by
l_extendedprice,
l_discount
order by
promo_revenue;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test395(desc="""508R"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
100.00 * sum(case
when p_type like 'PROMO%'
then l_extendedprice * (1 - l_discount)
else 0
end) / sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and unbounded following)as promo_revenue    

from
lineitem,
part
where
l_partkey = p_partkey
and l_shipdate >= date '1995-08-01'
and l_shipdate < date '1995-08-01' + interval '1' month
group by
l_extendedprice,
l_discount
order by
promo_revenue;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test396(desc="""508S"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
100.00 * sum(case
when p_type like 'PROMO%'
then l_extendedprice * (1 - l_discount)
else 0
end) / sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between current row and 10 following)as promo_revenue    

from
lineitem,
part
where
l_partkey = p_partkey
and l_shipdate >= date '1995-08-01'
and l_shipdate < date '1995-08-01' + interval '1' month
group by
l_extendedprice,
l_discount
order by
promo_revenue;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test397(desc="""508T"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
100.00 * sum(case
when p_type like 'PROMO%'
then l_extendedprice * (1 - l_discount)
else 0
end) / sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 50 preceding and 40 preceding)as promo_revenue    

from
lineitem,
part
where
l_partkey = p_partkey
and l_shipdate >= date '1995-08-01'
and l_shipdate < date '1995-08-01' + interval '1' month
group by
l_extendedprice,
l_discount
order by
promo_revenue;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test398(desc="""508V"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
100.00 * sum(case
when p_type like 'PROMO%'
then l_extendedprice * (1 - l_discount)
else 0
end) / sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 preceding and current row)as promo_revenue    

from
lineitem,
part
where
l_partkey = p_partkey
and l_shipdate >= date '1995-08-01'
and l_shipdate < date '1995-08-01' + interval '1' month
group by
l_extendedprice,
l_discount
order by
promo_revenue;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test399(desc="""508W"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
100.00 * sum(case
when p_type like 'PROMO%'
then l_extendedprice * (1 - l_discount)
else 0
end) / sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 preceding and unbounded following)as promo_revenue    

from
lineitem,
part
where
l_partkey = p_partkey
and l_shipdate >= date '1995-08-01'
and l_shipdate < date '1995-08-01' + interval '1' month
group by
l_extendedprice,
l_discount
order by
promo_revenue;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test400(desc="""508Y"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
100.00 * sum(case
when p_type like 'PROMO%'
then l_extendedprice * (1 - l_discount)
else 0
end) / sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 preceding and 4 following)as promo_revenue    

from
lineitem,
part
where
l_partkey = p_partkey
and l_shipdate >= date '1995-08-01'
and l_shipdate < date '1995-08-01' + interval '1' month
group by
l_extendedprice,
l_discount
order by
promo_revenue;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test401(desc="""508Z"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
100.00 * sum(case
when p_type like 'PROMO%'
then l_extendedprice * (1 - l_discount)
else 0
end) / sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 following and unbounded following)as promo_revenue    

from
lineitem,
part
where
l_partkey = p_partkey
and l_shipdate >= date '1995-08-01'
and l_shipdate < date '1995-08-01' + interval '1' month
group by
l_extendedprice,
l_discount
order by
promo_revenue;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test402(desc="""509A"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare  xx  from
select [last 0]
100.00 * sum(case
when p_type like 'PROMO%'
then l_extendedprice * (1 - l_discount)
else 0
end) / sum(l_extendedprice * (1 - l_discount)) over (order by l_extendedprice
rows between 10 following and 15 following)as promo_revenue    

from
lineitem,
part
where
l_partkey = p_partkey
and l_shipdate >= date '1995-08-01'
and l_shipdate < date '1995-08-01' + interval '1' month
group by
l_extendedprice,
l_discount
order by
promo_revenue;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test403(desc="""509B"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
s_suppkey,
s_name,
s_address,
s_phone,
avg(total_revenue)  over (order by total_revenue desc
rows between unbounded preceding and 4 preceding) as totalrevenue
from
supplier,
""" + defs.my_schema + """.revenue as revenue
where
s_suppkey = supplier_no
and total_revenue = (
select
max(total_revenue)
from
""" + defs.my_schema + """.revenue  )
order by
s_suppkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test404(desc="""N509"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
s_suppkey,
s_name,
s_address,
s_phone,
avg(total_revenue)  over (order by total_revenue desc
rows between unbounded preceding and 4 preceding) as totalrevenue
from
supplier,
""" + defs.my_schema + """.revenue as revenue
where
s_suppkey = supplier_no
and total_revenue = (
select
avg(total_revenue)
from
""" + defs.my_schema + """.revenue  )
order by
s_suppkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test405(desc="""N510"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
s_suppkey,
s_name,
s_address,
s_phone,
avg(total_revenue)  over (order by total_revenue desc
rows between unbounded preceding and current row) as totalrevenue
from
supplier,
""" + defs.my_schema + """.revenue as revenue
where
s_suppkey = supplier_no
and total_revenue = (
select
count(total_revenue)
from
""" + defs.my_schema + """.revenue  )
order by
s_suppkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test406(desc="""N511"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
s_suppkey,
s_name,
s_address,
s_phone,
avg(total_revenue)  over (order by total_revenue desc
rows between unbounded preceding and unbounded following) as totalrevenue
from
supplier,
""" + defs.my_schema + """.revenue as revenue
where
s_suppkey = supplier_no
and total_revenue = (
select
avg(total_revenue)
from
""" + defs.my_schema + """.revenue  )
order by
s_suppkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test407(desc="""N512"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
s_suppkey,
s_name,
s_address,
s_phone,
avg(total_revenue)  over (order by total_revenue desc
rows between unbounded preceding and 4 following) as totalrevenue
from
supplier,
""" + defs.my_schema + """.revenue as revenue
where
s_suppkey = supplier_no
and total_revenue = (
select
stddev(total_revenue)
from
""" + defs.my_schema + """.revenue  )
order by
s_suppkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test408(desc="""N513"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
s_suppkey,
s_name,
s_address,
s_phone,
avg(total_revenue)  over (order by total_revenue desc
rows between current row and current row) as totalrevenue
from
supplier,
""" + defs.my_schema + """.revenue as revenue
where
s_suppkey = supplier_no
and total_revenue = (
select
min(total_revenue)
from
""" + defs.my_schema + """.revenue  )
order by
s_suppkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test409(desc="""N514"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
s_suppkey,
s_name,
s_address,
s_phone,
avg(total_revenue)  over (order by total_revenue desc
rows between current row and unbounded following) as totalrevenue
from
supplier,
""" + defs.my_schema + """.revenue as revenue
where
s_suppkey = supplier_no
and total_revenue = (
select
avg(total_revenue)
from
""" + defs.my_schema + """.revenue  )
order by
s_suppkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test410(desc="""N515"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
s_suppkey,
s_name,
s_address,
s_phone,
avg(total_revenue)  over (order by total_revenue desc
rows between current row and 100 following) as totalrevenue
from
supplier,
""" + defs.my_schema + """.revenue as revenue
where
s_suppkey = supplier_no
and total_revenue = (
select
count (total_revenue)
from
""" + defs.my_schema + """.revenue  )
order by
s_suppkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test411(desc="""N516"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
s_suppkey,
s_name,
s_address,
s_phone,
avg(total_revenue)  over (order by total_revenue desc
rows between 12 preceding and current row) as totalrevenue
from
supplier,
""" + defs.my_schema + """.revenue as revenue
where
s_suppkey = supplier_no
and total_revenue = (
select
max(total_revenue)
from
""" + defs.my_schema + """.revenue  )
order by
s_suppkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output) 
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test412(desc="""N517"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
s_suppkey,
s_name,
s_address,
s_phone,
avg(total_revenue)  over (order by total_revenue desc
rows between 20 preceding and 50 following) as totalrevenue
from
supplier,
""" + defs.my_schema + """.revenue as revenue
where
s_suppkey = supplier_no
and total_revenue = (
select
min(total_revenue)
from
""" + defs.my_schema + """.revenue  )
order by
s_suppkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test413(desc="""N518"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
s_suppkey,
s_name,
s_address,
s_phone,
avg(total_revenue)  over (order by total_revenue desc
rows between 5 preceding and unbounded following) as totalrevenue
from
supplier,
""" + defs.my_schema + """.revenue as revenue
where
s_suppkey = supplier_no
and total_revenue = (
select
count(total_revenue)
from
""" + defs.my_schema + """.revenue  )
order by
s_suppkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test414(desc="""N519"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
s_suppkey,
s_name,
s_address,
s_phone,
avg(total_revenue)  over (order by total_revenue desc
rows between 4 following and 6 following) as totalrevenue
from
supplier,
""" + defs.my_schema + """.revenue as revenue
where
s_suppkey = supplier_no
and total_revenue = (
select
max(total_revenue)
from
""" + defs.my_schema + """.revenue  )
order by
s_suppkey;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test415(desc="""N520"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
p_brand,
p_type,
p_size,
count(ps_suppkey) over (order by ps_suppkey
rows between unbounded preceding and 4 preceding)
as supplier_cnt
from
partsupp,
part
where
p_partkey = ps_partkey
and p_brand <> 'Brand#22'
and p_type not like 'SMALL ANODIZED%'
and p_size in (14, 20, 17, 11, 5, 7, 6, 43)
and ps_suppkey not in (
select
s_suppkey
from
supplier
where
s_comment like '%Customer%Complaints%'
)
group by
p_brand,
p_type,
p_size,
ps_suppkey
order by
supplier_cnt desc,
p_brand,
p_type,
p_size;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test416(desc="""N521"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice / 7.0)
over (order by l_extendedprice
rows between unbounded preceding and 4 preceding) as avg_yearly    

from
lineitem,
part
where
p_partkey = l_partkey
and p_brand = 'Brand#21'
and p_container = 'SM CASE'
and l_quantity < (
select
0.2 * avg(l_quantity)
from
lineitem
where
l_partkey = p_partkey
);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test417(desc="""N522"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice / 7.0)
over (order by l_extendedprice
rows between unbounded preceding and current row) as avg_yearly    

from
lineitem,
part
where
p_partkey = l_partkey
and p_brand = 'Brand#21'
and p_container = 'SM CASE'
and l_quantity < (
select
0.2 * avg(l_quantity)
from
lineitem
where
l_partkey = p_partkey);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test418(desc="""N523"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice / 7.0)
over (order by l_extendedprice
rows between unbounded preceding and unbounded following) as avg_yearly    

from
lineitem,
part
where
p_partkey = l_partkey
and p_brand = 'Brand#21'
and p_container = 'SM CASE'
and l_quantity < (
select
0.2 * avg(l_quantity)
from
lineitem
where
l_partkey = p_partkey);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test419(desc="""N524"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice / 7.0)
over (order by l_extendedprice
rows between unbounded preceding and 10 following) as avg_yearly    

from
lineitem,
part
where
p_partkey = l_partkey
and p_brand = 'Brand#21'
and p_container = 'SM CASE'
and l_quantity < (
select
0.2 * avg(l_quantity)
from
lineitem
where
l_partkey = p_partkey);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test420(desc="""N525"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice / 7.0)
over (order by l_extendedprice
rows between current row and current row) as avg_yearly    

from
lineitem,
part
where
p_partkey = l_partkey
and p_brand = 'Brand#21'
and p_container = 'SM CASE'
and l_quantity < (
select
0.2 * avg(l_quantity)
from
lineitem
where
l_partkey = p_partkey);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test421(desc="""N526"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice / 7.0)
over (order by l_extendedprice
rows between current row and unbounded following) as avg_yearly    

from
lineitem,
part
where
p_partkey = l_partkey
and p_brand = 'Brand#21'
and p_container = 'SM CASE'
and l_quantity < (
select
0.2 * avg(l_quantity)
from
lineitem
where
l_partkey = p_partkey);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test422(desc="""N527"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice / 7.0)
over (order by l_extendedprice
rows between current row and 12 following) as avg_yearly    

from
lineitem,
part
where
p_partkey = l_partkey
and p_brand = 'Brand#21'
and p_container = 'SM CASE'
and l_quantity < (
select
0.2 * avg(l_quantity)
from
lineitem
where
l_partkey = p_partkey);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test423(desc="""N528"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice / 7.0)
over (order by l_extendedprice
rows between 12 preceding and 4 preceding) as avg_yearly    

from
lineitem,
part
where
p_partkey = l_partkey
and p_brand = 'Brand#21'
and p_container = 'SM CASE'
and l_quantity < (
select
0.2 * avg(l_quantity)
from
lineitem
where
l_partkey = p_partkey);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test424(desc="""N529"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice / 7.0)
over (order by l_extendedprice
rows between 12 preceding and current row) as avg_yearly    

from
lineitem,
part
where
p_partkey = l_partkey
and p_brand = 'Brand#21'
and p_container = 'SM CASE'
and l_quantity < (
select
0.2 * avg(l_quantity)
from
lineitem
where
l_partkey = p_partkey);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test425(desc="""N530"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice / 7.0)
over (order by l_extendedprice
rows between 12 preceding and unbounded following) as avg_yearly    

from
lineitem,
part
where
p_partkey = l_partkey
and p_brand = 'Brand#21'
and p_container = 'SM CASE'
and l_quantity < (
select
0.2 * avg(l_quantity)
from
lineitem
where
l_partkey = p_partkey);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test426(desc="""N531"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice / 7.0)
over (order by l_extendedprice
rows between 12 preceding and 10 following) as avg_yearly    

from
lineitem,
part
where
p_partkey = l_partkey
and p_brand = 'Brand#21'
and p_container = 'SM CASE'
and l_quantity < (
select
0.2 * avg(l_quantity)
from
lineitem
where
l_partkey = p_partkey);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test427(desc="""N532"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice / 7.0)
over (order by l_extendedprice
rows between 2 following and 6 following) as avg_yearly    

from
lineitem,
part
where
p_partkey = l_partkey
and p_brand = 'Brand#21'
and p_container = 'SM CASE'
and l_quantity < (
select
0.2 * avg(l_quantity)
from
lineitem
where
l_partkey = p_partkey);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test428(desc="""N533"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice / 7.0)
over (order by l_extendedprice
rows between 12 preceding and unbounded following) as avg_yearly    

from
lineitem,
part
where
p_partkey = l_partkey
and p_brand = 'Brand#21'
and p_container = 'SM CASE'
and l_quantity < (
select
0.2 * avg(l_quantity)
from
lineitem
where
l_partkey = p_partkey);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test429(desc="""N534"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
stddev(l_quantity) over (order by l_orderkey
rows between unbounded preceding and 4 preceding ) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test430(desc="""N535"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between unbounded preceding and current row ) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test431(desc="""N536"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
count(l_quantity) over (order by l_orderkey
rows between unbounded preceding and unbounded following ) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test432(desc="""N537"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
avg(l_quantity) over (order by l_orderkey
rows between unbounded preceding and 4 following ) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test433(desc="""N538"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
max(l_quantity) over (order by l_orderkey
rows between current row and current row ) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test434(desc="""N539"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
min(l_quantity) over (order by l_orderkey
rows between current row and unbounded following ) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test435(desc="""N540"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
stddev(l_quantity) over (order by l_orderkey
rows between unbounded preceding and 4 preceding ) as std_lquantity,    

count(l_quantity) over (order by l_orderkey
rows between unbounded preceding and unbounded following ) as cnt_lquantity,    

sum(l_quantity) over (order by l_orderkey
rows between 5 preceding and 4 following ) as sum_lquantity,    

avg(l_quantity) over (order by l_orderkey
rows between 5 following and 40 following ) as avg_lquantity,    

min(l_quantity) over (order by l_orderkey
rows between current row and 4 following ) as min_lquantity,    

max(l_quantity) over (order by l_orderkey
rows between 10 following and unbounded following ) as max_lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test436(desc="""N541"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
sum(l_extendedprice* (1 - l_discount))
over (order by l_extendedprice
rows between 2 preceding and 1 preceding)
as revenue
from
lineitem,
part
where
(
p_partkey = l_partkey
and p_brand = 'Brand#13'
and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
and l_quantity >= 2 and l_quantity <= 2 + 10
and p_size between 1 and 5
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
p_partkey = l_partkey
and p_brand = 'Brand#45'
and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
and l_quantity >= 20 and l_quantity <= 20 + 10
and p_size between 1 and 10
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
p_partkey = l_partkey
and p_brand = 'Brand#12'
and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
and l_quantity >= 25 and l_quantity <= 25 + 10
and p_size between 1 and 15
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
and
l_extendedprice > 112335;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test437(desc="""N542"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]    

avg(l_extendedprice* (1 - l_discount))
over (order by l_extendedprice
rows between 2 preceding and 1 preceding)
as revenue
from
lineitem,
part
where
(
p_partkey = l_partkey
and p_brand = 'Brand#13'
and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
and l_quantity >= 2 and l_quantity <= 2 + 10
and p_size between 1 and 5
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
p_partkey = l_partkey
and p_brand = 'Brand#45'
and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
and l_quantity >= 20 and l_quantity <= 20 + 10
and p_size between 1 and 10
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
p_partkey = l_partkey
and p_brand = 'Brand#12'
and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
and l_quantity >= 25 and l_quantity <= 25 + 10
and p_size between 1 and 15
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
and
l_extendedprice > 112335;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test438(desc="""N543"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]    

max(l_extendedprice* (1 - l_discount))
over (order by l_extendedprice
rows between 2 preceding and 1 preceding)
as revenue
from
lineitem,
part
where
(
p_partkey = l_partkey
and p_brand = 'Brand#13'
and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
and l_quantity >= 2 and l_quantity <= 2 + 10
and p_size between 1 and 5
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
p_partkey = l_partkey
and p_brand = 'Brand#45'
and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
and l_quantity >= 20 and l_quantity <= 20 + 10
and p_size between 1 and 10
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
p_partkey = l_partkey
and p_brand = 'Brand#12'
and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
and l_quantity >= 25 and l_quantity <= 25 + 10
and p_size between 1 and 15
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
and
l_extendedprice > 112335;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test439(desc="""N544"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]    

min(l_extendedprice* (1 - l_discount))
over (order by l_extendedprice
rows between 2 preceding and 1 preceding)
as revenue
from
lineitem,
part
where
(
p_partkey = l_partkey
and p_brand = 'Brand#13'
and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
and l_quantity >= 2 and l_quantity <= 2 + 10
and p_size between 1 and 5
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
p_partkey = l_partkey
and p_brand = 'Brand#45'
and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
and l_quantity >= 20 and l_quantity <= 20 + 10
and p_size between 1 and 10
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
p_partkey = l_partkey
and p_brand = 'Brand#12'
and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
and l_quantity >= 25 and l_quantity <= 25 + 10
and p_size between 1 and 15
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
and
l_extendedprice > 112335;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test440(desc="""N545"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]    

stddev(l_extendedprice* (1 - l_discount))
over (order by l_extendedprice
rows between 2 preceding and 1 preceding)
as revenue
from
lineitem,
part
where
(
p_partkey = l_partkey
and p_brand = 'Brand#13'
and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
and l_quantity >= 2 and l_quantity <= 2 + 10
and p_size between 1 and 5
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
p_partkey = l_partkey
and p_brand = 'Brand#45'
and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
and l_quantity >= 20 and l_quantity <= 20 + 10
and p_size between 1 and 10
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
p_partkey = l_partkey
and p_brand = 'Brand#12'
and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
and l_quantity >= 25 and l_quantity <= 25 + 10
and p_size between 1 and 15
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
and
l_extendedprice > 112335;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test441(desc="""N546"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]    

count(l_extendedprice* (1 - l_discount))
over (order by l_extendedprice
rows between 2 preceding and 1 preceding)
as revenue
from
lineitem,
part
where
(
p_partkey = l_partkey
and p_brand = 'Brand#13'
and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
and l_quantity >= 2 and l_quantity <= 2 + 10
and p_size between 1 and 5
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
p_partkey = l_partkey
and p_brand = 'Brand#45'
and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
and l_quantity >= 20 and l_quantity <= 20 + 10
and p_size between 1 and 10
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
p_partkey = l_partkey
and p_brand = 'Brand#12'
and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
and l_quantity >= 25 and l_quantity <= 25 + 10
and p_size between 1 and 15
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
and
l_extendedprice > 112335;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test442(desc="""N547"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]    

count(l_extendedprice* (1 - l_discount))
over (order by l_extendedprice
rows between 2 preceding and 1 preceding)
as cnt_revenue,
stddev(l_extendedprice* (1 - l_discount))
over (order by l_extendedprice
rows between 2 preceding and 1 preceding)
as std_revenue,    

max(l_extendedprice* (1 - l_discount))
over (order by l_extendedprice
rows between 2 preceding and 1 preceding)
as max_revenue,    

min(l_extendedprice* (1 - l_discount))
over (order by l_extendedprice
rows between 2 preceding and 1 preceding)
as min_revenue,    

avg(l_extendedprice* (1 - l_discount))
over (order by l_extendedprice
rows between 2 preceding and 1 preceding)
as avg_revenue
from
lineitem,
part
where
(
p_partkey = l_partkey
and p_brand = 'Brand#13'
and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
and l_quantity >= 2 and l_quantity <= 2 + 10
and p_size between 1 and 5
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
p_partkey = l_partkey
and p_brand = 'Brand#45'
and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
and l_quantity >= 20 and l_quantity <= 20 + 10
and p_size between 1 and 10
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
p_partkey = l_partkey
and p_brand = 'Brand#12'
and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
and l_quantity >= 25 and l_quantity <= 25 + 10
and p_size between 1 and 15
and l_shipmode in ('AIR', 'AIR REG')
and l_shipinstruct = 'DELIVER IN PERSON'
)
and
l_extendedprice > 112335;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test443(desc="""N548"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
s_name,
s_address,
sum(s_acctbal) over (order by s_acctbal desc
rows between unbounded preceding and 4 preceding) as ActBal    

from
supplier,
nation
where
s_suppkey in (
select
ps_suppkey
from
partsupp
where
ps_partkey in (
select
p_partkey
from
part
where
p_name like 'midnight%'
)
and ps_availqty > (
select
0.5 * sum(l_quantity)
from
lineitem
where
l_partkey = ps_partkey
and l_suppkey = ps_suppkey
and l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
)
)
and s_nationkey = n_nationkey
and n_name = 'VIETNAM'
order by
s_name;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test444(desc="""N549"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
s_name,
count(*)  numwait,
sum(l_extendedprice* (1 - l_discount)) over (order by l_extendedprice
rows between unbounded preceding and 4 preceding) as revenue    

from
supplier,
lineitem l1,
orders,
nation
where
s_suppkey = l1.l_suppkey
and o_orderkey = l1.l_orderkey
and o_orderstatus = 'F'
and l1.l_receiptdate > l1.l_commitdate
and exists (
select
*
from
lineitem l2
where
l2.l_orderkey = l1.l_orderkey
and l2.l_suppkey <> l1.l_suppkey
)
and not exists (
select
*
from
lineitem l3
where
l3.l_orderkey = l1.l_orderkey
and l3.l_suppkey <> l1.l_suppkey
and l3.l_receiptdate > l3.l_commitdate
)
and s_nationkey = n_nationkey
and n_name = 'MOROCCO'
group by
s_name,
l_extendedprice,
l_discount
order by
numwait desc,
s_name;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test445(desc="""N550"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
cntrycode,
count(*) as numcust,
sum(c_acctbal)
over (order by c_acctbal
rows between 2 preceding and 1 preceding) as totacctbal
from
(
select
substr(c_phone, 1, 2) as cntrycode,
c_acctbal
from
customer
where
substr(c_phone,1, 2) in
('20', '15', '13', '24', '33', '34', '11')
and c_acctbal > (
select
avg(c_acctbal)
from
customer
where
c_acctbal > 9990.00
and substr(c_phone, 1, 2) in
('20', '15', '13', '24', '33', '34', '11')
)
and not exists (
select
*
from
orders
where
o_custkey = c_custkey
)
) custsale
group by
cntrycode,
c_acctbal
order by
cntrycode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test446(desc="""N551"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #q22a (Count,stddev,sum,avg,min and max with windows)
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
cntrycode,
count(*) as numcust,
sum(c_acctbal)
over (order by c_acctbal
rows between 2 preceding and 1 preceding)  as sum_totacctbal,    

avg(c_acctbal)
over (order by c_acctbal
rows between 2 preceding and 1 preceding) as avg_totacctbal,    

max(c_acctbal)
over (order by c_acctbal
rows between 2 preceding and 1 preceding) as max_totacctbal,    

min(c_acctbal)
over (order by c_acctbal
rows between 2 preceding and 1 preceding) as min_totacctbal,    

stddev(c_acctbal)
over (order by c_acctbal
rows between 2 preceding and 1 preceding) as std_totacctbal,    

count(c_acctbal)
over (order by c_acctbal
rows between 2 preceding and 1 preceding) as count_totacctbal    

from
(
select
substr(c_phone, 1, 2) as cntrycode,
c_acctbal
from
customer
where
substr(c_phone,1, 2) in
('20', '15', '13', '24', '33', '34', '11')
and c_acctbal > (
select
avg(c_acctbal)
from
customer
where
c_acctbal > 9999.00
and substr(c_phone, 1, 2) in
('20', '15', '13', '24', '33', '34', '11')
)
and not exists (
select
*
from
orders
where
o_custkey = c_custkey
)
) custsale
group by
cntrycode,
c_acctbal
order by
cntrycode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test447(desc="""N552"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #Mix
    #max 590000
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between  unbounded preceding and 2 preceding) as STDDEV,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between unbounded preceding and 2 following) as AvgPrice,
Min(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between unbounded preceding and unbounded following) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between unbounded preceding and current row) as MaxPrice,
sum(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and current row) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test448(desc="""N553"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between  unbounded preceding and 2 following) as STDDEV,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between unbounded preceding and unbounded following) as AvgPrice,
Min(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between unbounded preceding and current row) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and current row) as MaxPrice,
sum(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and 4 following) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test449(desc="""N554"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between  unbounded preceding and unbounded following) as STDDEV,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between unbounded preceding and current row) as AvgPrice,
Min(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and current row) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and 5 following) as MaxPrice,
sum(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and unbounded following) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test450(desc="""N555"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between  unbounded preceding and current row) as STDDEV,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and current row) as AvgPrice,
Min(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and 5 following) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and unbounded following) as MaxPrice,
sum(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 40 preceding and 20 preceding) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test451(desc="""N556"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and current row) as STDDEV,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and 3 following) as AvgPrice,
Min(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and unbounded following) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 40 preceding and 25 preceding) as MaxPrice,
sum(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 24 preceding and 16 following) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test452(desc="""N557"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and 4 following) as STDDEV,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and unbounded following) as AvgPrice,
Min(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 10 preceding and 5 preceding) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 40 preceding and 12 following) as MaxPrice,
sum(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 24 preceding and unbounded following) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test453(desc="""N558"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and unbounded following) as STDDEV,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and 2 preceding) as AvgPrice,
Min(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 3 preceding and 4 following) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and unbounded following) as MaxPrice,
sum(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and current row) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test454(desc="""N559"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 6 preceding and 3 preceding) as STDDEV,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and 2 following) as AvgPrice,
Min(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 3 preceding and unbounded following) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and current row) as MaxPrice,
sum(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 following and 6 following) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test455(desc="""N560"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 6 preceding and 3 preceding) as STDDEV,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and 2 following) as AvgPrice,
Min(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 3 preceding and unbounded following) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and current row) as MaxPrice,
sum(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 following and 6 following) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test456(desc="""N561"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 3 preceding and 5 following) as STDDEV,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and unbounded following) as AvgPrice,
Min(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 3 preceding and current row) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 3 following and 4 following) as MaxPrice,
sum(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 following and unbounded following) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test457(desc="""N562"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #count and variance
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between  unbounded preceding and 2 preceding) as STDDEV,
variance(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between unbounded preceding and 2 following) as AvgPrice,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between unbounded preceding and unbounded following) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between unbounded preceding and current row) as MaxPrice,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and current row) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test458(desc="""N563"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between  unbounded preceding and 2 following) as STDDEV,
variance(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between unbounded preceding and unbounded following) as AvgPrice,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between unbounded preceding and current row) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and current row) as MaxPrice,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and 4 following) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test459(desc="""N564"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between  unbounded preceding and unbounded following) as STDDEV,
variance(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between unbounded preceding and current row) as AvgPrice,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and current row) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and 5 following) as MaxPrice,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and unbounded following) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test460(desc="""N565"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between  unbounded preceding and current row) as STDDEV,
variance(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and current row) as AvgPrice,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and 5 following) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and unbounded following) as MaxPrice,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 40 preceding and 26 preceding) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test461(desc="""N566"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and current row) as STDDEV,
variance(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and 3 following) as AvgPrice,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and unbounded following) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 42 preceding and 15 preceding) as MaxPrice,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 400 preceding and 106 following) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test462(desc="""N567"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and 4 following) as STDDEV,
variance(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and unbounded following) as AvgPrice,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 30 preceding and 15 preceding) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 40 preceding and 10 following) as MaxPrice,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 400 preceding and unbounded following) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test463(desc="""N568"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between current row and unbounded following) as STDDEV,
variance(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and 2 preceding) as AvgPrice,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 3 preceding and 4 following) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and unbounded following) as MaxPrice,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and current row) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test464(desc="""N569"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 6 preceding and 3 preceding) as STDDEV,
variance(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and 2 following) as AvgPrice,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 3 preceding and unbounded following) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and current row) as MaxPrice,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 following and 6 following) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test465(desc="""N570"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 6 preceding and 3 preceding) as STDDEV,
variance(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and 2 following) as AvgPrice,
stddev(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 3 preceding and unbounded following) as MinPrice,
Max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and current row) as MaxPrice,
avg(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 following and 6 following) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test466(desc="""N571"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
count(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 3 preceding and 5 following) as STDDEV,
max(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 preceding and unbounded following) as AvgPrice,
count(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 3 preceding and current row) as MinPrice,
variance(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 3 following and 4 following) as MaxPrice,
count(o_totalprice) over (order by lineitem.l_partkey, o_totalprice rows between 4 following and unbounded following) as SumPrice,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test467(desc="""N572"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] lineitem.l_partkey, lineitem.L_QUANTITY, o_totalprice, O_ORDERSTATUS,
stddev(o_totalprice) over (order by lineitem.l_partkey,
o_totalprice rows between  unbounded preceding and 5 preceding) as STDDEV,
O_ORDERDATE
from lineitem, orders
where lineitem.l_orderkey =orders.o_orderkey
and o_totalprice > 343000;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test468(desc="""N573"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #Tests with wisc32 queries: (for dense_rank)
 
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between unbounded preceding and 5 preceding) as unique_1,
dense_rank() over (order by sum(unique1)) as DenseRank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test469(desc="""W100"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between unbounded preceding and current row) as unique_1,
dense_rank() over (order by sum(unique1)) as DenseRank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test470(desc="""W101"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between unbounded preceding and unbounded following) as unique_1,
dense_rank() over (order by sum(unique1)) as DenseRank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test471(desc="""W102"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between unbounded preceding and 5 following) as unique_1,
dense_rank() over (order by sum(unique1)) as DenseRank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test472(desc="""W103"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between current row and current row) as unique_1,
dense_rank() over (order by sum(unique1)) as DenseRank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test473(desc="""W104"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between current row and unbounded following) as unique_1,
dense_rank() over (order by sum(unique1)) as DenseRank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test474(desc="""W105"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between current row and 5 following) as unique_1,
dense_rank() over (order by sum(unique1)) as DenseRank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test475(desc="""W106"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between 5 preceding and 4 preceding) as unique_1,
dense_rank() over (order by sum(unique1)) as DenseRank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test476(desc="""W107"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between 5 preceding and current row) as unique_1,
dense_rank() over (order by sum(unique1)) as DenseRank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test477(desc="""W108"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between 5 preceding and unbounded following) as unique_1,
dense_rank() over (order by sum(unique1)) as DenseRank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test478(desc="""W109"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between 5 following and unbounded following) as unique_1,
dense_rank() over (order by sum(unique1)) as DenseRank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test479(desc="""W110"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between 5 following and 8 following) as unique_1,
dense_rank() over (order by sum(unique1)) as DenseRank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test480(desc="""W111"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between unbounded preceding and 5 preceding) as unique_1,
rank() over (order by sum(unique1)) as Rank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test481(desc="""W112"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between unbounded preceding and current row) as unique_1,
rank() over (order by sum(unique1)) as Rank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test482(desc="""W113"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between unbounded preceding and unbounded following) as unique_1,
rank() over (order by sum(unique1)) as Rank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test483(desc="""W114"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between unbounded preceding and 5 following) as unique_1,
rank() over (order by sum(unique1)) as Rank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test484(desc="""W115"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between current row and current row) as unique_1,
rank() over (order by sum(unique1)) as Rank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test485(desc="""W116"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between current row and unbounded following) as unique_1,
rank() over (order by sum(unique1)) as Rank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test486(desc="""W117"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between current row and 5 following) as unique_1,
rank() over (order by sum(unique1)) as Rank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test487(desc="""W118"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between 5 preceding and 4 preceding) as unique_1,
rank() over (order by sum(unique1)) as Rank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test488(desc="""W119"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between 5 preceding and current row) as unique_1,
rank() over (order by sum(unique1)) as Rank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test489(desc="""W120"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between 5 preceding and unbounded following) as unique_1,
rank() over (order by sum(unique1)) as Rank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test490(desc="""W121"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between 5 preceding and 4 following) as unique_1,
rank() over (order by sum(unique1)) as Rank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test491(desc="""W122"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between 5 following and unbounded following) as unique_1,
rank() over (order by sum(unique1)) as Rank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test492(desc="""W123"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from select [last 0] ten, count(unique1)
over (order by sum(unique1)
rows between 5 following and 8 following) as unique_1,
rank() over (order by sum(unique1)) as Rank
from abase
where fiftypercent = 1 group  by ten,unique1 for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test493(desc="""W124"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from select [last 0] b.ten,
1e0*sum(b.two * b.evenonepercent
+ b.four / b.oddonepercent
+ b.ten + (b.evenonepercent + 2)
+ b.twenty * (b.oddonepercent * 3)
+ b.onepercent / (b.evenonepercent + 500)
+ b.tenpercent + (b.oddonepercent * 600)
+ b.twentypercent * (b.evenonepercent + 7000)
+ b.fiftypercent / (b.oddonepercent * 8000)
+ b.evenonepercent + (b.evenonepercent + 90000)
+ b.oddonepercent * (b.oddonepercent * 10000))
over (order by b.two,b.onepercent rows between unbounded preceding and 5 preceding) as nsolap
from bbase b
where b.fiftypercent = 1
group by b.ten,
b.two,
b.onepercent,
b.evenonepercent,
b.four,
b.oddonepercent,
b.twenty,
b.tenpercent,
b.twentypercent,
b.fiftypercent
order by
b.ten for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test494(desc="""N575"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from select [last 0] b.ten,
1e0*avg(b.two * b.evenonepercent
+ b.four / b.oddonepercent
+ b.ten + (b.evenonepercent + 2)
+ b.twenty * (b.oddonepercent * 3)
+ b.onepercent / (b.evenonepercent + 500)
+ b.tenpercent + (b.oddonepercent * 600)
+ b.twentypercent * (b.evenonepercent + 7000)
+ b.fiftypercent / (b.oddonepercent * 8000)
+ b.evenonepercent + (b.evenonepercent + 90000)
+ b.oddonepercent * (b.oddonepercent * 10000))
over (order by b.two,b.onepercent rows between unbounded preceding and current row) as nsolap
from bbase b
where b.fiftypercent = 1
group by b.ten,
b.two,
b.onepercent,
b.evenonepercent,
b.four,
b.oddonepercent,
b.twenty,
b.tenpercent,
b.twentypercent,
b.fiftypercent
order by
b.ten for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test495(desc="""N576"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from select [last 0] b.ten,
1e0*avg(b.two * b.evenonepercent
+ b.four / b.oddonepercent
+ b.ten + (b.evenonepercent + 2)
+ b.twenty * (b.oddonepercent * 3)
+ b.onepercent / (b.evenonepercent + 500)
+ b.tenpercent + (b.oddonepercent * 600)
+ b.twentypercent * (b.evenonepercent + 7000)
+ b.fiftypercent / (b.oddonepercent * 8000)
+ b.evenonepercent + (b.evenonepercent + 90000)
+ b.oddonepercent * (b.oddonepercent * 10000))
over (order by b.two,b.onepercent rows between unbounded preceding and unbounded following) as nsolap
from bbase b
where b.fiftypercent = 1
group by b.ten,
b.two,
b.onepercent,
b.evenonepercent,
b.four,
b.oddonepercent,
b.twenty,
b.tenpercent,
b.twentypercent,
b.fiftypercent
order by
b.ten for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test496(desc="""N577"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from select [last 0] b.ten,
1e0*avg(b.two * b.evenonepercent
+ b.four / b.oddonepercent
+ b.ten + (b.evenonepercent + 2)
+ b.twenty * (b.oddonepercent * 3)
+ b.onepercent / (b.evenonepercent + 500)
+ b.tenpercent + (b.oddonepercent * 600)
+ b.twentypercent * (b.evenonepercent + 7000)
+ b.fiftypercent / (b.oddonepercent * 8000)
+ b.evenonepercent + (b.evenonepercent + 90000)
+ b.oddonepercent * (b.oddonepercent * 10000))
over (order by b.two,b.onepercent rows between unbounded preceding and 4 following) as nsolap
from bbase b
where b.fiftypercent = 1
group by b.ten,
b.two,
b.onepercent,
b.evenonepercent,
b.four,
b.oddonepercent,
b.twenty,
b.tenpercent,
b.twentypercent,
b.fiftypercent
order by
b.ten for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test497(desc="""N578"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from select [last 0] b.ten,
1e0*avg(b.two * b.evenonepercent
+ b.four / b.oddonepercent
+ b.ten + (b.evenonepercent + 2)
+ b.twenty * (b.oddonepercent * 3)
+ b.onepercent / (b.evenonepercent + 500)
+ b.tenpercent + (b.oddonepercent * 600)
+ b.twentypercent * (b.evenonepercent + 7000)
+ b.fiftypercent / (b.oddonepercent * 8000)
+ b.evenonepercent + (b.evenonepercent + 90000)
+ b.oddonepercent * (b.oddonepercent * 10000))
over (order by b.two,b.onepercent rows between current row and current row) as nsolap
from bbase b
where b.fiftypercent = 1
group by b.ten,
b.two,
b.onepercent,
b.evenonepercent,
b.four,
b.oddonepercent,
b.twenty,
b.tenpercent,
b.twentypercent,
b.fiftypercent
order by
b.ten for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test498(desc="""N579"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from select [last 0] b.ten,
1e0*avg(b.two * b.evenonepercent
+ b.four / b.oddonepercent
+ b.ten + (b.evenonepercent + 2)
+ b.twenty * (b.oddonepercent * 3)
+ b.onepercent / (b.evenonepercent + 500)
+ b.tenpercent + (b.oddonepercent * 600)
+ b.twentypercent * (b.evenonepercent + 7000)
+ b.fiftypercent / (b.oddonepercent * 8000)
+ b.evenonepercent + (b.evenonepercent + 90000)
+ b.oddonepercent * (b.oddonepercent * 10000))
over (order by b.two,b.onepercent rows between current row and 4 following) as nsolap
from bbase b
where b.fiftypercent = 1
group by b.ten,
b.two,
b.onepercent,
b.evenonepercent,
b.four,
b.oddonepercent,
b.twenty,
b.tenpercent,
b.twentypercent,
b.fiftypercent
order by
b.ten for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test499(desc="""N580"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from select [last 0] b.ten,
1e0*avg(b.two * b.evenonepercent
+ b.four / b.oddonepercent
+ b.ten + (b.evenonepercent + 2)
+ b.twenty * (b.oddonepercent * 3)
+ b.onepercent / (b.evenonepercent + 500)
+ b.tenpercent + (b.oddonepercent * 600)
+ b.twentypercent * (b.evenonepercent + 7000)
+ b.fiftypercent / (b.oddonepercent * 8000)
+ b.evenonepercent + (b.evenonepercent + 90000)
+ b.oddonepercent * (b.oddonepercent * 10000))
over (order by b.two,b.onepercent rows between current row and unbounded following) as nsolap
from bbase b
where b.fiftypercent = 1
group by b.ten,
b.two,
b.onepercent,
b.evenonepercent,
b.four,
b.oddonepercent,
b.twenty,
b.tenpercent,
b.twentypercent,
b.fiftypercent
order by
b.ten for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test500(desc="""N581"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from select [last 0] b.ten,
1e0*avg(b.two * b.evenonepercent
+ b.four / b.oddonepercent
+ b.ten + (b.evenonepercent + 2)
+ b.twenty * (b.oddonepercent * 3)
+ b.onepercent / (b.evenonepercent + 500)
+ b.tenpercent + (b.oddonepercent * 600)
+ b.twentypercent * (b.evenonepercent + 7000)
+ b.fiftypercent / (b.oddonepercent * 8000)
+ b.evenonepercent + (b.evenonepercent + 90000)
+ b.oddonepercent * (b.oddonepercent * 10000))
over (order by b.two,b.onepercent rows between 5 preceding and 4 preceding) as nsolap
from bbase b
where b.fiftypercent = 1
group by b.ten,
b.two,
b.onepercent,
b.evenonepercent,
b.four,
b.oddonepercent,
b.twenty,
b.tenpercent,
b.twentypercent,
b.fiftypercent
order by
b.ten for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test501(desc="""N582"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from select [last 0] b.ten,
1e0*avg(b.two * b.evenonepercent
+ b.four / b.oddonepercent
+ b.ten + (b.evenonepercent + 2)
+ b.twenty * (b.oddonepercent * 3)
+ b.onepercent / (b.evenonepercent + 500)
+ b.tenpercent + (b.oddonepercent * 600)
+ b.twentypercent * (b.evenonepercent + 7000)
+ b.fiftypercent / (b.oddonepercent * 8000)
+ b.evenonepercent + (b.evenonepercent + 90000)
+ b.oddonepercent * (b.oddonepercent * 10000))
over (order by b.two,b.onepercent rows between 4 preceding and current row) as nsolap
from bbase b
where b.fiftypercent = 1
group by b.ten,
b.two,
b.onepercent,
b.evenonepercent,
b.four,
b.oddonepercent,
b.twenty,
b.tenpercent,
b.twentypercent,
b.fiftypercent
order by
b.ten for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test502(desc="""N583"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from select [last 0] b.ten,
1e0*avg(b.two * b.evenonepercent
+ b.four / b.oddonepercent
+ b.ten + (b.evenonepercent + 2)
+ b.twenty * (b.oddonepercent * 3)
+ b.onepercent / (b.evenonepercent + 500)
+ b.tenpercent + (b.oddonepercent * 600)
+ b.twentypercent * (b.evenonepercent + 7000)
+ b.fiftypercent / (b.oddonepercent * 8000)
+ b.evenonepercent + (b.evenonepercent + 90000)
+ b.oddonepercent * (b.oddonepercent * 10000))
over (order by b.two,b.onepercent rows between 4 preceding and 5 following) as nsolap
from bbase b
where b.fiftypercent = 1
group by b.ten,
b.two,
b.onepercent,
b.evenonepercent,
b.four,
b.oddonepercent,
b.twenty,
b.tenpercent,
b.twentypercent,
b.fiftypercent
order by
b.ten for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test503(desc="""N584"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from select [last 0] b.ten,
1e0*avg(b.two * b.evenonepercent
+ b.four / b.oddonepercent
+ b.ten + (b.evenonepercent + 2)
+ b.twenty * (b.oddonepercent * 3)
+ b.onepercent / (b.evenonepercent + 500)
+ b.tenpercent + (b.oddonepercent * 600)
+ b.twentypercent * (b.evenonepercent + 7000)
+ b.fiftypercent / (b.oddonepercent * 8000)
+ b.evenonepercent + (b.evenonepercent + 90000)
+ b.oddonepercent * (b.oddonepercent * 10000))
over (order by b.two,b.onepercent rows between 6 preceding and unbounded following) as nsolap
from bbase b
where b.fiftypercent = 1
group by b.ten,
b.two,
b.onepercent,
b.evenonepercent,
b.four,
b.oddonepercent,
b.twenty,
b.tenpercent,
b.twentypercent,
b.fiftypercent
order by
b.ten for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test504(desc="""N585"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from select [last 0] b.ten,
1e0*avg(b.two * b.evenonepercent
+ b.four / b.oddonepercent
+ b.ten + (b.evenonepercent + 2)
+ b.twenty * (b.oddonepercent * 3)
+ b.onepercent / (b.evenonepercent + 500)
+ b.tenpercent + (b.oddonepercent * 600)
+ b.twentypercent * (b.evenonepercent + 7000)
+ b.fiftypercent / (b.oddonepercent * 8000)
+ b.evenonepercent + (b.evenonepercent + 90000)
+ b.oddonepercent * (b.oddonepercent * 10000))
over (order by b.two,b.onepercent rows between 4 following and unbounded following) as nsolap
from bbase b
where b.fiftypercent = 1
group by b.ten,
b.two,
b.onepercent,
b.evenonepercent,
b.four,
b.oddonepercent,
b.twenty,
b.tenpercent,
b.twentypercent,
b.fiftypercent
order by
b.ten for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test505(desc="""N586"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from select [last 0] b.ten,
1e0*avg(b.two * b.evenonepercent
+ b.four / b.oddonepercent
+ b.ten + (b.evenonepercent + 2)
+ b.twenty * (b.oddonepercent * 3)
+ b.onepercent / (b.evenonepercent + 500)
+ b.tenpercent + (b.oddonepercent * 600)
+ b.twentypercent * (b.evenonepercent + 7000)
+ b.fiftypercent / (b.oddonepercent * 8000)
+ b.evenonepercent + (b.evenonepercent + 90000)
+ b.oddonepercent * (b.oddonepercent * 10000))
over (order by b.two,b.onepercent rows between 4 following and 6 following) as nsolap
from bbase b
where b.fiftypercent = 1
group by b.ten,
b.two,
b.onepercent,
b.evenonepercent,
b.four,
b.oddonepercent,
b.twenty,
b.tenpercent,
b.twentypercent,
b.fiftypercent
order by
b.ten for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test506(desc="""N587"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_wisc32 + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from select [last 0] b.ten,
1e0*variance(b.two * b.evenonepercent
+ b.four / b.oddonepercent
+ b.ten + (b.evenonepercent + 2)
+ b.twenty * (b.oddonepercent * 3)
+ b.onepercent / (b.evenonepercent + 500)
+ b.tenpercent + (b.oddonepercent * 600)
+ b.twentypercent * (b.evenonepercent + 7000)
+ b.fiftypercent / (b.oddonepercent * 8000)
+ b.evenonepercent + (b.evenonepercent + 90000)
+ b.oddonepercent * (b.oddonepercent * 10000))
over (order by b.two,b.onepercent rows between unbounded preceding and 5 preceding) as nsolap
from bbase b
where b.fiftypercent = 1
group by b.ten,
b.two,
b.onepercent,
b.evenonepercent,
b.four,
b.oddonepercent,
b.twenty,
b.tenpercent,
b.twentypercent,
b.fiftypercent
order by
b.ten for read uncommitted access;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test507(desc="""N588"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between unbounded preceding and 2500 preceding ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test508(desc="""N589"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  o_orderdate,
o_shippriority
l_orderkey, sum(l_extendedprice * (1 - l_discount))
over (order by o_shippriority, o_orderdate
rows between 400000 following and 350000 following ) as revenue
from
customer,
orders,
lineitem
where
c_mktsegment = 'MACHINERY'
and c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate < date '1995-03-05'
and l_shipdate > date '1995-03-05'
and o_totalprice < 450000
group by
l_orderkey,
o_orderdate,
o_shippriority,
l_extendedprice,
l_discount
order by
revenue desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test509(desc="""N590"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #Mix
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between unbounded preceding and 10 preceding ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test510(desc="""N591"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between unbounded preceding and current row ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test511(desc="""N592"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between unbounded preceding and unbounded following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test512(desc="""N593"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between unbounded preceding and 10 following ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test513(desc="""N594"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between current row and current row) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test514(desc="""N595"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between current row and unbounded following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test515(desc="""N596"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between current row and 5 following) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test516(desc="""N597"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 15 preceding and 10 preceding ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test517(desc="""N598"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 10 preceding and current row) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test518(desc="""N599"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 15 preceding and unbounded following ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test519(desc="""N600"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 15 preceding and 10 following ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test520(desc="""N601"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 15 following and unbounded following ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test521(desc="""N602"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]  l_partkey, l_quantity,
sum(l_extendedprice * l_discount)
over (order by l_partkey, l_quantity
rows between 10 following  and 15 following ) as revenue
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '1' year
and l_discount between 0.02 - 0.01 and 0.02 + 0.01
and l_quantity < 25;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test522(desc="""N603"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #Mix
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test523(desc="""N604"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #Mix
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_extendedprice
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test524(desc="""N605"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #Mix
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_extendedprice,
l_discount
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test525(desc="""N606"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #Mix
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_extendedprice,
l_discount,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test526(desc="""N607"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_charge,
avg(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_extendedprice,
l_discount,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test527(desc="""N608"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_charge,
avg(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_extendedprice,
l_discount,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test528(desc="""N609"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_returnflag,
l_linestatus,
sum(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_qty ,
sum(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_base_price ,
sum(l_extendedprice * (1 - l_discount)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as sum_charge,
avg(l_quantity) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_qty,
avg(l_extendedprice) over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_price,
avg(l_discount)  over (order by l_quantity
rows between unbounded preceding and 10 preceding ) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date '1998-12-01' - interval '72' day(2)
group by
l_returnflag,
l_linestatus,
l_quantity,
l_extendedprice,
l_discount,
l_tax
order by
l_returnflag,
l_linestatus;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test529(desc="""N610"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between unbounded preceding and 10 preceding ) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test530(desc="""N611"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between unbounded preceding and current row) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test531(desc="""N612"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between unbounded preceding and unbounded following) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test532(desc="""N613"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between unbounded preceding and 5 following)  as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test533(desc="""N614"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between current row and current row) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test534(desc="""N615"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between current row and unbounded following) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test535(desc="""N616"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between current row and 5 following) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test536(desc="""N617"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between 10 preceding and 8 preceding) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test537(desc="""N618"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between 5 preceding and current row) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test538(desc="""N619"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between 5 preceding and unbounded following) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test539(desc="""N620"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between 10 preceding and 5 following ) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test540(desc="""N621"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between 5 following and unbounded following    ) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test541(desc="""N622"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between 5 following and 10 following    ) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test542(desc="""N623"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
o_orderkey,
o_orderpriority,
min(o_totalprice) over (order by o_custkey, o_orderkey
rows between 20 preceding and 12 preceding    ) as ordercount
from
orders
where
o_orderdate >= date '1993-10-01'
and o_orderdate < date '1993-10-01' + interval '3' month
and exists (
select
*
from
lineitem
where l_orderkey = o_orderkey
and l_commitdate < l_receiptdate
)
group by
o_orderpriority,
o_orderkey,
o_custkey,
o_totalprice
order by
o_orderpriority;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test543(desc="""N624"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between unbounded preceding and 4 preceding ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum(ps_supplycost * ps_availqty) * 0.0000001000    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test544(desc="""N625"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between unbounded preceding and current row) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test545(desc="""N626"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between unbounded preceding and unbounded following) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test546(desc="""N627"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between unbounded preceding and 100 following ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test547(desc="""N628"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between current row and current row ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test548(desc="""N629"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between current row and unbounded following) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test549(desc="""N630"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between current row and 100 following ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test550(desc="""N631"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between 100 preceding and 50 preceding) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test551(desc="""N632"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between 100 preceding and current row) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test552(desc="""N633"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between 100 preceding and unbounded following ) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test553(desc="""N634"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between 100 preceding and 200 following) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test554(desc="""N635"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between 100 following and unbounded following) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test555(desc="""N636"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
ps_partkey,
sum(ps_supplycost * ps_availqty) over (order by partsupp.ps_suppkey
rows between 100 following and 200 following) as value0
from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
group by
ps_suppkey,
ps_supplycost,
PS_AVAILQTY,
ps_partkey having
sum(ps_supplycost * ps_availqty) > (
select
sum((ps_supplycost * ps_availqty) * 0.0000001000)    

from
partsupp,
supplier,
nation
where
ps_suppkey = s_suppkey
and s_nationkey = n_nationkey
and n_name = 'BRAZIL'
)
order by value0 desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test556(desc="""N637"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between unbounded preceding and 4 preceding )  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between unbounded preceding and current row) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test557(desc="""N638"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between unbounded preceding and unbounded following )  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between unbounded preceding and 4 following ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test558(desc="""N639"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between current row and current row )  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between current row and unbounded following ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test559(desc="""N640"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between current row and 10 following )  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between 40 preceding and 20 preceding ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test560(desc="""N641"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between 100 preceding and current row)  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between 10 preceding and unbounded following ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test561(desc="""N642"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between 10 preceding and 20 following )  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between 10 following and unbounded following ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test562(desc="""N643"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between 100 following and 200 following )  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between 200 following and unbounded following ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test563(desc="""N644"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between unbounded preceding and current row )  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between  unbounded preceding and 4 preceding ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test564(desc="""N645"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between  unbounded preceding and 4 following  )  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between unbounded preceding and unbounded following ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    _testmgr.testcase_end(desc)

def test565(desc="""N646"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between current row and unbounded following  )  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between current row and current row  ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test566(desc="""N647"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between 30 preceding and 20 preceding  )  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between current row and 10 following ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test567(desc="""N648"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between 10 preceding and unbounded following  )  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between 100 preceding and current row ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test568(desc="""N649"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between 10 following and unbounded following )  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between 10 preceding and 20 following  ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test569(desc="""N650"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
l_shipmode,
sum((case
when o_orderpriority = '1-URGENT'
or o_orderpriority = '2-HIGH'
then 1
else 0
end))    

over (order by l_orderkey
rows between unbounded preceding and unbounded following )  as high_line_count,
sum(case
when o_orderpriority <> '1-URGENT'
and o_orderpriority <> '2-HIGH'
then 1
else 0
end)
over (order by l_orderkey
rows between 20 following and unbounded following ) as low_line_count
from
orders,
lineitem
where
o_orderkey = l_orderkey
and l_shipmode in ('MAIL', 'TRUCK')
and l_commitdate < l_receiptdate
and l_shipdate < l_commitdate
and l_receiptdate >= date '1993-01-01'
and l_receiptdate < date '1993-01-01' + interval '12' month
group by
l_shipmode,
l_orderkey,
o_orderpriority
order by
l_shipmode;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test570(desc="""N651"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between unbounded preceding and 4 preceding ) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test571(desc="""N652"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between unbounded preceding and current row) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test572(desc="""N653"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between unbounded preceding and unbounded following) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test573(desc="""N654"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between unbounded preceding and 20 following ) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test574(desc="""N655"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between current row and current row ) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test575(desc="""N656"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between current row and unbounded following ) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test576(desc="""N657"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between current row and 12 following) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test577(desc="""N658"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between 10 preceding and 8 preceding) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test578(desc="""N659"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #partition by claus
 
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over ( partition by c_custkey order by l_orderkey
rows between 10 preceding and 8 preceding ) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test579(desc="""N660"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between 10 preceding and current row) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test580(desc="""N661"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between 10 preceding and unbounded following) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test581(desc="""N662"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between 10 preceding and 14 following) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test582(desc="""N663"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between 10 following and unbounded following ) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test583(desc="""N664"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between 10 following and 18 following) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test584(desc="""N665"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpch2x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
sum(l_quantity) over (order by l_orderkey
rows between 10 following and unbounded following) as lquantity    

from
customer,
orders,
lineitem
where
o_orderkey in (
select
l_orderkey
from
lineitem
group by
l_orderkey having
sum(l_quantity) > 312
)
and c_custkey = o_custkey
and o_orderkey = l_orderkey
group by
c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
l_orderkey,
l_quantity
order by
o_totalprice desc,
o_orderdate;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test585(desc="""N666"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select  [last 0]
substr(w_warehouse_name,1,20)
,sm_type
,cc_name
,sum(case when (cs_ship_date_sk - cs_sold_date_sk <= 30 ) then 1 else 0 end) over (order by cs_ship_date_sk
rows between unbounded preceding and unbounded following ) as "30 days"
,avg(case when (cs_ship_date_sk - cs_sold_date_sk > 30) and
(cs_ship_date_sk - cs_sold_date_sk <= 60) then 1 else 0 end ) over (order by cs_ship_date_sk
rows between unbounded preceding and unbounded following ) as "31-60 days"
,count(case when (cs_ship_date_sk - cs_sold_date_sk > 60) and
(cs_ship_date_sk - cs_sold_date_sk <= 90) then 1 else 0 end)  over (order by cs_ship_date_sk
rows between unbounded preceding and unbounded following ) as "61-90 days"
,max(case when (cs_ship_date_sk - cs_sold_date_sk > 90) and
(cs_ship_date_sk - cs_sold_date_sk <= 120) then 1 else 0 end) over (order by cs_ship_date_sk
rows between unbounded preceding and unbounded following ) as "91-120 days"
,min(case when (cs_ship_date_sk - cs_sold_date_sk  > 120) then 1 else 0 end) over (order by cs_ship_date_sk
rows between unbounded preceding and unbounded following ) as ">120 days"
from
catalog_sales
,warehouse
,ship_mode
,call_center
,date_dim
where
extract (year from d_date) = 2002
and cs_ship_date_sk   = d_date_sk
and cs_warehouse_sk   = w_warehouse_sk
and cs_ship_mode_sk   = sm_ship_mode_sk
and cs_call_center_sk = cc_call_center_sk
group by
1
,sm_type
,cc_name,
cs_ship_date_sk,
cs_sold_date_sk;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test586(desc="""N667"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
sum(ss_ext_sales_price)  over (order by i_manufact_id
rows between 10 preceding and unbounded following ) as ext_price
from date_dim, store_sales, item,customer,customer_address,store
where d_date_sk = ss_sold_date_sk
and ss_item_sk = i_item_sk
and i_manager_id=36
and d_moy=11
and d_year=2001
and ss_customer_sk = c_customer_sk
and c_current_addr_sk = ca_address_sk
and substr(ca_zip,1,5) <> substr(s_zip,1,5)
and ss_store_sk = s_store_sk
group by i_brand, i_brand_id,i_manufact_id, i_manufact,SS_EXT_SALES_PRICE
order by ext_price desc, i_brand, i_brand_id,i_manufact_id, i_manufact ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test587(desc="""N668"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
t_s_secyear.customer_id,
t_s_secyear.customer_first_name,
t_s_secyear.customer_last_name,
t_s_secyear.c_preferred_cust_flag,
t_s_secyear.c_birth_country,
t_s_secyear.c_login
from (
select  c_customer_id customer_id
,c_first_name customer_first_name
,c_last_name customer_last_name
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year dyear
,sum(ss_ext_list_price - ss_ext_discount_amt) over (order by ss_ext_list_price
rows between unbounded preceding and unbounded following ) as year_total
,'s' sale_type
from customer
,store_sales
,date_dim
where c_customer_sk = ss_customer_sk
and ss_sold_date_sk = d_date_sk
group by c_customer_id
,c_first_name
,c_last_name
,d_year
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year,
SS_EXT_LIST_PRICE,
ss_ext_discount_amt
union all
select  c_customer_id customer_id
,c_first_name customer_first_name
,c_last_name customer_last_name
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year dyear
,sum(ws_ext_list_price - ws_ext_discount_amt) over (order by d_year
rows between unbounded preceding and unbounded following ) as year_total
,'w' sale_type
from customer
,web_sales
,date_dim
where c_customer_sk = ws_bill_customer_sk
and ws_sold_date_sk = d_date_sk
group by c_customer_id
,c_first_name
,c_last_name
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year
,WS_EXT_LIST_PRICE
,WS_EXT_DISCOUNT_AMT
) as t_s_firstyear
,(
select  c_customer_id customer_id
,c_first_name customer_first_name
,c_last_name customer_last_name
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year dyear
,sum(ss_ext_list_price - ss_ext_discount_amt) over (order by d_year
rows between unbounded preceding and unbounded following ) as year_total
,'s' sale_type
from customer
,store_sales
,date_dim
where c_customer_sk = ss_customer_sk
and ss_sold_date_sk = d_date_sk
group by c_customer_id
,c_first_name
,c_last_name
,d_year
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year
,SS_EXT_LIST_PRICE
,SS_EXT_DISCOUNT_AMT    

union all
select c_customer_id customer_id
,c_first_name customer_first_name
,c_last_name customer_last_name
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year dyear
,sum(ws_ext_list_price - ws_ext_discount_amt) over (order by d_year
rows between unbounded preceding and unbounded following ) as year_total
,'w' sale_type
from customer
,web_sales
,date_dim
where c_customer_sk = ws_bill_customer_sk
and ws_sold_date_sk = d_date_sk
group by c_customer_id
,c_first_name
,c_last_name
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year
,WS_EXT_LIST_PRICE
,WS_EXT_DISCOUNT_AMT
) as t_s_secyear
,(
select  c_customer_id customer_id
,c_first_name customer_first_name
,c_last_name customer_last_name
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year dyear
,sum(ss_ext_list_price - ss_ext_discount_amt) over (order by d_year
rows between unbounded preceding and unbounded following ) as year_total
,'s' sale_type
from customer
,store_sales
,date_dim
where c_customer_sk = ss_customer_sk
and ss_sold_date_sk = d_date_sk
group by c_customer_id
,c_first_name
,c_last_name
,d_year
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year
,SS_EXT_LIST_PRICE
,SS_EXT_DISCOUNT_AMT
union all
select  c_customer_id customer_id
,c_first_name customer_first_name
,c_last_name customer_last_name
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year dyear
,sum(ws_ext_list_price - ws_ext_discount_amt) over (order by d_year
rows between unbounded preceding and unbounded following ) as year_total
,'w' sale_type
from customer
,web_sales
,date_dim
where c_customer_sk = ws_bill_customer_sk
and ws_sold_date_sk = d_date_sk
group by c_customer_id
,c_first_name
,c_last_name
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year
,WS_EXT_LIST_PRICE
,WS_EXT_DISCOUNT_AMT
) as t_w_firstyear
,(
select  c_customer_id customer_id
,c_first_name customer_first_name
,c_last_name customer_last_name
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year dyear
,sum(ss_ext_list_price - ss_ext_discount_amt) over (order by d_year
rows between unbounded preceding and unbounded following ) as year_total
,'s' sale_type
from customer
,store_sales
,date_dim
where c_customer_sk = ss_customer_sk
and ss_sold_date_sk = d_date_sk
group by c_customer_id
,c_first_name
,c_last_name
,d_year
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year
,SS_EXT_LIST_PRICE
,SS_EXT_DISCOUNT_AMT
union all
select c_customer_id customer_id
,c_first_name customer_first_name
,c_last_name customer_last_name
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year dyear
,sum(ws_ext_list_price - ws_ext_discount_amt) over (order by d_year
rows between unbounded preceding and unbounded following ) as year_total
,'w' sale_type
from customer
,web_sales
,date_dim
where c_customer_sk = ws_bill_customer_sk
and ws_sold_date_sk = d_date_sk
group by c_customer_id
,c_first_name
,c_last_name
,c_preferred_cust_flag
,c_birth_country
,c_login
,c_email_address
,d_year
,WS_EXT_LIST_PRICE
,WS_EXT_DISCOUNT_AMT    

) as t_w_secyear
where t_s_secyear.customer_id = t_s_firstyear.customer_id
and t_s_firstyear.customer_id = t_w_secyear.customer_id
and t_s_firstyear.customer_id = t_w_firstyear.customer_id
and t_s_firstyear.sale_type = 's'
and t_w_firstyear.sale_type = 'w'
and t_s_secyear.sale_type = 's'
and t_w_secyear.sale_type = 'w'
and t_s_firstyear.dyear = 1999
and t_s_secyear.dyear = 1999+1
and t_w_firstyear.dyear = 1999
and t_w_secyear.dyear = 1999+1
and t_s_firstyear.year_total > 0
and t_w_firstyear.year_total > 0
and case when t_w_firstyear.year_total > 0
then t_w_secyear.year_total / t_w_firstyear.year_total else null end
> case
when t_s_firstyear.year_total > 0
then t_s_secyear.year_total / t_s_firstyear.year_total else null end
order by t_s_secyear.customer_id,
t_s_secyear.customer_first_name,
t_s_secyear.customer_last_name,
t_s_secyear.c_preferred_cust_flag,
t_s_secyear.c_birth_country,
t_s_secyear.c_login;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test588(desc="""N669"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0]
*
from
(
select
w_warehouse_name
,i_item_id
,sum(case when (cast(d_date as date) < cast ('1999-06-25' as date))
then inv_quantity_on_hand
else 0
end)  over (order by i_item_id
rows between current row and unbounded following ) as inv_before
,sum(case when (cast(d_date as date) >= cast ('1999-06-25' as date))
then inv_quantity_on_hand
else 0
end)  over (order by i_item_id
rows between current row and unbounded following )as inv_after
from
inventory
,warehouse
,item
,date_dim
where
i_current_price between 0.99 and 1.49
and i_item_sk          = inv_item_sk
and inv_warehouse_sk   = w_warehouse_sk
and inv_date_sk    = d_date_sk
and d_date between (cast ('1999-06-25' as date) - 30 )
and (cast ('1999-06-25' as date) + 30 )
group by
w_warehouse_name,d_date,INV_QUANTITY_ON_Hand, i_item_id) x
where (case when inv_before > 0
then inv_after / inv_before
else null
end) between 2/3 and 3/2;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test589(desc="""N670"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0]
c_last_name,c_first_name,ss_ticket_number,cnt,
sum(C_CUSTOMER_SK) over (order by C_CUSTOMER_ID
rows between 5 following and unbounded following) as total_sales
from
(select ss_ticket_number
,ss_customer_sk
,count(*) cnt
from store_sales,date_dim,store,household_demographics
where store_sales.ss_sold_date_sk = date_dim.d_date_sk
and store_sales.ss_store_sk = store.s_store_sk
and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
and date_dim.d_dom between 1 and 5
and date_dim.d_year in (1999,1999+1,1999+2)
and store.s_city in ('Fairview','Midway','Midway',
'Fairview','Fairview','Fairview')
and (household_demographics.hd_buy_potential like '1001-5000%' or
household_demographics.hd_buy_potential like '5001-10000%')
group by ss_ticket_number,ss_customer_sk) mp,customer
where ss_customer_sk = c_customer_sk
and cnt between 1 and 5
order by cnt desc;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test590(desc="""N671"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,sum(ss_net_profit) over (order by  i_item_id ,s_store_id
rows between unbounded preceding and 5 preceding)  as store_sales_profit
,max(sr_net_loss) over (order by  i_item_id ,s_store_id
rows between unbounded preceding and current row) as store_returns_loss
,min(cs_net_profit) over (order by  i_item_id ,s_store_id
rows between unbounded preceding and unbounded following) as catalog_sales_profit
from
store_sales
,store_returns
,catalog_sales
,date_dim d1
,date_dim d2
,date_dim d3
,store
,item
where
d1.d_moy = 4
and d1.d_year = 2001
and d1.d_date_sk = ss_sold_date_sk
and i_item_sk = ss_item_sk
and s_store_sk = ss_store_sk
and ss_customer_sk = sr_customer_sk
and ss_item_sk = sr_item_sk
and ss_ticket_number = sr_ticket_number
and sr_returned_date_sk = d2.d_date_sk
and d2.d_moy               between 4 and  4 +6
and d2.d_year              = 2001
and sr_customer_sk = cs_bill_customer_sk
and sr_item_sk = cs_item_sk
and cs_sold_date_sk = d3.d_date_sk
and d3.d_moy               between 4 and   4 +6
and d3.d_year              = 2001
group by
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,ss_net_profit
,sr_net_loss
,cs_net_profit
order by
i_item_id
,i_item_desc
,s_store_id
,s_store_name ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test591(desc="""N672"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,sum(ss_net_profit) over (order by  i_item_id ,s_store_id
rows between unbounded preceding and current row)  as store_sales_profit
,sum(sr_net_loss) over (order by  i_item_id ,s_store_id
rows between unbounded preceding and unbounded following) as store_returns_loss
,sum(cs_net_profit) over (order by  i_item_id ,s_store_id
rows between unbounded preceding and 4 following) as catalog_sales_profit
from
store_sales
,store_returns
,catalog_sales
,date_dim d1
,date_dim d2
,date_dim d3
,store
,item
where
d1.d_moy = 4
and d1.d_year = 2001
and d1.d_date_sk = ss_sold_date_sk
and i_item_sk = ss_item_sk
and s_store_sk = ss_store_sk
and ss_customer_sk = sr_customer_sk
and ss_item_sk = sr_item_sk
and ss_ticket_number = sr_ticket_number
and sr_returned_date_sk = d2.d_date_sk
and d2.d_moy               between 4 and  4 +6
and d2.d_year              = 2001
and sr_customer_sk = cs_bill_customer_sk
and sr_item_sk = cs_item_sk
and cs_sold_date_sk = d3.d_date_sk
and d3.d_moy               between 4 and   4 +6
and d3.d_year              = 2001
group by
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,ss_net_profit
,sr_net_loss
,cs_net_profit
order by
i_item_id
,i_item_desc
,s_store_id
,s_store_name ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test592(desc="""N673"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,sum(ss_net_profit) over (order by  i_item_id ,s_store_id
rows between unbounded preceding and unbounded following)  as store_sales_profit
,sum(sr_net_loss) over (order by  i_item_id ,s_store_id
rows between unbounded preceding and 6 following) as store_returns_loss
,sum(cs_net_profit) over (order by  i_item_id ,s_store_id
rows between current row and current row) as catalog_sales_profit
from
store_sales
,store_returns
,catalog_sales
,date_dim d1
,date_dim d2
,date_dim d3
,store
,item
where
d1.d_moy = 4
and d1.d_year = 2001
and d1.d_date_sk = ss_sold_date_sk
and i_item_sk = ss_item_sk
and s_store_sk = ss_store_sk
and ss_customer_sk = sr_customer_sk
and ss_item_sk = sr_item_sk
and ss_ticket_number = sr_ticket_number
and sr_returned_date_sk = d2.d_date_sk
and d2.d_moy               between 4 and  4 +6
and d2.d_year              = 2001
and sr_customer_sk = cs_bill_customer_sk
and sr_item_sk = cs_item_sk
and cs_sold_date_sk = d3.d_date_sk
and d3.d_moy               between 4 and   4 +6
and d3.d_year              = 2001
group by
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,ss_net_profit
,sr_net_loss
,cs_net_profit
order by
i_item_id
,i_item_desc
,s_store_id
,s_store_name ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test593(desc="""N674"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,sum(ss_net_profit) over (order by  i_item_id ,s_store_id
rows between unbounded preceding and 6 following)  as store_sales_profit
,sum(sr_net_loss) over (order by  i_item_id ,s_store_id
rows between current row and current row) as store_returns_loss
,sum(cs_net_profit) over (order by  i_item_id ,s_store_id
rows between current row and unbounded following) as catalog_sales_profit
from
store_sales
,store_returns
,catalog_sales
,date_dim d1
,date_dim d2
,date_dim d3
,store
,item
where
d1.d_moy = 4
and d1.d_year = 2001
and d1.d_date_sk = ss_sold_date_sk
and i_item_sk = ss_item_sk
and s_store_sk = ss_store_sk
and ss_customer_sk = sr_customer_sk
and ss_item_sk = sr_item_sk
and ss_ticket_number = sr_ticket_number
and sr_returned_date_sk = d2.d_date_sk
and d2.d_moy               between 4 and  4 +6
and d2.d_year              = 2001
and sr_customer_sk = cs_bill_customer_sk
and sr_item_sk = cs_item_sk
and cs_sold_date_sk = d3.d_date_sk
and d3.d_moy               between 4 and   4 +6
and d3.d_year              = 2001
group by
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,ss_net_profit
,sr_net_loss
,cs_net_profit
order by
i_item_id
,i_item_desc
,s_store_id
,s_store_name ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test594(desc="""N675"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,sum(ss_net_profit) over (order by  i_item_id ,s_store_id
rows between current row and current row)  as store_sales_profit
,sum(sr_net_loss) over (order by  i_item_id ,s_store_id
rows between current row and unbounded following) as store_returns_loss
,sum(cs_net_profit) over (order by  i_item_id ,s_store_id
rows between current row and 4 following) as catalog_sales_profit
from
store_sales
,store_returns
,catalog_sales
,date_dim d1
,date_dim d2
,date_dim d3
,store
,item
where
d1.d_moy = 4
and d1.d_year = 2001
and d1.d_date_sk = ss_sold_date_sk
and i_item_sk = ss_item_sk
and s_store_sk = ss_store_sk
and ss_customer_sk = sr_customer_sk
and ss_item_sk = sr_item_sk
and ss_ticket_number = sr_ticket_number
and sr_returned_date_sk = d2.d_date_sk
and d2.d_moy               between 4 and  4 +6
and d2.d_year              = 2001
and sr_customer_sk = cs_bill_customer_sk
and sr_item_sk = cs_item_sk
and cs_sold_date_sk = d3.d_date_sk
and d3.d_moy               between 4 and   4 +6
and d3.d_year              = 2001
group by
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,ss_net_profit
,sr_net_loss
,cs_net_profit
order by
i_item_id
,i_item_desc
,s_store_id
,s_store_name ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test595(desc="""N676"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,sum(ss_net_profit) over (order by  i_item_id ,s_store_id
rows between current row and unbounded following)  as store_sales_profit
,sum(sr_net_loss) over (order by  i_item_id ,s_store_id
rows between current row and 4 following) as store_returns_loss
,sum(cs_net_profit) over (order by  i_item_id ,s_store_id
rows between 18 preceding and 12 preceding) as catalog_sales_profit
from
store_sales
,store_returns
,catalog_sales
,date_dim d1
,date_dim d2
,date_dim d3
,store
,item
where
d1.d_moy = 4
and d1.d_year = 2001
and d1.d_date_sk = ss_sold_date_sk
and i_item_sk = ss_item_sk
and s_store_sk = ss_store_sk
and ss_customer_sk = sr_customer_sk
and ss_item_sk = sr_item_sk
and ss_ticket_number = sr_ticket_number
and sr_returned_date_sk = d2.d_date_sk
and d2.d_moy               between 4 and  4 +6
and d2.d_year              = 2001
and sr_customer_sk = cs_bill_customer_sk
and sr_item_sk = cs_item_sk
and cs_sold_date_sk = d3.d_date_sk
and d3.d_moy               between 4 and   4 +6
and d3.d_year              = 2001
group by
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,ss_net_profit
,sr_net_loss
,cs_net_profit
order by
i_item_id
,i_item_desc
,s_store_id
,s_store_name ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test596(desc="""N677"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,sum(ss_net_profit) over (order by  i_item_id ,s_store_id
rows between current row and 4 following)  as store_sales_profit
,sum(sr_net_loss) over (order by  i_item_id ,s_store_id
rows between 12 preceding and 6 preceding) as store_returns_loss
,sum(cs_net_profit) over (order by  i_item_id ,s_store_id
rows between 4 preceding and current row) as catalog_sales_profit
from
store_sales
,store_returns
,catalog_sales
,date_dim d1
,date_dim d2
,date_dim d3
,store
,item
where
d1.d_moy = 4
and d1.d_year = 2001
and d1.d_date_sk = ss_sold_date_sk
and i_item_sk = ss_item_sk
and s_store_sk = ss_store_sk
and ss_customer_sk = sr_customer_sk
and ss_item_sk = sr_item_sk
and ss_ticket_number = sr_ticket_number
and sr_returned_date_sk = d2.d_date_sk
and d2.d_moy               between 4 and  4 +6
and d2.d_year              = 2001
and sr_customer_sk = cs_bill_customer_sk
and sr_item_sk = cs_item_sk
and cs_sold_date_sk = d3.d_date_sk
and d3.d_moy               between 4 and   4 +6
and d3.d_year              = 2001
group by
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,ss_net_profit
,sr_net_loss
,cs_net_profit
order by
i_item_id
,i_item_desc
,s_store_id
,s_store_name ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test597(desc="""N678"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,sum(ss_net_profit) over (order by  i_item_id ,s_store_id
rows between 8 preceding and 6 preceding)  as store_sales_profit
,sum(sr_net_loss) over (order by  i_item_id ,s_store_id
rows between 4 preceding and current row) as store_returns_loss
,sum(cs_net_profit) over (order by  i_item_id ,s_store_id
rows between 4 preceding and unbounded following) as catalog_sales_profit
from
store_sales
,store_returns
,catalog_sales
,date_dim d1
,date_dim d2
,date_dim d3
,store
,item
where
d1.d_moy = 4
and d1.d_year = 2001
and d1.d_date_sk = ss_sold_date_sk
and i_item_sk = ss_item_sk
and s_store_sk = ss_store_sk
and ss_customer_sk = sr_customer_sk
and ss_item_sk = sr_item_sk
and ss_ticket_number = sr_ticket_number
and sr_returned_date_sk = d2.d_date_sk
and d2.d_moy               between 4 and  4 +6
and d2.d_year              = 2001
and sr_customer_sk = cs_bill_customer_sk
and sr_item_sk = cs_item_sk
and cs_sold_date_sk = d3.d_date_sk
and d3.d_moy               between 4 and   4 +6
and d3.d_year              = 2001
group by
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,ss_net_profit
,sr_net_loss
,cs_net_profit
order by
i_item_id
,i_item_desc
,s_store_id
,s_store_name ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test598(desc="""N679"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,sum(ss_net_profit) over (order by  i_item_id ,s_store_id
rows between 4 preceding and current row)  as store_sales_profit
,sum(sr_net_loss) over (order by  i_item_id ,s_store_id
rows between 4 preceding and unbounded following) as store_returns_loss
,sum(cs_net_profit) over (order by  i_item_id ,s_store_id
rows between 4 preceding and 6 following) as catalog_sales_profit
from
store_sales
,store_returns
,catalog_sales
,date_dim d1
,date_dim d2
,date_dim d3
,store
,item
where
d1.d_moy = 4
and d1.d_year = 2001
and d1.d_date_sk = ss_sold_date_sk
and i_item_sk = ss_item_sk
and s_store_sk = ss_store_sk
and ss_customer_sk = sr_customer_sk
and ss_item_sk = sr_item_sk
and ss_ticket_number = sr_ticket_number
and sr_returned_date_sk = d2.d_date_sk
and d2.d_moy               between 4 and  4 +6
and d2.d_year              = 2001
and sr_customer_sk = cs_bill_customer_sk
and sr_item_sk = cs_item_sk
and cs_sold_date_sk = d3.d_date_sk
and d3.d_moy               between 4 and   4 +6
and d3.d_year              = 2001
group by
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,ss_net_profit
,sr_net_loss
,cs_net_profit
order by
i_item_id
,i_item_desc
,s_store_id
,s_store_name ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test599(desc="""N680"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,sum(ss_net_profit) over (order by  i_item_id ,s_store_id
rows between 4 preceding and unbounded following)  as store_sales_profit
,sum(sr_net_loss) over (order by  i_item_id ,s_store_id
rows between 4 preceding and 6 following) as store_returns_loss
,sum(cs_net_profit) over (order by  i_item_id ,s_store_id
rows between 2 following and 4 following) as catalog_sales_profit
from
store_sales
,store_returns
,catalog_sales
,date_dim d1
,date_dim d2
,date_dim d3
,store
,item
where
d1.d_moy = 4
and d1.d_year = 2001
and d1.d_date_sk = ss_sold_date_sk
and i_item_sk = ss_item_sk
and s_store_sk = ss_store_sk
and ss_customer_sk = sr_customer_sk
and ss_item_sk = sr_item_sk
and ss_ticket_number = sr_ticket_number
and sr_returned_date_sk = d2.d_date_sk
and d2.d_moy               between 4 and  4 +6
and d2.d_year              = 2001
and sr_customer_sk = cs_bill_customer_sk
and sr_item_sk = cs_item_sk
and cs_sold_date_sk = d3.d_date_sk
and d3.d_moy               between 4 and   4 +6
and d3.d_year              = 2001
group by
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,ss_net_profit
,sr_net_loss
,cs_net_profit
order by
i_item_id
,i_item_desc
,s_store_id
,s_store_name ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test600(desc="""N681"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,sum(ss_net_profit) over (order by  i_item_id ,s_store_id
rows between 4 preceding and 6 following)  as store_sales_profit
,sum(sr_net_loss) over (order by  i_item_id ,s_store_id
rows between 2 following and 12 following) as store_returns_loss
,sum(cs_net_profit) over (order by  i_item_id ,s_store_id
rows between 3 following and unbounded following) as catalog_sales_profit
from
store_sales
,store_returns
,catalog_sales
,date_dim d1
,date_dim d2
,date_dim d3
,store
,item
where
d1.d_moy = 4
and d1.d_year = 2001
and d1.d_date_sk = ss_sold_date_sk
and i_item_sk = ss_item_sk
and s_store_sk = ss_store_sk
and ss_customer_sk = sr_customer_sk
and ss_item_sk = sr_item_sk
and ss_ticket_number = sr_ticket_number
and sr_returned_date_sk = d2.d_date_sk
and d2.d_moy               between 4 and  4 +6
and d2.d_year              = 2001
and sr_customer_sk = cs_bill_customer_sk
and sr_item_sk = cs_item_sk
and cs_sold_date_sk = d3.d_date_sk
and d3.d_moy               between 4 and   4 +6
and d3.d_year              = 2001
group by
i_item_id
,i_item_desc
,s_store_id
,s_store_name
,ss_net_profit
,sr_net_loss
,cs_net_profit
order by
i_item_id
,i_item_desc
,s_store_id
,s_store_name ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test601(desc="""N682"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0] i_item_id,
avg(cs_quantity) over (order by cs_quantity,cs_item_sk
rows between 10 preceding and unbounded following ) as agg1,
avg(cs_list_price) over (order by cs_quantity,cs_item_sk
rows between 10 preceding and unbounded following ) as agg2,
avg(cs_coupon_amt) over (order by cs_quantity,cs_item_sk
rows between 10 preceding and unbounded following ) as agg3,
avg(cs_sales_price) over (order by cs_quantity,cs_item_sk
rows between 10 preceding and unbounded following ) as agg4
from catalog_sales, customer_demographics, date_dim, item, promotion
where cs_sold_date_sk = d_date_sk and
cs_item_sk = i_item_sk and
cs_bill_cdemo_sk = cd_demo_sk and
cs_promo_sk = p_promo_sk and
cd_gender = 'M' and
cd_marital_status = 'S' and
cd_education_status = 'Unknown' and
(p_channel_email = 'N' or p_channel_event = 'N') and
d_year = 1999
group by i_item_id,cs_quantity,cs_list_price,cs_item_sk,cs_sales_price,cs_coupon_amt;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test602(desc="""N683"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0] i_item_id,
avg(cs_quantity) over (order by cs_quantity,cs_item_sk
rows between unbounded preceding and 4 preceding ) as agg1,
sum(cs_list_price) over (order by cs_quantity,cs_item_sk
rows between unbounded preceding and current row ) as agg2,
count(cs_coupon_amt) over (order by cs_quantity,cs_item_sk
rows between unbounded preceding and unbounded following ) as agg3,
min(cs_sales_price) over (order by cs_quantity,cs_item_sk
rows between unbounded preceding and 2 following ) as agg4
from catalog_sales, customer_demographics, date_dim, item, promotion
where cs_sold_date_sk = d_date_sk and
cs_item_sk = i_item_sk and
cs_bill_cdemo_sk = cd_demo_sk and
cs_promo_sk = p_promo_sk and
cd_gender = 'M' and
cd_marital_status = 'S' and
cd_education_status = 'Unknown' and
(p_channel_email = 'N' or p_channel_event = 'N') and
d_year = 1999
group by i_item_id,cs_quantity,cs_list_price,cs_item_sk,cs_sales_price,cs_coupon_amt;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test603(desc="""N684"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0] i_item_id,
avg(cs_quantity) over (order by cs_quantity,cs_item_sk
rows between unbounded preceding and current row ) as agg1,
sum(cs_list_price) over (order by cs_quantity,cs_item_sk
rows between unbounded preceding and unbounded following ) as agg2,
count(cs_coupon_amt) over (order by cs_quantity,cs_item_sk
rows between unbounded preceding and 4 following ) as agg3,
min(cs_sales_price) over (order by cs_quantity,cs_item_sk
rows between current row and current row ) as agg4
from catalog_sales, customer_demographics, date_dim, item, promotion
where cs_sold_date_sk = d_date_sk and
cs_item_sk = i_item_sk and
cs_bill_cdemo_sk = cd_demo_sk and
cs_promo_sk = p_promo_sk and
cd_gender = 'M' and
cd_marital_status = 'S' and
cd_education_status = 'Unknown' and
(p_channel_email = 'N' or p_channel_event = 'N') and
d_year = 1999
group by i_item_id,cs_quantity,cs_list_price,cs_item_sk,cs_sales_price,cs_coupon_amt;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test604(desc="""N685"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0] i_item_id,
avg(cs_quantity) over (order by cs_quantity,cs_item_sk
rows between unbounded preceding and 3 following ) as agg1,
sum(cs_list_price) over (order by cs_quantity,cs_item_sk
rows between unbounded preceding and current row ) as agg2,
count(cs_coupon_amt) over (order by cs_quantity,cs_item_sk
rows between unbounded preceding and unbounded following ) as agg3,
min(cs_sales_price) over (order by cs_quantity,cs_item_sk
rows between current row and unbounded following ) as agg4
from catalog_sales, customer_demographics, date_dim, item, promotion
where cs_sold_date_sk = d_date_sk and
cs_item_sk = i_item_sk and
cs_bill_cdemo_sk = cd_demo_sk and
cs_promo_sk = p_promo_sk and
cd_gender = 'M' and
cd_marital_status = 'S' and
cd_education_status = 'Unknown' and
(p_channel_email = 'N' or p_channel_event = 'N') and
d_year = 1999
group by i_item_id,cs_quantity,cs_list_price,cs_item_sk,cs_sales_price,cs_coupon_amt;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test605(desc="""N686"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0] i_item_id,
avg(cs_quantity) over (order by cs_quantity,cs_item_sk
rows between unbounded preceding and current row ) as agg1,
sum(cs_list_price) over (order by cs_quantity,cs_item_sk
rows between unbounded preceding and unbounded following ) as agg2,
count(cs_coupon_amt) over (order by cs_quantity,cs_item_sk
rows between current row and unbounded following ) as agg3,
min(cs_sales_price) over (order by cs_quantity,cs_item_sk
rows between current row and 3 following ) as agg4
from catalog_sales, customer_demographics, date_dim, item, promotion
where cs_sold_date_sk = d_date_sk and
cs_item_sk = i_item_sk and
cs_bill_cdemo_sk = cd_demo_sk and
cs_promo_sk = p_promo_sk and
cd_gender = 'M' and
cd_marital_status = 'S' and
cd_education_status = 'Unknown' and
(p_channel_email = 'N' or p_channel_event = 'N') and
d_year = 1999
group by i_item_id,cs_quantity,cs_list_price,cs_item_sk,cs_sales_price,cs_coupon_amt;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test606(desc="""N687"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0] i_item_id,
avg(cs_quantity) over (order by cs_quantity,cs_item_sk
rows between unbounded preceding and unbounded following  ) as agg1,
sum(cs_list_price) over (order by cs_quantity,cs_item_sk
rows between current row and unbounded following  ) as agg2,
count(cs_coupon_amt) over (order by cs_quantity,cs_item_sk
rows between current row and 4 following ) as agg3,
min(cs_sales_price) over (order by cs_quantity,cs_item_sk
rows between 12 preceding and 4 preceding ) as agg4
from catalog_sales, customer_demographics, date_dim, item, promotion
where cs_sold_date_sk = d_date_sk and
cs_item_sk = i_item_sk and
cs_bill_cdemo_sk = cd_demo_sk and
cs_promo_sk = p_promo_sk and
cd_gender = 'M' and
cd_marital_status = 'S' and
cd_education_status = 'Unknown' and
(p_channel_email = 'N' or p_channel_event = 'N') and
d_year = 1999
group by i_item_id,cs_quantity,cs_list_price,cs_item_sk,cs_sales_price,cs_coupon_amt;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test607(desc="""N688"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0] i_item_id,
avg(cs_quantity) over (order by cs_quantity,cs_item_sk
rows between current row and unbounded following  ) as agg1,
sum(cs_list_price) over (order by cs_quantity,cs_item_sk
rows between current row and 3 following  ) as agg2,
count(cs_coupon_amt) over (order by cs_quantity,cs_item_sk
rows between 12 preceding and 8 preceding ) as agg3,
min(cs_sales_price) over (order by cs_quantity,cs_item_sk
rows between 20 preceding and current row ) as agg4
from catalog_sales, customer_demographics, date_dim, item, promotion
where cs_sold_date_sk = d_date_sk and
cs_item_sk = i_item_sk and
cs_bill_cdemo_sk = cd_demo_sk and
cs_promo_sk = p_promo_sk and
cd_gender = 'M' and
cd_marital_status = 'S' and
cd_education_status = 'Unknown' and
(p_channel_email = 'N' or p_channel_event = 'N') and
d_year = 1999
group by i_item_id,cs_quantity,cs_list_price,cs_item_sk,cs_sales_price,cs_coupon_amt;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test608(desc="""N689"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0] i_item_id,
avg(cs_quantity) over (order by cs_quantity,cs_item_sk
rows between current row and 4 following  ) as agg1,
sum(cs_list_price) over (order by cs_quantity,cs_item_sk
rows between 25 preceding and 15 preceding  ) as agg2,
count(cs_coupon_amt) over (order by cs_quantity,cs_item_sk
rows between 22 preceding and 5 preceding ) as agg3,
min(cs_sales_price) over (order by cs_quantity,cs_item_sk
rows between 3 preceding and unbounded following ) as agg4
from catalog_sales, customer_demographics, date_dim, item, promotion
where cs_sold_date_sk = d_date_sk and
cs_item_sk = i_item_sk and
cs_bill_cdemo_sk = cd_demo_sk and
cs_promo_sk = p_promo_sk and
cd_gender = 'M' and
cd_marital_status = 'S' and
cd_education_status = 'Unknown' and
(p_channel_email = 'N' or p_channel_event = 'N') and
d_year = 1999
group by i_item_id,cs_quantity,cs_list_price,cs_item_sk,cs_sales_price,cs_coupon_amt;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test609(desc="""N690"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0] i_item_id,
avg(cs_quantity) over (order by cs_quantity,cs_item_sk
rows between 2 preceding and current row ) as agg1,
sum(cs_list_price) over (order by cs_quantity,cs_item_sk
rows between 18 preceding and 7 preceding  ) as agg2,
count(cs_coupon_amt) over (order by cs_quantity,cs_item_sk
rows between 200 preceding and unbounded following ) as agg3,
min(cs_sales_price) over (order by cs_quantity,cs_item_sk
rows between 34 preceding and 4 following ) as agg4
from catalog_sales, customer_demographics, date_dim, item, promotion
where cs_sold_date_sk = d_date_sk and
cs_item_sk = i_item_sk and
cs_bill_cdemo_sk = cd_demo_sk and
cs_promo_sk = p_promo_sk and
cd_gender = 'M' and
cd_marital_status = 'S' and
cd_education_status = 'Unknown' and
(p_channel_email = 'N' or p_channel_event = 'N') and
d_year = 1999
group by i_item_id,cs_quantity,cs_list_price,cs_item_sk,cs_sales_price,cs_coupon_amt;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test610(desc="""N691"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0] i_item_id,
avg(cs_quantity) over (order by cs_quantity,cs_item_sk
rows between 8 preceding and 4 preceding ) as agg1,
sum(cs_list_price) over (order by cs_quantity,cs_item_sk
rows between 6 preceding and unbounded following  ) as agg2,
count(cs_coupon_amt) over (order by cs_quantity,cs_item_sk
rows between 8 preceding and 5 following ) as agg3,
min(cs_sales_price) over (order by cs_quantity,cs_item_sk
rows between 3 following and 8 following ) as agg4
from catalog_sales, customer_demographics, date_dim, item, promotion
where cs_sold_date_sk = d_date_sk and
cs_item_sk = i_item_sk and
cs_bill_cdemo_sk = cd_demo_sk and
cs_promo_sk = p_promo_sk and
cd_gender = 'M' and
cd_marital_status = 'S' and
cd_education_status = 'Unknown' and
(p_channel_email = 'N' or p_channel_event = 'N') and
d_year = 1999
group by i_item_id,cs_quantity,cs_list_price,cs_item_sk,cs_sales_price,cs_coupon_amt;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test611(desc="""N692"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0] i_item_id,
avg(cs_quantity) over (order by cs_quantity,cs_item_sk
rows between 2 preceding and 3 following ) as agg1,
sum(cs_list_price) over (order by cs_quantity,cs_item_sk
rows between 2 preceding and unbounded following  ) as agg2,
count(cs_coupon_amt) over (order by cs_quantity,cs_item_sk
rows between 2 following and 5 following ) as agg3,
min(cs_sales_price) over (order by cs_quantity,cs_item_sk
rows between 3 following and unbounded following ) as agg4
from catalog_sales, customer_demographics, date_dim, item, promotion
where cs_sold_date_sk = d_date_sk and
cs_item_sk = i_item_sk and
cs_bill_cdemo_sk = cd_demo_sk and
cs_promo_sk = p_promo_sk and
cd_gender = 'M' and
cd_marital_status = 'S' and
cd_education_status = 'Unknown' and
(p_channel_email = 'N' or p_channel_event = 'N') and
d_year = 1999
group by i_item_id,cs_quantity,cs_list_price,cs_item_sk,cs_sales_price,cs_coupon_amt;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test612(desc="""N693"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #schema tpcds1x
 
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select  [last 0]  dt.d_year,
item.i_brand_id brand_id,
item.i_brand brand,
sum(ss_ext_sales_price) over (order by i_brand_id
rows between unbounded preceding and 3 preceding ) as ext_price
from   date_dim dt,
store_sales, item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manufact_id = 937
and dt.d_moy=11
group by dt.d_year, item.i_brand, item.i_brand_id,ss_ext_sales_price
order by dt.d_year, ext_price desc, brand_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test613(desc="""N694"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select  [last 0]  dt.d_year,
item.i_brand_id brand_id,
item.i_brand brand,
sum(ss_ext_sales_price) over (order by i_brand_id
rows between unbounded preceding and current row ) as ext_price
from   date_dim dt,
store_sales, item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manufact_id = 937
and dt.d_moy=11
group by dt.d_year, item.i_brand, item.i_brand_id,ss_ext_sales_price
order by dt.d_year, ext_price desc, brand_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test614(desc="""N695"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select  [last 0]  dt.d_year,
item.i_brand_id brand_id,
item.i_brand brand,
sum(ss_ext_sales_price) over (order by i_brand_id
rows between unbounded preceding and unbounded following) as ext_price
from   date_dim dt,
store_sales, item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manufact_id = 937
and dt.d_moy=11
group by dt.d_year, item.i_brand, item.i_brand_id,ss_ext_sales_price
order by dt.d_year, ext_price desc, brand_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test615(desc="""N696"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select  [last 0]  dt.d_year,
item.i_brand_id brand_id,
item.i_brand brand,
sum(ss_ext_sales_price) over (order by i_brand_id
rows between unbounded preceding and 10 following ) as ext_price
from   date_dim dt,
store_sales, item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manufact_id = 937
and dt.d_moy=11
group by dt.d_year, item.i_brand, item.i_brand_id,ss_ext_sales_price
order by dt.d_year, ext_price desc, brand_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test616(desc="""N697"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select  [last 0]  dt.d_year,
item.i_brand_id brand_id,
item.i_brand brand,
sum(ss_ext_sales_price) over (order by i_brand_id
rows between current row and current row ) as ext_price
from   date_dim dt,
store_sales, item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manufact_id = 937
and dt.d_moy=11
group by dt.d_year, item.i_brand, item.i_brand_id,ss_ext_sales_price
order by dt.d_year, ext_price desc, brand_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test617(desc="""N698"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select  [last 0]  dt.d_year,
item.i_brand_id brand_id,
item.i_brand brand,
sum(ss_ext_sales_price) over (order by i_brand_id
rows between current row and unbounded following ) as ext_price
from   date_dim dt,
store_sales, item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manufact_id = 937
and dt.d_moy=11
group by dt.d_year, item.i_brand, item.i_brand_id,ss_ext_sales_price
order by dt.d_year, ext_price desc, brand_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test618(desc="""N699"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select  [last 0]  dt.d_year,
item.i_brand_id brand_id,
item.i_brand brand,
sum(ss_ext_sales_price) over (order by i_brand_id
rows between current row and 10 following) as ext_price
from   date_dim dt,
store_sales, item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manufact_id = 937
and dt.d_moy=11
group by dt.d_year, item.i_brand, item.i_brand_id,ss_ext_sales_price
order by dt.d_year, ext_price desc, brand_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test619(desc="""N700"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select  [last 0]  dt.d_year,
item.i_brand_id brand_id,
item.i_brand brand,
sum(ss_ext_sales_price) over (order by i_brand_id
rows between 20 preceding and 12 preceding ) as ext_price
from   date_dim dt,
store_sales, item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manufact_id = 937
and dt.d_moy=11
group by dt.d_year, item.i_brand, item.i_brand_id,ss_ext_sales_price
order by dt.d_year, ext_price desc, brand_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test620(desc="""N701"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select  [last 0]  dt.d_year,
item.i_brand_id brand_id,
item.i_brand brand,
sum(ss_ext_sales_price) over (order by i_brand_id
rows between 100 preceding and current row ) as ext_price
from   date_dim dt,
store_sales, item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manufact_id = 937
and dt.d_moy=11
group by dt.d_year, item.i_brand, item.i_brand_id,ss_ext_sales_price
order by dt.d_year, ext_price desc, brand_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test621(desc="""N702"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select  [last 0]  dt.d_year,
item.i_brand_id brand_id,
item.i_brand brand,
sum(ss_ext_sales_price) over (order by i_brand_id
rows between 10 preceding and 2 following ) as ext_price
from   date_dim dt,
store_sales, item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manufact_id = 937
and dt.d_moy=11
group by dt.d_year, item.i_brand, item.i_brand_id,ss_ext_sales_price
order by dt.d_year, ext_price desc, brand_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test622(desc="""N703"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select  [last 0]  dt.d_year,
item.i_brand_id brand_id,
item.i_brand brand,
sum(ss_ext_sales_price) over (order by i_brand_id
rows between 4 preceding and unbounded following ) as ext_price
from   date_dim dt,
store_sales, item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manufact_id = 937
and dt.d_moy=11
group by dt.d_year, item.i_brand, item.i_brand_id,ss_ext_sales_price
order by dt.d_year, ext_price desc, brand_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test623(desc="""N704"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select  [last 0]  dt.d_year,
item.i_brand_id brand_id,
item.i_brand brand,
sum(ss_ext_sales_price) over (order by i_brand_id
rows between 4 following and 5 following ) as ext_price
from   date_dim dt,
store_sales, item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manufact_id = 937
and dt.d_moy=11
group by dt.d_year, item.i_brand, item.i_brand_id,ss_ext_sales_price
order by dt.d_year, ext_price desc, brand_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test624(desc="""N705"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select  [last 0]  dt.d_year,
item.i_brand_id brand_id,
item.i_brand brand,
sum(ss_ext_sales_price) over (order by i_brand_id
rows between 4 following and unbounded following ) as ext_price
from   date_dim dt,
store_sales, item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manufact_id = 937
and dt.d_moy=11
group by dt.d_year, item.i_brand, item.i_brand_id,ss_ext_sales_price
order by dt.d_year, ext_price desc, brand_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test625(desc="""N706"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 6 preceding and 10 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select  avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 6 preceding and 10 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test626(desc="""N707"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between unbounded preceding and 5 preceding) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between unbounded preceding and current row) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test627(desc="""N708"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between unbounded preceding and current row) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select  avg(ctr_total_return)*1.2
from (select wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between unbounded preceding and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    #execute xx;
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test628(desc="""N709"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between unbounded preceding and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between unbounded preceding and 3 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test629(desc="""N710"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between unbounded preceding and 4 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between current row and current row) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test630(desc="""N711"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between current row and current row) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between current row and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test631(desc="""N712"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between current row and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between current row and 3 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test632(desc="""N713"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between current row and 5 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 4 preceding and 3 preceding) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test633(desc="""N714"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 13 preceding and 6 preceding) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 4 preceding and current row) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test634(desc="""N715"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 6 preceding and current row) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 5 preceding and 4 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test635(desc="""N716"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 6 preceding and 15 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 4 preceding and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test636(desc="""N717"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 6 preceding and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 4 following and 8 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test637(desc="""N718"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 3 following and 6 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 4 following and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test638(desc="""N719"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between unbounded preceding and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 4 following and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test639(desc="""N720"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 10 preceding and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between current row and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test640(desc="""N721"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between current row and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between current row and 6 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test641(desc="""N722"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between current row and 3 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 24 preceding and 6 preceding) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test642(desc="""N723"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 15 preceding and 12 preceding) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 4 preceding and 6 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test643(desc="""N724"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 3 preceding and 4 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 6 preceding and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test644(desc="""N725"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 3 preceding and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 6 following and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test645(desc="""N726"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 3 following and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 6 following and 12 following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test646(desc="""N727"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0] c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between unbounded preceding and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between current row and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test647(desc="""N728"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 3 following and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr1
,customer_address
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from (select  wr_returning_customer_sk as ctr_customer_sk
,ca_state as ctr_state,
sum(wr_return_amt) over (order by wr_return_amt
rows between 6 preceding and unbounded following) as ctr_total_return
from web_returns
,date_dim
,customer_address
where wr_returned_date_sk = d_date_sk
and d_year =2002
and wr_returning_addr_sk = ca_address_sk
group by wr_returning_customer_sk,wr_return_amt
,ca_state) as ctr2
where ctr1.ctr_state = ctr2.ctr_state)
and ca_address_sk = c_current_addr_sk
and ca_state = 'IL'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
,c_last_review_date,ctr_total_return;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test648(desc="""N730"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
avg(ss_quantity) over (order by ss_quantity
rows between unbounded preceding and unbounded following ) as SalesQuantity ,
avg(ss_ext_sales_price) over (order by ss_quantity
rows between unbounded preceding and unbounded following ) as SalesPrice ,
avg(ss_ext_wholesale_cost) over (order by ss_quantity
rows between unbounded preceding and unbounded following ) as SalesCost ,
sum(ss_ext_wholesale_cost) over (order by ss_quantity
rows between unbounded preceding and unbounded following ) as WholeSale
from store_sales,
store, customer_demographics,
household_demographics,
customer_address, date_dim
where s_store_sk = ss_store_sk
and  ss_sold_date_sk = d_date_sk and d_year = 2001
and
(
(
ss_hdemo_sk=hd_demo_sk
and
cd_demo_sk = ss_cdemo_sk
and
cd_marital_status = 'S'
and
cd_education_status = '2 yr Degree'
and
ss_sales_price between 100.00 and 150.00
and
hd_dep_count = 3
)
or
(
ss_hdemo_sk=hd_demo_sk
and
cd_demo_sk = ss_cdemo_sk
and
cd_marital_status = 'W'
and
cd_education_status = 'College'
and
ss_sales_price between 50.00 and 100.00
and
hd_dep_count = 1
)
or
(
ss_hdemo_sk=hd_demo_sk
and
cd_demo_sk = ss_cdemo_sk
and
cd_marital_status = 'D'
and
cd_education_status = 'Advanced Degree'
and
ss_sales_price between 150.00 and 200.00
and
hd_dep_count = 1
)
)
and
(
(
ss_addr_sk = ca_address_sk
and
ca_country = 'United States'
and
ca_state in ('WV', 'VT', 'IA')
and ss_net_profit between 100 and 200
)
or
(ss_addr_sk = ca_address_sk
and
ca_country = 'United States'
and
ca_state in ('NC', 'IA', 'OK')
and ss_net_profit between 150 and 300
)
or
(ss_addr_sk = ca_address_sk
and
ca_country = 'United States'
and
ca_state in ('SD', 'ND', 'OK')
and ss_net_profit between 50 and 250
)    

) group by ss_quantity,ss_ext_sales_price,ss_ext_wholesale_cost;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test649(desc="""N666"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]
i_manufact_id ,
sum(total_sales) total_sales
from  (select * from (
select
i_manufact_id,
sum(ss_ext_sales_price) over (order by ss_ext_sales_price
rows between 6 preceding and 10 following)as total_sales
from
store_sales,
date_dim,
customer_address,
item
where
i_manufact_id in (select
i_manufact_id
from
item
where i_category in ('Electronics'))
and     ss_item_sk              = i_item_sk
and     ss_sold_date_sk         = d_date_sk
and     d_year                  = 1998
and     d_moy                   = 2
and     ss_addr_sk              = ca_address_sk
and     ca_gmt_offset           = -5
group by i_manufact_id,ss_ext_sales_price) as ss
union all
select * from (
select
i_manufact_id,
sum(cs_ext_sales_price) over (order by cs_ext_sales_price
rows between 6 preceding and 10 following)as total_sales
from
catalog_sales,
date_dim,
customer_address,
item
where
i_manufact_id               in (select
i_manufact_id
from
item
where i_category in ('Electronics'))
and     cs_item_sk              = i_item_sk
and     cs_sold_date_sk         = d_date_sk
and     d_year                  = 1998
and     d_moy                   = 2
and     cs_bill_addr_sk         = ca_address_sk
and     ca_gmt_offset           = -5
group by i_manufact_id, cs_ext_sales_price) as cs
union all
select * from (
select
i_manufact_id,
sum(ws_ext_sales_price) over (order by ws_ext_sales_price
rows between 6 preceding and 10 following)as total_sales
from
web_sales,
date_dim,
customer_address,
item
where
i_manufact_id               in (select
i_manufact_id
from
item
where i_category in ('Electronics'))
and     ws_item_sk              = i_item_sk
and     ws_sold_date_sk         = d_date_sk
and     d_year                  = 1998
and     d_moy                   = 2
and     ws_bill_addr_sk         = ca_address_sk
and     ca_gmt_offset           = -5
group by i_manufact_id, ws_ext_sales_price) as ws) tmp1
group by i_manufact_id
order by total_sales;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test650(desc="""N731"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #with count:
 
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
w_state
,i_item_id
,count(case when (cast(d_date as date) < cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between unbounded preceding and 4 preceding ) as sales_before
,count(case when (cast(d_date as date) >= cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between 4 following and 6 following) as sales_after
from
catalog_sales left outer join catalog_returns on
(cs_order_number = cr_order_number
and cs_item_sk = cr_item_sk)
,warehouse
,item
,date_dim
where
i_current_price between 0.99 and 1.49
and i_item_sk          = cs_item_sk
and cs_warehouse_sk    = w_warehouse_sk
and cs_sold_date_sk    = d_date_sk
and d_date between (cast ('2002-04-27' as date) - 30 )
and (cast ('2002-04-27' as date) + 30 )
group by
w_state,i_item_id,
d_date,
cs_sales_price,
cr_refunded_cash
order by
w_state,
i_item_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test651(desc="""N732"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
w_state
,i_item_id
,count(case when (cast(d_date as date) < cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between unbounded preceding and current row ) as sales_before
,count(case when (cast(d_date as date) >= cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between 2 following and unbounded following ) as sales_after
from
catalog_sales left outer join catalog_returns on
(cs_order_number = cr_order_number
and cs_item_sk = cr_item_sk)
,warehouse
,item
,date_dim
where
i_current_price between 0.99 and 1.49
and i_item_sk          = cs_item_sk
and cs_warehouse_sk    = w_warehouse_sk
and cs_sold_date_sk    = d_date_sk
and d_date between (cast ('2002-04-27' as date) - 30 )
and (cast ('2002-04-27' as date) + 30 )
group by
w_state,i_item_id,
d_date,
cs_sales_price,
cr_refunded_cash
order by
w_state,
i_item_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test652(desc="""N733"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
w_state
,i_item_id
,count(case when (cast(d_date as date) < cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between unbounded preceding and unbounded following ) as sales_before
,count(case when (cast(d_date as date) >= cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between 2 preceding and 4 following ) as sales_after
from
catalog_sales left outer join catalog_returns on
(cs_order_number = cr_order_number
and cs_item_sk = cr_item_sk)
,warehouse
,item
,date_dim
where
i_current_price between 0.99 and 1.49
and i_item_sk          = cs_item_sk
and cs_warehouse_sk    = w_warehouse_sk
and cs_sold_date_sk    = d_date_sk
and d_date between (cast ('2002-04-27' as date) - 30 )
and (cast ('2002-04-27' as date) + 30 )
group by
w_state,i_item_id,
d_date,
cs_sales_price,
cr_refunded_cash
order by
w_state,
i_item_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test653(desc="""N734"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
w_state
,i_item_id
,count(case when (cast(d_date as date) < cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between unbounded preceding and 4 following ) as sales_before
,count(case when (cast(d_date as date) >= cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between 2 preceding and unbounded following ) as sales_after
from
catalog_sales left outer join catalog_returns on
(cs_order_number = cr_order_number
and cs_item_sk = cr_item_sk)
,warehouse
,item
,date_dim
where
i_current_price between 0.99 and 1.49
and i_item_sk          = cs_item_sk
and cs_warehouse_sk    = w_warehouse_sk
and cs_sold_date_sk    = d_date_sk
and d_date between (cast ('2002-04-27' as date) - 30 )
and (cast ('2002-04-27' as date) + 30 )
group by
w_state,i_item_id,
d_date,
cs_sales_price,
cr_refunded_cash
order by
w_state,
i_item_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test654(desc="""N735"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
w_state
,i_item_id
,count(case when (cast(d_date as date) < cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between unbounded preceding and current row ) as sales_before
,count(case when (cast(d_date as date) >= cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between 12 preceding and 4 preceding ) as sales_after
from
catalog_sales left outer join catalog_returns on
(cs_order_number = cr_order_number
and cs_item_sk = cr_item_sk)
,warehouse
,item
,date_dim
where
i_current_price between 0.99 and 1.49
and i_item_sk          = cs_item_sk
and cs_warehouse_sk    = w_warehouse_sk
and cs_sold_date_sk    = d_date_sk
and d_date between (cast ('2002-04-27' as date) - 30 )
and (cast ('2002-04-27' as date) + 30 )
group by
w_state,i_item_id,
d_date,
cs_sales_price,
cr_refunded_cash
order by
w_state,
i_item_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test655(desc="""N736"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
w_state
,i_item_id
,count(case when (cast(d_date as date) < cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between current row and current row ) as sales_before
,count(case when (cast(d_date as date) >= cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between 2 preceding and current row ) as sales_after
from
catalog_sales left outer join catalog_returns on
(cs_order_number = cr_order_number
and cs_item_sk = cr_item_sk)
,warehouse
,item
,date_dim
where
i_current_price between 0.99 and 1.49
and i_item_sk          = cs_item_sk
and cs_warehouse_sk    = w_warehouse_sk
and cs_sold_date_sk    = d_date_sk
and d_date between (cast ('2002-04-27' as date) - 30 )
and (cast ('2002-04-27' as date) + 30 )
group by
w_state,i_item_id,
d_date,
cs_sales_price,
cr_refunded_cash
order by
w_state,
i_item_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test656(desc="""N737"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0]
w_state
,i_item_id
,count(case when (cast(d_date as date) < cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between current row and unbounded following ) as sales_before
,count(case when (cast(d_date as date) >= cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between current row and 4 following ) as sales_after
from
catalog_sales left outer join catalog_returns on
(cs_order_number = cr_order_number
and cs_item_sk = cr_item_sk)
,warehouse
,item
,date_dim
where
i_current_price between 0.99 and 1.49
and i_item_sk          = cs_item_sk
and cs_warehouse_sk    = w_warehouse_sk
and cs_sold_date_sk    = d_date_sk
and d_date between (cast ('2002-04-27' as date) - 30 )
and (cast ('2002-04-27' as date) + 30 )
group by
w_state,i_item_id,
d_date,
cs_sales_price,
cr_refunded_cash
order by
w_state,
i_item_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test657(desc="""N378"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0]
w_state
,i_item_id
,count(case when (cast(d_date as date) < cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between unbounded preceding and unbounded following ) as sales_before
,count(case when (cast(d_date as date) >= cast ('2002-04-27' as date))
then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end)  over (order by i_item_id
rows between 4 preceding and unbounded following ) as sales_after
from
catalog_sales left outer join catalog_returns on
(cs_order_number = cr_order_number
and cs_item_sk = cr_item_sk)
,warehouse
,item
,date_dim
where
i_current_price between 0.99 and 1.49
and i_item_sk          = cs_item_sk
and cs_warehouse_sk    = w_warehouse_sk
and cs_sold_date_sk    = d_date_sk
and d_date between (cast ('2002-04-27' as date) - 30 )
and (cast ('2002-04-27' as date) + 30 )
group by
w_state,i_item_id,
d_date,
cs_sales_price,
cr_refunded_cash
order by
w_state,
i_item_id;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test658(desc="""N667"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0] s_store_name, s_store_id,
sum(case when (d_day_name='Sunday') then ss_sales_price else null end) over (order by s_store_id
rows between current row and unbounded following ) as sun_sales,
sum(case when (d_day_name='Monday') then ss_sales_price else null end) over (order by s_store_id
rows between current row and unbounded following ) as mon_sales,
sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) over (order by s_store_id
rows between current row and unbounded following ) as tue_sales,
sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) over (order by s_store_id
rows between current row and unbounded following ) as wed_sales,
sum(case when (d_day_name='Thursday') then ss_sales_price else null end) over (order by s_store_id
rows between current row and unbounded following ) as thu_sales,
sum(case when (d_day_name='Friday') then ss_sales_price else null end) over (order by s_store_id
rows between current row and unbounded following ) as fri_sales,
sum(case when (d_day_name='Saturday') then ss_sales_price else null end) over (order by s_store_id
rows between current row and unbounded following ) as sat_sales
from date_dim, store_sales, store
where d_date_sk = ss_sold_date_sk and
s_store_sk = ss_store_sk and
s_gmt_offset = -5 and
d_year = 2001
group by
s_store_name,
s_store_id,
d_day_name,
ss_sales_price;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test659(desc="""N739"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select
ss_item_sk,
ss_sold_date_sk,
ss_customer_sk,
ss_sales_price,
sum (ss_quantity) over (order by ss_quantity,ss_sales_price,ss_item_sk
rows between unbounded preceding and unbounded following ) as Store_sales_Qty
from
store_sales,
store,
customer_demographics,
customer_address,
date_dim
where s_store_sk = ss_store_sk
and  ss_sold_date_sk = d_date_sk and d_year = 1999
and
(
(
cd_demo_sk = ss_cdemo_sk
and
cd_marital_status = 'M'
and
cd_education_status = '2 yr Degree'
and
ss_sales_price between 100.00 and 150.00
)
or
(
cd_demo_sk = ss_cdemo_sk
and
cd_marital_status = 'M'
and
cd_education_status = '2 yr Degree'
and
ss_sales_price between 50.00 and 100.00
)
or
(
cd_demo_sk = ss_cdemo_sk
and
cd_marital_status = 'M'
and
cd_education_status = '2 yr Degree'
and
ss_sales_price between 150.00 and 200.00
)
)
and
(
(
ss_addr_sk = ca_address_sk
and
ca_country = 'United States'
and
ca_state in ('MT', 'FL', 'NC')
and ss_net_profit between 0 and 2000
)
or
(ss_addr_sk = ca_address_sk
and
ca_country = 'United States'
and
ca_state in ('IL', 'GA', 'NY')
and ss_net_profit between 150 and 3000
)
or
(ss_addr_sk = ca_address_sk
and
ca_country = 'United States'
and
ca_state in ('MA', 'TN', 'CO')
and ss_net_profit between 50 and 25000
)
);"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test660(desc="""N740"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select   dt.d_year
,item.i_brand_id brand_id
,item.i_brand brand
,sum(ss_ext_sales_price) over (order by ss_ext_sales_price,dt.d_year,
item.i_brand_id ,item.i_brand
rows between unbounded preceding and 10 preceding ) as ext_price
from date_dim dt
,store_sales
,item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manager_id = 1
and dt.d_moy=11
and dt.d_year=2002
group by dt.d_year
,item.i_brand
,item.i_brand_id
,ss_ext_sales_price
order by dt.d_year
,ext_price desc
,brand_id ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test661(desc="""N741"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select   dt.d_year
,item.i_brand_id brand_id
,item.i_brand brand
,sum(ss_ext_sales_price) over (order by ss_ext_sales_price,dt.d_year,
item.i_brand_id ,item.i_brand
rows between unbounded preceding and current row ) as ext_price
from date_dim dt
,store_sales
,item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manager_id = 1
and dt.d_moy=11
and dt.d_year=2002
group by dt.d_year
,item.i_brand
,item.i_brand_id
,ss_ext_sales_price
order by dt.d_year
,ext_price desc
,brand_id ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test662(desc="""N742"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select   dt.d_year
,item.i_brand_id brand_id
,item.i_brand brand
,sum(ss_ext_sales_price) over (order by ss_ext_sales_price,dt.d_year,
item.i_brand_id ,item.i_brand
rows between unbounded preceding and unbounded following) as ext_price
from date_dim dt
,store_sales
,item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manager_id = 1
and dt.d_moy=11
and dt.d_year=2002
group by dt.d_year
,item.i_brand
,item.i_brand_id
,ss_ext_sales_price
order by dt.d_year
,ext_price desc
,brand_id ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test663(desc="""N743"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select   dt.d_year
,item.i_brand_id brand_id
,item.i_brand brand
,sum(ss_ext_sales_price) over (order by ss_ext_sales_price,dt.d_year,
item.i_brand_id ,item.i_brand
rows between unbounded preceding and 10 following ) as ext_price
from date_dim dt
,store_sales
,item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manager_id = 1
and dt.d_moy=11
and dt.d_year=2002
group by dt.d_year
,item.i_brand
,item.i_brand_id
,ss_ext_sales_price
order by dt.d_year
,ext_price desc
,brand_id ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test664(desc="""N744"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select   dt.d_year
,item.i_brand_id brand_id
,item.i_brand brand
,sum(ss_ext_sales_price) over (order by ss_ext_sales_price,dt.d_year,
item.i_brand_id ,item.i_brand
rows between current row and current row ) as ext_price
from date_dim dt
,store_sales
,item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manager_id = 1
and dt.d_moy=11
and dt.d_year=2002
group by dt.d_year
,item.i_brand
,item.i_brand_id
,ss_ext_sales_price
order by dt.d_year
,ext_price desc
,brand_id ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test665(desc="""N745"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select   dt.d_year
,item.i_brand_id brand_id
,item.i_brand brand
,sum(ss_ext_sales_price) over (order by ss_ext_sales_price,dt.d_year,
item.i_brand_id ,item.i_brand
rows between current row and 12 following ) as ext_price
from date_dim dt
,store_sales
,item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manager_id = 1
and dt.d_moy=11
and dt.d_year=2002
group by dt.d_year
,item.i_brand
,item.i_brand_id
,ss_ext_sales_price
order by dt.d_year
,ext_price desc
,brand_id ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test666(desc="""N746"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select   dt.d_year
,item.i_brand_id brand_id
,item.i_brand brand
,sum(ss_ext_sales_price) over (order by ss_ext_sales_price,dt.d_year,
item.i_brand_id ,item.i_brand
rows between current row and unbounded following ) as ext_price
from date_dim dt
,store_sales
,item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manager_id = 1
and dt.d_moy=11
and dt.d_year=2002
group by dt.d_year
,item.i_brand
,item.i_brand_id
,ss_ext_sales_price
order by dt.d_year
,ext_price desc
,brand_id ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test667(desc="""N747"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select   dt.d_year
,item.i_brand_id brand_id
,item.i_brand brand
,sum(ss_ext_sales_price) over (order by ss_ext_sales_price,dt.d_year,
item.i_brand_id ,item.i_brand
rows between 12 preceding and 6 preceding ) as ext_price
from date_dim dt
,store_sales
,item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manager_id = 1
and dt.d_moy=11
and dt.d_year=2002
group by dt.d_year
,item.i_brand
,item.i_brand_id
,ss_ext_sales_price
order by dt.d_year
,ext_price desc
,brand_id ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test668(desc="""N748"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select   dt.d_year
,item.i_brand_id brand_id
,item.i_brand brand
,sum(ss_ext_sales_price) over (order by ss_ext_sales_price,dt.d_year,
item.i_brand_id ,item.i_brand
rows between 8 preceding and unbounded following ) as ext_price
from date_dim dt
,store_sales
,item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manager_id = 1
and dt.d_moy=11
and dt.d_year=2002
group by dt.d_year
,item.i_brand
,item.i_brand_id
,ss_ext_sales_price
order by dt.d_year
,ext_price desc
,brand_id ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test669(desc="""N749"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select   dt.d_year
,item.i_brand_id brand_id
,item.i_brand brand
,sum(ss_ext_sales_price) over (order by ss_ext_sales_price,dt.d_year,
item.i_brand_id ,item.i_brand
rows between 4 preceding and 4 following ) as ext_price
from date_dim dt
,store_sales
,item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manager_id = 1
and dt.d_moy=11
and dt.d_year=2002
group by dt.d_year
,item.i_brand
,item.i_brand_id
,ss_ext_sales_price
order by dt.d_year
,ext_price desc
,brand_id ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test670(desc="""N750"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select   dt.d_year
,item.i_brand_id brand_id
,item.i_brand brand
,sum(ss_ext_sales_price) over (order by ss_ext_sales_price,dt.d_year,
item.i_brand_id ,item.i_brand
rows between 4 following and 6 following ) as ext_price
from date_dim dt
,store_sales
,item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manager_id = 1
and dt.d_moy=11
and dt.d_year=2002
group by dt.d_year
,item.i_brand
,item.i_brand_id
,ss_ext_sales_price
order by dt.d_year
,ext_price desc
,brand_id ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test671(desc="""N751"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select   dt.d_year
,item.i_brand_id brand_id
,item.i_brand brand
,sum(ss_ext_sales_price) over (order by ss_ext_sales_price,dt.d_year,
item.i_brand_id ,item.i_brand
rows between 6 following and unbounded following) as ext_price
from date_dim dt
,store_sales
,item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manager_id = 1
and dt.d_moy=11
and dt.d_year=2002
group by dt.d_year
,item.i_brand
,item.i_brand_id
,ss_ext_sales_price
order by dt.d_year
,ext_price desc
,brand_id ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test672(desc="""N752"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #ERROR[8411] A numeric overflow occurred during an arithmetic
 
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0]  dt.d_year
,item.i_brand_id brand_id
,item.i_brand brand
,variance(ss_ext_sales_price) over (order by ss_ext_sales_price,dt.d_year,
item.i_brand_id ,item.i_brand
rows between 6 following and unbounded following) as ext_price
from date_dim dt
,store_sales
,item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manager_id = 1
and dt.d_moy=11
and dt.d_year=2002
group by dt.d_year
,item.i_brand
,item.i_brand_id
,ss_ext_sales_price
order by dt.d_year
,ext_price desc
,brand_id ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test673(desc="""N668"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
   
    #ERROR[8810] Executor ran into an internal failure
 
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """prepare xx from
select [last 0]   dt.d_year
,item.i_brand_id brand_id
,item.i_brand brand
,variance(ss_ext_sales_price) over (order by ss_ext_sales_price
rows between 3 preceding and unbounded following) as ext_price
from date_dim dt
,store_sales
,item
where dt.d_date_sk = store_sales.ss_sold_date_sk
and store_sales.ss_item_sk = item.i_item_sk
and item.i_manager_id = 1
and dt.d_moy=11
and dt.d_year=2002
group by dt.d_year
,item.i_brand
,item.i_brand_id
,ss_ext_sales_price
order by dt.d_year
,ext_price desc
,brand_id ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test674(desc="""N753"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0]
substr(w_warehouse_name,1,20)
,sm_type
,web_name
,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end)  over (order by ws_ship_date_sk
rows between 10 preceding and unbounded following ) as "30 days"
,avg(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and
(ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end )  over (order by ws_ship_date_sk
rows between 10 preceding and unbounded following ) as "31-60 days"
,min(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and
(ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end)  over (order by ws_ship_date_sk
rows between 10 preceding and unbounded following ) as "61-90 days"
,max(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
(ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) over (order by ws_ship_date_sk
rows between 10 preceding and unbounded following )  as "91-120 days"
,stddev(case when (ws_ship_date_sk - ws_sold_date_sk  > 120) then 1 else 0 end)  over (order by ws_ship_date_sk
rows between 10 preceding and unbounded following ) as ">120 days"
from
web_sales
,warehouse
,ship_mode
,web_site
,date_dim
where
extract(year from d_date) = 1999
and ws_ship_date_sk   = d_date_sk
and ws_warehouse_sk   = w_warehouse_sk
and ws_ship_mode_sk   = sm_ship_mode_sk
and ws_web_site_sk    = web_site_sk
group by
1
,sm_type
,web_name
,ws_ship_date_sk
,ws_sold_date_sk;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test675(desc="""N754"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0] i_item_id,
avg(ss_quantity)  over (order by i_item_id
rows between unbounded preceding and unbounded following ) as agg1,
avg(ss_list_price) over (order by i_item_id
rows between unbounded preceding and unbounded following )as agg2,
avg(ss_coupon_amt) over (order by i_item_id
rows between unbounded preceding and unbounded following )as agg3,
avg(ss_sales_price) over (order by i_item_id
rows between unbounded preceding and unbounded following )as agg4
from store_sales, customer_demographics, date_dim, item, promotion
where ss_sold_date_sk = d_date_sk and
ss_item_sk = i_item_sk and
ss_cdemo_sk = cd_demo_sk and
ss_promo_sk = p_promo_sk and
cd_gender = 'F' and
cd_marital_status = 'D' and
cd_education_status = 'Advanced Degree' and
(p_channel_email = 'N' or p_channel_event = 'N') and
d_year = 2000
group by
i_item_id,
ss_quantity,
ss_list_price,
ss_coupon_amt,
ss_sales_price;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

def test676(desc="""N755"""):
    global _testmgr
    global _testlist
    global _dci
    if not _testmgr.testcase_begin(_testlist): return
    
    stmt = """set schema """ + gvars.g_schema_tpcds1x + """;"""
    output = _dci.cmdexec(stmt)
    
    stmt = """Prepare xx  from
select [last 0]
w_warehouse_name
,w_warehouse_sq_ft
,w_city
,w_county
,w_state
,w_country
,ship_carriers
,"year"
,sum(jan_sales) as jan_sales
,sum(feb_sales) as feb_sales
,sum(mar_sales) as mar_sales
,sum(apr_sales) as apr_sales
,sum(may_sales) as may_sales
,sum(jun_sales) as jun_sales
,sum(jul_sales) as jul_sales
,sum(aug_sales) as aug_sales
,sum(sep_sales) as sep_sales
,sum(oct_sales) as oct_sales
,sum(nov_sales) as nov_sales
,sum(dec_sales) as dec_sales
,sum(jan_sales/w_warehouse_sq_ft) as jan_sales_per_sq_foot
,sum(feb_sales/w_warehouse_sq_ft) as feb_sales_per_sq_foot
,sum(mar_sales/w_warehouse_sq_ft) as mar_sales_per_sq_foot
,sum(apr_sales/w_warehouse_sq_ft) as apr_sales_per_sq_foot
,sum(may_sales/w_warehouse_sq_ft) as may_sales_per_sq_foot
,sum(jun_sales/w_warehouse_sq_ft) as jun_sales_per_sq_foot
,sum(jul_sales/w_warehouse_sq_ft) as jul_sales_per_sq_foot
,sum(aug_sales/w_warehouse_sq_ft) as aug_sales_per_sq_foot
,sum(sep_sales/w_warehouse_sq_ft) as sep_sales_per_sq_foot
,sum(oct_sales/w_warehouse_sq_ft) as oct_sales_per_sq_foot
,sum(nov_sales/w_warehouse_sq_ft) as nov_sales_per_sq_foot
,sum(dec_sales/w_warehouse_sq_ft) as dec_sales_per_sq_foot
,sum(jan_net) as jan_net
,sum(feb_net) as feb_net
,sum(mar_net) as mar_net
,sum(apr_net) as apr_net
,sum(may_net) as may_net
,sum(jun_net) as jun_net
,sum(jul_net) as jul_net
,sum(aug_net) as aug_net
,sum(sep_net) as sep_net
,sum(oct_net) as oct_net
,sum(nov_net) as nov_net
,sum(dec_net) as dec_net    

from (
(select
w_warehouse_name
,w_warehouse_sq_ft
,w_city
,w_county
,w_state
,w_country
,'ZOUROS' || ',' || 'UPS' as ship_carriers
,d_year as "year"
,sum(case when d_month_seq = 1
then ws_sales_price* ws_quantity else 0 end)  over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as jan_sales
,sum(case when d_month_seq = 2
then ws_sales_price* ws_quantity else 0 end) over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as feb_sales
,sum(case when d_month_seq = 3
then ws_sales_price* ws_quantity else 0 end) over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as mar_sales
,sum(case when d_month_seq = 4
then ws_sales_price* ws_quantity else 0 end) over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as apr_sales
,sum(case when d_month_seq = 5
then ws_sales_price* ws_quantity else 0 end) over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as may_sales
,sum(case when d_month_seq = 6
then ws_sales_price* ws_quantity else 0 end) over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as jun_sales
,sum(case when d_month_seq = 7
then ws_sales_price* ws_quantity else 0 end) over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as jul_sales
,sum(case when d_month_seq = 8
then ws_sales_price* ws_quantity else 0 end) over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as aug_sales
,sum(case when d_month_seq = 9
then ws_sales_price* ws_quantity else 0 end) over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as sep_sales
,sum(case when d_month_seq = 10
then ws_sales_price* ws_quantity else 0 end) over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as oct_sales
,sum(case when d_month_seq = 11
then ws_sales_price* ws_quantity else 0 end) over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as nov_sales
,sum(case when d_month_seq = 12
then ws_sales_price* ws_quantity else 0 end) over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as dec_sales
,sum(case when d_month_seq = 1
then ws_net_paid_inc_ship * ws_quantity else 0 end)over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as jan_net
,sum(case when d_month_seq = 2
then ws_net_paid_inc_ship * ws_quantity else 0 end)over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as feb_net
,sum(case when d_month_seq = 3
then ws_net_paid_inc_ship * ws_quantity else 0 end)over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as mar_net
,sum(case when d_month_seq = 4
then ws_net_paid_inc_ship * ws_quantity else 0 end)over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as apr_net
,sum(case when d_month_seq = 5
then ws_net_paid_inc_ship * ws_quantity else 0 end)over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as may_net
,sum(case when d_month_seq = 6
then ws_net_paid_inc_ship * ws_quantity else 0 end)over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as jun_net
,sum(case when d_month_seq = 7
then ws_net_paid_inc_ship * ws_quantity else 0 end)over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as jul_net
,sum(case when d_month_seq = 8
then ws_net_paid_inc_ship * ws_quantity else 0 end)over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as aug_net
,sum(case when d_month_seq = 9
then ws_net_paid_inc_ship * ws_quantity else 0 end)over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as sep_net
,sum(case when d_month_seq = 10
then ws_net_paid_inc_ship * ws_quantity else 0 end)over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as oct_net
,sum(case when d_month_seq = 11
then ws_net_paid_inc_ship * ws_quantity else 0 end)over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as nov_net
,sum(case when d_month_seq = 12
then ws_net_paid_inc_ship * ws_quantity else 0 end)over (order by ws_sales_price
rows between unbounded preceding and unbounded following ) as dec_net
from
web_sales
,warehouse
,date_dim
,time_dim
,ship_mode
where
ws_warehouse_sk =  w_warehouse_sk
and ws_sold_date_sk = d_date_sk
and ws_sold_time_sk = t_time_sk
and ws_ship_mode_sk = sm_ship_mode_sk
and d_year = 2001
and t_time between 5722 and 5722+28800
and sm_carrier in ('ZOUROS','UPS')
group by
w_warehouse_name
,w_warehouse_sq_ft
,w_city
,w_county
,w_state
,w_country
,d_year
,ws_sales_price
,d_month_seq
,ws_quantity
,ws_net_paid_inc_ship
)
union all
(select
w_warehouse_name
,w_warehouse_sq_ft
,w_city
,w_county
,w_state
,w_country
,'ZOUROS' || ',' || 'UPS' as ship_carriers
,d_year as "year"
,sum(case when d_month_seq = 1
then cs_ext_sales_price* cs_quantity else 0 end) as jan_sales
,sum(case when d_month_seq = 2
then cs_ext_sales_price* cs_quantity else 0 end) as feb_sales
,sum(case when d_month_seq = 3
then cs_ext_sales_price* cs_quantity else 0 end) as mar_sales
,sum(case when d_month_seq = 4
then cs_ext_sales_price* cs_quantity else 0 end) as apr_sales
,sum(case when d_month_seq = 5
then cs_ext_sales_price* cs_quantity else 0 end) as may_sales
,sum(case when d_month_seq = 6
then cs_ext_sales_price* cs_quantity else 0 end) as jun_sales
,sum(case when d_month_seq = 7
then cs_ext_sales_price* cs_quantity else 0 end) as jul_sales
,sum(case when d_month_seq = 8
then cs_ext_sales_price* cs_quantity else 0 end) as aug_sales
,sum(case when d_month_seq = 9
then cs_ext_sales_price* cs_quantity else 0 end) as sep_sales
,sum(case when d_month_seq = 10
then cs_ext_sales_price* cs_quantity else 0 end) as oct_sales
,sum(case when d_month_seq = 11
then cs_ext_sales_price* cs_quantity else 0 end) as nov_sales
,sum(case when d_month_seq = 12
then cs_ext_sales_price* cs_quantity else 0 end) as dec_sales
,sum(case when d_month_seq = 1
then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jan_net
,sum(case when d_month_seq = 2
then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as feb_net
,sum(case when d_month_seq = 3
then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as mar_net
,sum(case when d_month_seq = 4
then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as apr_net
,sum(case when d_month_seq = 5
then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as may_net
,sum(case when d_month_seq = 6
then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jun_net
,sum(case when d_month_seq = 7
then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as jul_net
,sum(case when d_month_seq = 8
then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as aug_net
,sum(case when d_month_seq = 9
then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as sep_net
,sum(case when d_month_seq = 10
then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as oct_net
,sum(case when d_month_seq = 11
then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as nov_net
,sum(case when d_month_seq = 12
then cs_net_paid_inc_ship_tax * cs_quantity else 0 end) as dec_net
from
catalog_sales
,warehouse
,date_dim
,time_dim
,ship_mode
where
cs_warehouse_sk =  w_warehouse_sk
and cs_sold_date_sk = d_date_sk
and cs_sold_time_sk = t_time_sk
and cs_ship_mode_sk = sm_ship_mode_sk
and d_year = 2001
and t_time between 5722 and 5722+28800
and sm_carrier in ('ZOUROS','UPS')
group by
w_warehouse_name
,w_warehouse_sq_ft
,w_city
,w_county
,w_state
,w_country
,d_year
)
) x
group by
w_warehouse_name
,w_warehouse_sq_ft
,w_city
,w_county
,w_state
,w_country
,ship_carriers
,"year"
order by w_warehouse_name ;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_prepared_msg(output)
    
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """explain options 'f' xx;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    stmt = """execute xx;"""
    output = _dci.cmdexec(stmt)
    stmt = """get statistics for qid current;"""
    output = _dci.cmdexec(stmt)
    _dci.expect_complete_msg(output)
    
    _testmgr.testcase_end(desc)

